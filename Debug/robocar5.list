
robocar5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb8  08010ed8  08010ed8  00020ed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e90  08011e90  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08011e90  08011e90  00021e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e98  08011e98  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e98  08011e98  00021e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e9c  08011e9c  00021e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011ea0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          000051ac  20000078  20000078  00030078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005224  20005224  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c21a  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050f1  00000000  00000000  0005c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  000613b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bc0  00000000  00000000  000630f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000065a4  00000000  00000000  00064cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002363d  00000000  00000000  0006b25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6eba  00000000  00000000  0008e899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00175753  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000087b8  00000000  00000000  001757a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ebc 	.word	0x08010ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08010ebc 	.word	0x08010ebc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_frsub>:
 8000c78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c7c:	e002      	b.n	8000c84 <__addsf3>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fsub>:
 8000c80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c84 <__addsf3>:
 8000c84:	0042      	lsls	r2, r0, #1
 8000c86:	bf1f      	itttt	ne
 8000c88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c8c:	ea92 0f03 	teqne	r2, r3
 8000c90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c98:	d06a      	beq.n	8000d70 <__addsf3+0xec>
 8000c9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ca2:	bfc1      	itttt	gt
 8000ca4:	18d2      	addgt	r2, r2, r3
 8000ca6:	4041      	eorgt	r1, r0
 8000ca8:	4048      	eorgt	r0, r1
 8000caa:	4041      	eorgt	r1, r0
 8000cac:	bfb8      	it	lt
 8000cae:	425b      	neglt	r3, r3
 8000cb0:	2b19      	cmp	r3, #25
 8000cb2:	bf88      	it	hi
 8000cb4:	4770      	bxhi	lr
 8000cb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cc2:	bf18      	it	ne
 8000cc4:	4240      	negne	r0, r0
 8000cc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cd2:	bf18      	it	ne
 8000cd4:	4249      	negne	r1, r1
 8000cd6:	ea92 0f03 	teq	r2, r3
 8000cda:	d03f      	beq.n	8000d5c <__addsf3+0xd8>
 8000cdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000ce0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ce4:	eb10 000c 	adds.w	r0, r0, ip
 8000ce8:	f1c3 0320 	rsb	r3, r3, #32
 8000cec:	fa01 f103 	lsl.w	r1, r1, r3
 8000cf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__addsf3+0x78>
 8000cf6:	4249      	negs	r1, r1
 8000cf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d00:	d313      	bcc.n	8000d2a <__addsf3+0xa6>
 8000d02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d06:	d306      	bcc.n	8000d16 <__addsf3+0x92>
 8000d08:	0840      	lsrs	r0, r0, #1
 8000d0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d0e:	f102 0201 	add.w	r2, r2, #1
 8000d12:	2afe      	cmp	r2, #254	; 0xfe
 8000d14:	d251      	bcs.n	8000dba <__addsf3+0x136>
 8000d16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d1e:	bf08      	it	eq
 8000d20:	f020 0001 	biceq.w	r0, r0, #1
 8000d24:	ea40 0003 	orr.w	r0, r0, r3
 8000d28:	4770      	bx	lr
 8000d2a:	0049      	lsls	r1, r1, #1
 8000d2c:	eb40 0000 	adc.w	r0, r0, r0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	bf28      	it	cs
 8000d34:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d38:	d2ed      	bcs.n	8000d16 <__addsf3+0x92>
 8000d3a:	fab0 fc80 	clz	ip, r0
 8000d3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d42:	ebb2 020c 	subs.w	r2, r2, ip
 8000d46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d4a:	bfaa      	itet	ge
 8000d4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d50:	4252      	neglt	r2, r2
 8000d52:	4318      	orrge	r0, r3
 8000d54:	bfbc      	itt	lt
 8000d56:	40d0      	lsrlt	r0, r2
 8000d58:	4318      	orrlt	r0, r3
 8000d5a:	4770      	bx	lr
 8000d5c:	f092 0f00 	teq	r2, #0
 8000d60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d64:	bf06      	itte	eq
 8000d66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d6a:	3201      	addeq	r2, #1
 8000d6c:	3b01      	subne	r3, #1
 8000d6e:	e7b5      	b.n	8000cdc <__addsf3+0x58>
 8000d70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d78:	bf18      	it	ne
 8000d7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d7e:	d021      	beq.n	8000dc4 <__addsf3+0x140>
 8000d80:	ea92 0f03 	teq	r2, r3
 8000d84:	d004      	beq.n	8000d90 <__addsf3+0x10c>
 8000d86:	f092 0f00 	teq	r2, #0
 8000d8a:	bf08      	it	eq
 8000d8c:	4608      	moveq	r0, r1
 8000d8e:	4770      	bx	lr
 8000d90:	ea90 0f01 	teq	r0, r1
 8000d94:	bf1c      	itt	ne
 8000d96:	2000      	movne	r0, #0
 8000d98:	4770      	bxne	lr
 8000d9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d9e:	d104      	bne.n	8000daa <__addsf3+0x126>
 8000da0:	0040      	lsls	r0, r0, #1
 8000da2:	bf28      	it	cs
 8000da4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dae:	bf3c      	itt	cc
 8000db0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000db4:	4770      	bxcc	lr
 8000db6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	4770      	bx	lr
 8000dc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dc8:	bf16      	itet	ne
 8000dca:	4608      	movne	r0, r1
 8000dcc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dd0:	4601      	movne	r1, r0
 8000dd2:	0242      	lsls	r2, r0, #9
 8000dd4:	bf06      	itte	eq
 8000dd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dda:	ea90 0f01 	teqeq	r0, r1
 8000dde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000de2:	4770      	bx	lr

08000de4 <__aeabi_ui2f>:
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e004      	b.n	8000df4 <__aeabi_i2f+0x8>
 8000dea:	bf00      	nop

08000dec <__aeabi_i2f>:
 8000dec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000df0:	bf48      	it	mi
 8000df2:	4240      	negmi	r0, r0
 8000df4:	ea5f 0c00 	movs.w	ip, r0
 8000df8:	bf08      	it	eq
 8000dfa:	4770      	bxeq	lr
 8000dfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e00:	4601      	mov	r1, r0
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	e01c      	b.n	8000e42 <__aeabi_l2f+0x2a>

08000e08 <__aeabi_ul2f>:
 8000e08:	ea50 0201 	orrs.w	r2, r0, r1
 8000e0c:	bf08      	it	eq
 8000e0e:	4770      	bxeq	lr
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e00a      	b.n	8000e2c <__aeabi_l2f+0x14>
 8000e16:	bf00      	nop

08000e18 <__aeabi_l2f>:
 8000e18:	ea50 0201 	orrs.w	r2, r0, r1
 8000e1c:	bf08      	it	eq
 8000e1e:	4770      	bxeq	lr
 8000e20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__aeabi_l2f+0x14>
 8000e26:	4240      	negs	r0, r0
 8000e28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e2c:	ea5f 0c01 	movs.w	ip, r1
 8000e30:	bf02      	ittt	eq
 8000e32:	4684      	moveq	ip, r0
 8000e34:	4601      	moveq	r1, r0
 8000e36:	2000      	moveq	r0, #0
 8000e38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e3c:	bf08      	it	eq
 8000e3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e46:	fabc f28c 	clz	r2, ip
 8000e4a:	3a08      	subs	r2, #8
 8000e4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e50:	db10      	blt.n	8000e74 <__aeabi_l2f+0x5c>
 8000e52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e56:	4463      	add	r3, ip
 8000e58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	f020 0001 	biceq.w	r0, r0, #1
 8000e72:	4770      	bx	lr
 8000e74:	f102 0220 	add.w	r2, r2, #32
 8000e78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e84:	fa21 f202 	lsr.w	r2, r1, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_uldivmod>:
 8000e94:	b953      	cbnz	r3, 8000eac <__aeabi_uldivmod+0x18>
 8000e96:	b94a      	cbnz	r2, 8000eac <__aeabi_uldivmod+0x18>
 8000e98:	2900      	cmp	r1, #0
 8000e9a:	bf08      	it	eq
 8000e9c:	2800      	cmpeq	r0, #0
 8000e9e:	bf1c      	itt	ne
 8000ea0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ea4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f000 b98c 	b.w	80011c4 <__aeabi_idiv0>
 8000eac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000eb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eb4:	f000 f824 	bl	8000f00 <__udivmoddi4>
 8000eb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_d2ulz>:
 8000ec4:	b5d0      	push	{r4, r6, r7, lr}
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <__aeabi_d2ulz+0x34>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4606      	mov	r6, r0
 8000ecc:	460f      	mov	r7, r1
 8000ece:	f7ff fb8b 	bl	80005e8 <__aeabi_dmul>
 8000ed2:	f7ff fe61 	bl	8000b98 <__aeabi_d2uiz>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	f7ff fb0c 	bl	80004f4 <__aeabi_ui2d>
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <__aeabi_d2ulz+0x38>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f7ff fb82 	bl	80005e8 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4630      	mov	r0, r6
 8000eea:	4639      	mov	r1, r7
 8000eec:	f7ff f9c4 	bl	8000278 <__aeabi_dsub>
 8000ef0:	f7ff fe52 	bl	8000b98 <__aeabi_d2uiz>
 8000ef4:	4621      	mov	r1, r4
 8000ef6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ef8:	3df00000 	.word	0x3df00000
 8000efc:	41f00000 	.word	0x41f00000

08000f00 <__udivmoddi4>:
 8000f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f04:	9d08      	ldr	r5, [sp, #32]
 8000f06:	4604      	mov	r4, r0
 8000f08:	468c      	mov	ip, r1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 8083 	bne.w	8001016 <__udivmoddi4+0x116>
 8000f10:	428a      	cmp	r2, r1
 8000f12:	4617      	mov	r7, r2
 8000f14:	d947      	bls.n	8000fa6 <__udivmoddi4+0xa6>
 8000f16:	fab2 f282 	clz	r2, r2
 8000f1a:	b142      	cbz	r2, 8000f2e <__udivmoddi4+0x2e>
 8000f1c:	f1c2 0020 	rsb	r0, r2, #32
 8000f20:	fa24 f000 	lsr.w	r0, r4, r0
 8000f24:	4091      	lsls	r1, r2
 8000f26:	4097      	lsls	r7, r2
 8000f28:	ea40 0c01 	orr.w	ip, r0, r1
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f32:	0c23      	lsrs	r3, r4, #16
 8000f34:	fbbc f6f8 	udiv	r6, ip, r8
 8000f38:	fa1f fe87 	uxth.w	lr, r7
 8000f3c:	fb08 c116 	mls	r1, r8, r6, ip
 8000f40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f44:	fb06 f10e 	mul.w	r1, r6, lr
 8000f48:	4299      	cmp	r1, r3
 8000f4a:	d909      	bls.n	8000f60 <__udivmoddi4+0x60>
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000f52:	f080 8119 	bcs.w	8001188 <__udivmoddi4+0x288>
 8000f56:	4299      	cmp	r1, r3
 8000f58:	f240 8116 	bls.w	8001188 <__udivmoddi4+0x288>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	443b      	add	r3, r7
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f68:	fb08 3310 	mls	r3, r8, r0, r3
 8000f6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f74:	45a6      	cmp	lr, r4
 8000f76:	d909      	bls.n	8000f8c <__udivmoddi4+0x8c>
 8000f78:	193c      	adds	r4, r7, r4
 8000f7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f7e:	f080 8105 	bcs.w	800118c <__udivmoddi4+0x28c>
 8000f82:	45a6      	cmp	lr, r4
 8000f84:	f240 8102 	bls.w	800118c <__udivmoddi4+0x28c>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	443c      	add	r4, r7
 8000f8c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f90:	eba4 040e 	sub.w	r4, r4, lr
 8000f94:	2600      	movs	r6, #0
 8000f96:	b11d      	cbz	r5, 8000fa0 <__udivmoddi4+0xa0>
 8000f98:	40d4      	lsrs	r4, r2
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	b902      	cbnz	r2, 8000faa <__udivmoddi4+0xaa>
 8000fa8:	deff      	udf	#255	; 0xff
 8000faa:	fab2 f282 	clz	r2, r2
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	d150      	bne.n	8001054 <__udivmoddi4+0x154>
 8000fb2:	1bcb      	subs	r3, r1, r7
 8000fb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb8:	fa1f f887 	uxth.w	r8, r7
 8000fbc:	2601      	movs	r6, #1
 8000fbe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000fc2:	0c21      	lsrs	r1, r4, #16
 8000fc4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000fc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fcc:	fb08 f30c 	mul.w	r3, r8, ip
 8000fd0:	428b      	cmp	r3, r1
 8000fd2:	d907      	bls.n	8000fe4 <__udivmoddi4+0xe4>
 8000fd4:	1879      	adds	r1, r7, r1
 8000fd6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000fda:	d202      	bcs.n	8000fe2 <__udivmoddi4+0xe2>
 8000fdc:	428b      	cmp	r3, r1
 8000fde:	f200 80e9 	bhi.w	80011b4 <__udivmoddi4+0x2b4>
 8000fe2:	4684      	mov	ip, r0
 8000fe4:	1ac9      	subs	r1, r1, r3
 8000fe6:	b2a3      	uxth	r3, r4
 8000fe8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fec:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ff0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ff4:	fb08 f800 	mul.w	r8, r8, r0
 8000ff8:	45a0      	cmp	r8, r4
 8000ffa:	d907      	bls.n	800100c <__udivmoddi4+0x10c>
 8000ffc:	193c      	adds	r4, r7, r4
 8000ffe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001002:	d202      	bcs.n	800100a <__udivmoddi4+0x10a>
 8001004:	45a0      	cmp	r8, r4
 8001006:	f200 80d9 	bhi.w	80011bc <__udivmoddi4+0x2bc>
 800100a:	4618      	mov	r0, r3
 800100c:	eba4 0408 	sub.w	r4, r4, r8
 8001010:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001014:	e7bf      	b.n	8000f96 <__udivmoddi4+0x96>
 8001016:	428b      	cmp	r3, r1
 8001018:	d909      	bls.n	800102e <__udivmoddi4+0x12e>
 800101a:	2d00      	cmp	r5, #0
 800101c:	f000 80b1 	beq.w	8001182 <__udivmoddi4+0x282>
 8001020:	2600      	movs	r6, #0
 8001022:	e9c5 0100 	strd	r0, r1, [r5]
 8001026:	4630      	mov	r0, r6
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	fab3 f683 	clz	r6, r3
 8001032:	2e00      	cmp	r6, #0
 8001034:	d14a      	bne.n	80010cc <__udivmoddi4+0x1cc>
 8001036:	428b      	cmp	r3, r1
 8001038:	d302      	bcc.n	8001040 <__udivmoddi4+0x140>
 800103a:	4282      	cmp	r2, r0
 800103c:	f200 80b8 	bhi.w	80011b0 <__udivmoddi4+0x2b0>
 8001040:	1a84      	subs	r4, r0, r2
 8001042:	eb61 0103 	sbc.w	r1, r1, r3
 8001046:	2001      	movs	r0, #1
 8001048:	468c      	mov	ip, r1
 800104a:	2d00      	cmp	r5, #0
 800104c:	d0a8      	beq.n	8000fa0 <__udivmoddi4+0xa0>
 800104e:	e9c5 4c00 	strd	r4, ip, [r5]
 8001052:	e7a5      	b.n	8000fa0 <__udivmoddi4+0xa0>
 8001054:	f1c2 0320 	rsb	r3, r2, #32
 8001058:	fa20 f603 	lsr.w	r6, r0, r3
 800105c:	4097      	lsls	r7, r2
 800105e:	fa01 f002 	lsl.w	r0, r1, r2
 8001062:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001066:	40d9      	lsrs	r1, r3
 8001068:	4330      	orrs	r0, r6
 800106a:	0c03      	lsrs	r3, r0, #16
 800106c:	fbb1 f6fe 	udiv	r6, r1, lr
 8001070:	fa1f f887 	uxth.w	r8, r7
 8001074:	fb0e 1116 	mls	r1, lr, r6, r1
 8001078:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800107c:	fb06 f108 	mul.w	r1, r6, r8
 8001080:	4299      	cmp	r1, r3
 8001082:	fa04 f402 	lsl.w	r4, r4, r2
 8001086:	d909      	bls.n	800109c <__udivmoddi4+0x19c>
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800108e:	f080 808d 	bcs.w	80011ac <__udivmoddi4+0x2ac>
 8001092:	4299      	cmp	r1, r3
 8001094:	f240 808a 	bls.w	80011ac <__udivmoddi4+0x2ac>
 8001098:	3e02      	subs	r6, #2
 800109a:	443b      	add	r3, r7
 800109c:	1a5b      	subs	r3, r3, r1
 800109e:	b281      	uxth	r1, r0
 80010a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80010a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80010a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010ac:	fb00 f308 	mul.w	r3, r0, r8
 80010b0:	428b      	cmp	r3, r1
 80010b2:	d907      	bls.n	80010c4 <__udivmoddi4+0x1c4>
 80010b4:	1879      	adds	r1, r7, r1
 80010b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80010ba:	d273      	bcs.n	80011a4 <__udivmoddi4+0x2a4>
 80010bc:	428b      	cmp	r3, r1
 80010be:	d971      	bls.n	80011a4 <__udivmoddi4+0x2a4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	4439      	add	r1, r7
 80010c4:	1acb      	subs	r3, r1, r3
 80010c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80010ca:	e778      	b.n	8000fbe <__udivmoddi4+0xbe>
 80010cc:	f1c6 0c20 	rsb	ip, r6, #32
 80010d0:	fa03 f406 	lsl.w	r4, r3, r6
 80010d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80010d8:	431c      	orrs	r4, r3
 80010da:	fa20 f70c 	lsr.w	r7, r0, ip
 80010de:	fa01 f306 	lsl.w	r3, r1, r6
 80010e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80010e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80010ea:	431f      	orrs	r7, r3
 80010ec:	0c3b      	lsrs	r3, r7, #16
 80010ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80010f2:	fa1f f884 	uxth.w	r8, r4
 80010f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80010fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80010fe:	fb09 fa08 	mul.w	sl, r9, r8
 8001102:	458a      	cmp	sl, r1
 8001104:	fa02 f206 	lsl.w	r2, r2, r6
 8001108:	fa00 f306 	lsl.w	r3, r0, r6
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x220>
 800110e:	1861      	adds	r1, r4, r1
 8001110:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001114:	d248      	bcs.n	80011a8 <__udivmoddi4+0x2a8>
 8001116:	458a      	cmp	sl, r1
 8001118:	d946      	bls.n	80011a8 <__udivmoddi4+0x2a8>
 800111a:	f1a9 0902 	sub.w	r9, r9, #2
 800111e:	4421      	add	r1, r4
 8001120:	eba1 010a 	sub.w	r1, r1, sl
 8001124:	b2bf      	uxth	r7, r7
 8001126:	fbb1 f0fe 	udiv	r0, r1, lr
 800112a:	fb0e 1110 	mls	r1, lr, r0, r1
 800112e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001132:	fb00 f808 	mul.w	r8, r0, r8
 8001136:	45b8      	cmp	r8, r7
 8001138:	d907      	bls.n	800114a <__udivmoddi4+0x24a>
 800113a:	19e7      	adds	r7, r4, r7
 800113c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001140:	d22e      	bcs.n	80011a0 <__udivmoddi4+0x2a0>
 8001142:	45b8      	cmp	r8, r7
 8001144:	d92c      	bls.n	80011a0 <__udivmoddi4+0x2a0>
 8001146:	3802      	subs	r0, #2
 8001148:	4427      	add	r7, r4
 800114a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800114e:	eba7 0708 	sub.w	r7, r7, r8
 8001152:	fba0 8902 	umull	r8, r9, r0, r2
 8001156:	454f      	cmp	r7, r9
 8001158:	46c6      	mov	lr, r8
 800115a:	4649      	mov	r1, r9
 800115c:	d31a      	bcc.n	8001194 <__udivmoddi4+0x294>
 800115e:	d017      	beq.n	8001190 <__udivmoddi4+0x290>
 8001160:	b15d      	cbz	r5, 800117a <__udivmoddi4+0x27a>
 8001162:	ebb3 020e 	subs.w	r2, r3, lr
 8001166:	eb67 0701 	sbc.w	r7, r7, r1
 800116a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800116e:	40f2      	lsrs	r2, r6
 8001170:	ea4c 0202 	orr.w	r2, ip, r2
 8001174:	40f7      	lsrs	r7, r6
 8001176:	e9c5 2700 	strd	r2, r7, [r5]
 800117a:	2600      	movs	r6, #0
 800117c:	4631      	mov	r1, r6
 800117e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001182:	462e      	mov	r6, r5
 8001184:	4628      	mov	r0, r5
 8001186:	e70b      	b.n	8000fa0 <__udivmoddi4+0xa0>
 8001188:	4606      	mov	r6, r0
 800118a:	e6e9      	b.n	8000f60 <__udivmoddi4+0x60>
 800118c:	4618      	mov	r0, r3
 800118e:	e6fd      	b.n	8000f8c <__udivmoddi4+0x8c>
 8001190:	4543      	cmp	r3, r8
 8001192:	d2e5      	bcs.n	8001160 <__udivmoddi4+0x260>
 8001194:	ebb8 0e02 	subs.w	lr, r8, r2
 8001198:	eb69 0104 	sbc.w	r1, r9, r4
 800119c:	3801      	subs	r0, #1
 800119e:	e7df      	b.n	8001160 <__udivmoddi4+0x260>
 80011a0:	4608      	mov	r0, r1
 80011a2:	e7d2      	b.n	800114a <__udivmoddi4+0x24a>
 80011a4:	4660      	mov	r0, ip
 80011a6:	e78d      	b.n	80010c4 <__udivmoddi4+0x1c4>
 80011a8:	4681      	mov	r9, r0
 80011aa:	e7b9      	b.n	8001120 <__udivmoddi4+0x220>
 80011ac:	4666      	mov	r6, ip
 80011ae:	e775      	b.n	800109c <__udivmoddi4+0x19c>
 80011b0:	4630      	mov	r0, r6
 80011b2:	e74a      	b.n	800104a <__udivmoddi4+0x14a>
 80011b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80011b8:	4439      	add	r1, r7
 80011ba:	e713      	b.n	8000fe4 <__udivmoddi4+0xe4>
 80011bc:	3802      	subs	r0, #2
 80011be:	443c      	add	r4, r7
 80011c0:	e724      	b.n	800100c <__udivmoddi4+0x10c>
 80011c2:	bf00      	nop

080011c4 <__aeabi_idiv0>:
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <isalphachar>:
int isnumchar(uint8_t cell){
	if (cell < 0x3a && cell > 0x29) return 1;
	else return 0;
}

int isalphachar(uint8_t cell){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	if (cell < 0x5b && cell > 0x40) return 1;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b5a      	cmp	r3, #90	; 0x5a
 80011d6:	d804      	bhi.n	80011e2 <isalphachar+0x1a>
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b40      	cmp	r3, #64	; 0x40
 80011dc:	d901      	bls.n	80011e2 <isalphachar+0x1a>
 80011de:	2301      	movs	r3, #1
 80011e0:	e008      	b.n	80011f4 <isalphachar+0x2c>
	else if (cell < 0x7b && cell > 0x60) return 1;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	2b7a      	cmp	r3, #122	; 0x7a
 80011e6:	d804      	bhi.n	80011f2 <isalphachar+0x2a>
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b60      	cmp	r3, #96	; 0x60
 80011ec:	d901      	bls.n	80011f2 <isalphachar+0x2a>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <isalphachar+0x2c>
	else return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <uart_switch>:

void uart_switch(uint8_t * buff){
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af02      	add	r7, sp, #8
 8001206:	6078      	str	r0, [r7, #4]
	  char aRead1[4];
	  char aRead2[4];

	  if 		(isalphachar(buff[0])
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ffdb 	bl	80011c8 <isalphachar>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	f000 81f0 	beq.w	80015fa <uart_switch+0x3fa>
			  && isalphachar(buff[5])) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3305      	adds	r3, #5
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffd1 	bl	80011c8 <isalphachar>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 81e6 	beq.w	80015fa <uart_switch+0x3fa>


		  sprintf(aRead1,"%c%c%c%c", (uartData.aRxBuffer[1]),(uartData.aRxBuffer[2]),(uartData.aRxBuffer[3]),(uartData.aRxBuffer[4]));
 800122e:	4bce      	ldr	r3, [pc, #824]	; (8001568 <uart_switch+0x368>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	4619      	mov	r1, r3
 8001234:	4bcc      	ldr	r3, [pc, #816]	; (8001568 <uart_switch+0x368>)
 8001236:	789b      	ldrb	r3, [r3, #2]
 8001238:	461c      	mov	r4, r3
 800123a:	4bcb      	ldr	r3, [pc, #812]	; (8001568 <uart_switch+0x368>)
 800123c:	78db      	ldrb	r3, [r3, #3]
 800123e:	461a      	mov	r2, r3
 8001240:	4bc9      	ldr	r3, [pc, #804]	; (8001568 <uart_switch+0x368>)
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	f107 000c 	add.w	r0, r7, #12
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	4623      	mov	r3, r4
 800124e:	460a      	mov	r2, r1
 8001250:	49c6      	ldr	r1, [pc, #792]	; (800156c <uart_switch+0x36c>)
 8001252:	f00d fc2f 	bl	800eab4 <siprintf>
		  int n = atoi(aRead1);  //now n is 49 50 48 48
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4618      	mov	r0, r3
 800125c:	f00d fab0 	bl	800e7c0 <atoi>
 8001260:	6178      	str	r0, [r7, #20]

		  sprintf(aRead2,"%c%c%c%c", (uartData.aRxBuffer[6]),(uartData.aRxBuffer[7]),(uartData.aRxBuffer[8]),(uartData.aRxBuffer[9]));
 8001262:	4bc1      	ldr	r3, [pc, #772]	; (8001568 <uart_switch+0x368>)
 8001264:	799b      	ldrb	r3, [r3, #6]
 8001266:	4619      	mov	r1, r3
 8001268:	4bbf      	ldr	r3, [pc, #764]	; (8001568 <uart_switch+0x368>)
 800126a:	79db      	ldrb	r3, [r3, #7]
 800126c:	461c      	mov	r4, r3
 800126e:	4bbe      	ldr	r3, [pc, #760]	; (8001568 <uart_switch+0x368>)
 8001270:	7a1b      	ldrb	r3, [r3, #8]
 8001272:	461a      	mov	r2, r3
 8001274:	4bbc      	ldr	r3, [pc, #752]	; (8001568 <uart_switch+0x368>)
 8001276:	7a5b      	ldrb	r3, [r3, #9]
 8001278:	f107 0008 	add.w	r0, r7, #8
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	9200      	str	r2, [sp, #0]
 8001280:	4623      	mov	r3, r4
 8001282:	460a      	mov	r2, r1
 8001284:	49b9      	ldr	r1, [pc, #740]	; (800156c <uart_switch+0x36c>)
 8001286:	f00d fc15 	bl	800eab4 <siprintf>
		  int m = atoi(aRead2);  //now n is 49 50 48 48
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4618      	mov	r0, r3
 8001290:	f00d fa96 	bl	800e7c0 <atoi>
 8001294:	6138      	str	r0, [r7, #16]


		 switch(buff[0]){
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3b41      	subs	r3, #65	; 0x41
 800129c:	2b16      	cmp	r3, #22
 800129e:	f200 81a4 	bhi.w	80015ea <uart_switch+0x3ea>
 80012a2:	a201      	add	r2, pc, #4	; (adr r2, 80012a8 <uart_switch+0xa8>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	08001467 	.word	0x08001467
 80012ac:	080015eb 	.word	0x080015eb
 80012b0:	08001501 	.word	0x08001501
 80012b4:	08001421 	.word	0x08001421
 80012b8:	0800134b 	.word	0x0800134b
 80012bc:	080015eb 	.word	0x080015eb
 80012c0:	080014b1 	.word	0x080014b1
 80012c4:	080015eb 	.word	0x080015eb
 80012c8:	08001591 	.word	0x08001591
 80012cc:	080015eb 	.word	0x080015eb
 80012d0:	080015eb 	.word	0x080015eb
 80012d4:	080015d1 	.word	0x080015d1
 80012d8:	080015eb 	.word	0x080015eb
 80012dc:	080015eb 	.word	0x080015eb
 80012e0:	080015eb 	.word	0x080015eb
 80012e4:	08001529 	.word	0x08001529
 80012e8:	08001391 	.word	0x08001391
 80012ec:	080015eb 	.word	0x080015eb
 80012f0:	080013db 	.word	0x080013db
 80012f4:	080015eb 	.word	0x080015eb
 80012f8:	080015d9 	.word	0x080015d9
 80012fc:	080015eb 	.word	0x080015eb
 8001300:	08001305 	.word	0x08001305

			  case UART_FORWARD:
					//n = dist_get_motor_diststeps((double) n,0);
				  //icm20948_init(&hi2c1);
				speed_control_path_setup(speedData.mainspeed, 20, 100, (double) n, ((float)m) / 100,0,0,PATH_MODE_STR);
 8001304:	4b9a      	ldr	r3, [pc, #616]	; (8001570 <uart_switch+0x370>)
 8001306:	68dc      	ldr	r4, [r3, #12]
 8001308:	6978      	ldr	r0, [r7, #20]
 800130a:	f7ff f903 	bl	8000514 <__aeabi_i2d>
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001574 <uart_switch+0x374>
 800131c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001320:	2202      	movs	r2, #2
 8001322:	eddf 2a95 	vldr	s5, [pc, #596]	; 8001578 <uart_switch+0x378>
 8001326:	ed9f 2a94 	vldr	s4, [pc, #592]	; 8001578 <uart_switch+0x378>
 800132a:	eef0 0a47 	vmov.f32	s1, s14
 800132e:	ec41 0b11 	vmov	d1, r0, r1
 8001332:	2164      	movs	r1, #100	; 0x64
 8001334:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001338:	4620      	mov	r0, r4
 800133a:	f00c fa8a 	bl	800d852 <speed_control_path_setup>
				speed_control_path_start(speedData.mainspeed);
 800133e:	4b8c      	ldr	r3, [pc, #560]	; (8001570 <uart_switch+0x370>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	4618      	mov	r0, r3
 8001344:	f00c fabc 	bl	800d8c0 <speed_control_path_start>
				break;
 8001348:	e158      	b.n	80015fc <uart_switch+0x3fc>
			  case UART_FORWARD_RIGHT:
				//n = dist_get_motor_diststeps((double) n,0);
				  //icm20948_init(&hi2c1);
				speed_control_path_setup(speedData.mainspeed, 20, 100, (double) n, ((float)m) / 100,90,10,PATH_MODE_CURVE);
 800134a:	4b89      	ldr	r3, [pc, #548]	; (8001570 <uart_switch+0x370>)
 800134c:	68dc      	ldr	r4, [r3, #12]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff f8e0 	bl	8000514 <__aeabi_i2d>
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	eddf 6a85 	vldr	s13, [pc, #532]	; 8001574 <uart_switch+0x374>
 8001362:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001366:	2201      	movs	r2, #1
 8001368:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 800136c:	ed9f 2a83 	vldr	s4, [pc, #524]	; 800157c <uart_switch+0x37c>
 8001370:	eef0 0a47 	vmov.f32	s1, s14
 8001374:	ec41 0b11 	vmov	d1, r0, r1
 8001378:	2164      	movs	r1, #100	; 0x64
 800137a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 800137e:	4620      	mov	r0, r4
 8001380:	f00c fa67 	bl	800d852 <speed_control_path_setup>
				speed_control_path_start(speedData.mainspeed);
 8001384:	4b7a      	ldr	r3, [pc, #488]	; (8001570 <uart_switch+0x370>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4618      	mov	r0, r3
 800138a:	f00c fa99 	bl	800d8c0 <speed_control_path_start>
				break;
 800138e:	e135      	b.n	80015fc <uart_switch+0x3fc>

			  case UART_FORWARD_LEFT:
				//n = dist_get_motor_diststeps((double) n,0);
				  //icm20948_init(&hi2c1);
				speed_control_path_setup(speedData.mainspeed, 20, 100, (double) n, -((float)m) / 100,90,10,PATH_MODE_CURVE);
 8001390:	4b77      	ldr	r3, [pc, #476]	; (8001570 <uart_switch+0x370>)
 8001392:	68dc      	ldr	r4, [r3, #12]
 8001394:	6978      	ldr	r0, [r7, #20]
 8001396:	f7ff f8bd 	bl	8000514 <__aeabi_i2d>
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	eef1 7a67 	vneg.f32	s15, s15
 80013a8:	eddf 6a72 	vldr	s13, [pc, #456]	; 8001574 <uart_switch+0x374>
 80013ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013b0:	2201      	movs	r2, #1
 80013b2:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 80013b6:	ed9f 2a71 	vldr	s4, [pc, #452]	; 800157c <uart_switch+0x37c>
 80013ba:	eef0 0a47 	vmov.f32	s1, s14
 80013be:	ec41 0b11 	vmov	d1, r0, r1
 80013c2:	2164      	movs	r1, #100	; 0x64
 80013c4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80013c8:	4620      	mov	r0, r4
 80013ca:	f00c fa42 	bl	800d852 <speed_control_path_setup>
				speed_control_path_start(speedData.mainspeed);
 80013ce:	4b68      	ldr	r3, [pc, #416]	; (8001570 <uart_switch+0x370>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00c fa74 	bl	800d8c0 <speed_control_path_start>
				break;
 80013d8:	e110      	b.n	80015fc <uart_switch+0x3fc>

			  case UART_REVERSE:
				  //icm20948_init(&hi2c1);
				speed_control_path_setup(speedData.mainspeed, -20, 100, (double) n, ((float)m) / 100,0,0,PATH_MODE_STR);
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <uart_switch+0x370>)
 80013dc:	68dc      	ldr	r4, [r3, #12]
 80013de:	6978      	ldr	r0, [r7, #20]
 80013e0:	f7ff f898 	bl	8000514 <__aeabi_i2d>
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001574 <uart_switch+0x374>
 80013f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013f6:	2202      	movs	r2, #2
 80013f8:	eddf 2a5f 	vldr	s5, [pc, #380]	; 8001578 <uart_switch+0x378>
 80013fc:	ed9f 2a5e 	vldr	s4, [pc, #376]	; 8001578 <uart_switch+0x378>
 8001400:	eef0 0a47 	vmov.f32	s1, s14
 8001404:	ec41 0b11 	vmov	d1, r0, r1
 8001408:	2164      	movs	r1, #100	; 0x64
 800140a:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 800140e:	4620      	mov	r0, r4
 8001410:	f00c fa1f 	bl	800d852 <speed_control_path_setup>
				speed_control_path_start(speedData.mainspeed);
 8001414:	4b56      	ldr	r3, [pc, #344]	; (8001570 <uart_switch+0x370>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f00c fa51 	bl	800d8c0 <speed_control_path_start>
				break;
 800141e:	e0ed      	b.n	80015fc <uart_switch+0x3fc>

			  case UART_REVERSE_RIGHT:
				 // icm20948_init(&hi2c1);
				//n = dist_get_motor_diststeps((double) n,0);
				speed_control_path_setup(speedData.mainspeed, -20, 100, (double) n, ((float)m) / 100,90,10,PATH_MODE_CURVE);
 8001420:	4b53      	ldr	r3, [pc, #332]	; (8001570 <uart_switch+0x370>)
 8001422:	68dc      	ldr	r4, [r3, #12]
 8001424:	6978      	ldr	r0, [r7, #20]
 8001426:	f7ff f875 	bl	8000514 <__aeabi_i2d>
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001434:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001574 <uart_switch+0x374>
 8001438:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800143c:	2201      	movs	r2, #1
 800143e:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 8001442:	ed9f 2a4e 	vldr	s4, [pc, #312]	; 800157c <uart_switch+0x37c>
 8001446:	eef0 0a47 	vmov.f32	s1, s14
 800144a:	ec41 0b11 	vmov	d1, r0, r1
 800144e:	2164      	movs	r1, #100	; 0x64
 8001450:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 8001454:	4620      	mov	r0, r4
 8001456:	f00c f9fc 	bl	800d852 <speed_control_path_setup>
				speed_control_path_start(speedData.mainspeed);
 800145a:	4b45      	ldr	r3, [pc, #276]	; (8001570 <uart_switch+0x370>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4618      	mov	r0, r3
 8001460:	f00c fa2e 	bl	800d8c0 <speed_control_path_start>
				break;
 8001464:	e0ca      	b.n	80015fc <uart_switch+0x3fc>

			  case UART_REVERSE_LEFT:
				 // icm20948_init(&hi2c1);
				//n = dist_get_motor_diststeps((double) n,0);
				speed_control_path_setup(speedData.mainspeed, -20, 100, (double) n, -((float)m) / 100,90,10,PATH_MODE_CURVE);
 8001466:	4b42      	ldr	r3, [pc, #264]	; (8001570 <uart_switch+0x370>)
 8001468:	68dc      	ldr	r4, [r3, #12]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff f852 	bl	8000514 <__aeabi_i2d>
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	eef1 7a67 	vneg.f32	s15, s15
 800147e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001574 <uart_switch+0x374>
 8001482:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001486:	2201      	movs	r2, #1
 8001488:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 800148c:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 800157c <uart_switch+0x37c>
 8001490:	eef0 0a47 	vmov.f32	s1, s14
 8001494:	ec41 0b11 	vmov	d1, r0, r1
 8001498:	2164      	movs	r1, #100	; 0x64
 800149a:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 800149e:	4620      	mov	r0, r4
 80014a0:	f00c f9d7 	bl	800d852 <speed_control_path_setup>
				speed_control_path_start(speedData.mainspeed);
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <uart_switch+0x370>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00c fa09 	bl	800d8c0 <speed_control_path_start>
				break;
 80014ae:	e0a5      	b.n	80015fc <uart_switch+0x3fc>



			  case UART_GYRO_BIAS:
			    angle_subcontrol_set_leftanglemul(speedData.servoangle, (float) n / (float) 100 );
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <uart_switch+0x370>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	ee07 2a90 	vmov	s15, r2
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001574 <uart_switch+0x374>
 80014c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014c6:	eeb0 0a47 	vmov.f32	s0, s14
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00b fe5a 	bl	800d184 <angle_subcontrol_set_leftanglemul>
			    angle_subcontrol_set_rightanglemul(speedData.servoangle, (float) m / (float) 100);
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <uart_switch+0x370>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	ee07 2a90 	vmov	s15, r2
 80014da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014de:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001574 <uart_switch+0x374>
 80014e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014e6:	eeb0 0a47 	vmov.f32	s0, s14
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00b fe59 	bl	800d1a2 <angle_subcontrol_set_rightanglemul>
				HAL_UART_Transmit(&huart3, (uint8_t *) "0000000000", 10, 0xFFFF);
 80014f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f4:	220a      	movs	r2, #10
 80014f6:	4922      	ldr	r1, [pc, #136]	; (8001580 <uart_switch+0x380>)
 80014f8:	4822      	ldr	r0, [pc, #136]	; (8001584 <uart_switch+0x384>)
 80014fa:	f006 fd54 	bl	8007fa6 <HAL_UART_Transmit>
				break;
 80014fe:	e07d      	b.n	80015fc <uart_switch+0x3fc>

			  case UART_AUTOCORRECT_TOGGLE:

				speed_control_toggle_correction(speedData.mainspeed,(float) n);
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <uart_switch+0x370>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	ee07 2a90 	vmov	s15, r2
 800150a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	4618      	mov	r0, r3
 8001514:	f00c f970 	bl	800d7f8 <speed_control_toggle_correction>
				HAL_UART_Transmit(&huart3, (uint8_t *) "0000000000", 10, 0xFFFF);
 8001518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151c:	220a      	movs	r2, #10
 800151e:	4918      	ldr	r1, [pc, #96]	; (8001580 <uart_switch+0x380>)
 8001520:	4818      	ldr	r0, [pc, #96]	; (8001584 <uart_switch+0x384>)
 8001522:	f006 fd40 	bl	8007fa6 <HAL_UART_Transmit>
				break;
 8001526:	e069      	b.n	80015fc <uart_switch+0x3fc>
			  case UART_PROPORTION:

				diffData.pid_kp_l = (float) n / (float) 100;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001532:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001574 <uart_switch+0x374>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <uart_switch+0x388>)
 800153c:	edc3 7a00 	vstr	s15, [r3]
				diffData.pid_kp_r = (float) m / (float) 100;
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001574 <uart_switch+0x374>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <uart_switch+0x388>)
 8001554:	edc3 7a02 	vstr	s15, [r3, #8]
				HAL_UART_Transmit(&huart3, (uint8_t *) "0000000000", 10, 0xFFFF);
 8001558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155c:	220a      	movs	r2, #10
 800155e:	4908      	ldr	r1, [pc, #32]	; (8001580 <uart_switch+0x380>)
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <uart_switch+0x384>)
 8001562:	f006 fd20 	bl	8007fa6 <HAL_UART_Transmit>
				break;
 8001566:	e049      	b.n	80015fc <uart_switch+0x3fc>
 8001568:	20004a8c 	.word	0x20004a8c
 800156c:	08010f14 	.word	0x08010f14
 8001570:	20004ccc 	.word	0x20004ccc
 8001574:	42c80000 	.word	0x42c80000
 8001578:	00000000 	.word	0x00000000
 800157c:	42b40000 	.word	0x42b40000
 8001580:	08010f20 	.word	0x08010f20
 8001584:	20004b38 	.word	0x20004b38
 8001588:	20004cac 	.word	0x20004cac
 800158c:	461c4000 	.word	0x461c4000

			  case UART_INTEGRAL:

				diffData.pid_ki_l = (float) n / (float) 10000;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159a:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 800158c <uart_switch+0x38c>
 800159e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <uart_switch+0x404>)
 80015a4:	edc3 7a01 	vstr	s15, [r3, #4]
				diffData.pid_ki_r = (float) m / (float) 10000;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b2:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001608 <uart_switch+0x408>
 80015b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <uart_switch+0x404>)
 80015bc:	edc3 7a03 	vstr	s15, [r3, #12]
				HAL_UART_Transmit(&huart3, (uint8_t *) "0000000000", 10, 0xFFFF);
 80015c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c4:	220a      	movs	r2, #10
 80015c6:	4911      	ldr	r1, [pc, #68]	; (800160c <uart_switch+0x40c>)
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <uart_switch+0x410>)
 80015ca:	f006 fcec 	bl	8007fa6 <HAL_UART_Transmit>

				break;
 80015ce:	e015      	b.n	80015fc <uart_switch+0x3fc>

			  case UART_START_TASK2:
				  task2data.stage = 0;
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <uart_switch+0x414>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]

				  break;
 80015d6:	e011      	b.n	80015fc <uart_switch+0x3fc>
			  case UART_POLL:
				  task2data.ultrasensordist	= m;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <uart_switch+0x414>)
 80015e4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				  break;
 80015e8:	e008      	b.n	80015fc <uart_switch+0x3fc>

			  default:
				HAL_UART_Transmit(&huart3, (uint8_t *) "FFFFFFFFFF", 10, 0xFFFF);
 80015ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ee:	220a      	movs	r2, #10
 80015f0:	4909      	ldr	r1, [pc, #36]	; (8001618 <uart_switch+0x418>)
 80015f2:	4807      	ldr	r0, [pc, #28]	; (8001610 <uart_switch+0x410>)
 80015f4:	f006 fcd7 	bl	8007fa6 <HAL_UART_Transmit>
			}

	  }


}
 80015f8:	e000      	b.n	80015fc <uart_switch+0x3fc>
	  }
 80015fa:	bf00      	nop
}
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	20004cac 	.word	0x20004cac
 8001608:	461c4000 	.word	0x461c4000
 800160c:	08010f20 	.word	0x08010f20
 8001610:	20004b38 	.word	0x20004b38
 8001614:	20004c20 	.word	0x20004c20
 8001618:	08010f2c 	.word	0x08010f2c

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001620:	f002 fd36 	bl	8004090 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001624:	f000 f866 	bl	80016f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001628:	f000 fbd6 	bl	8001dd8 <MX_GPIO_Init>
  MX_TIM8_Init();
 800162c:	f000 fafe 	bl	8001c2c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001630:	f000 fba8 	bl	8001d84 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001634:	f000 fa52 	bl	8001adc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001638:	f000 f98c 	bl	8001954 <MX_TIM1_Init>
  MX_TIM4_Init();
 800163c:	f000 faa2 	bl	8001b84 <MX_TIM4_Init>
  MX_I2C1_Init();
 8001640:	f000 f95a 	bl	80018f8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001644:	f000 f8b4 	bl	80017b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001648:	f000 f904 	bl	8001854 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3,  (uint8_t *) uartData.aRxBuffer, 10);
 800164c:	220a      	movs	r2, #10
 800164e:	4918      	ldr	r1, [pc, #96]	; (80016b0 <main+0x94>)
 8001650:	4818      	ldr	r0, [pc, #96]	; (80016b4 <main+0x98>)
 8001652:	f006 fd3a 	bl	80080ca <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001656:	f007 fc65 	bl	8008f24 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <main+0x9c>)
 800165c:	2100      	movs	r1, #0
 800165e:	4817      	ldr	r0, [pc, #92]	; (80016bc <main+0xa0>)
 8001660:	f007 fcaa 	bl	8008fb8 <osThreadNew>
 8001664:	4603      	mov	r3, r0
 8001666:	4a16      	ldr	r2, [pc, #88]	; (80016c0 <main+0xa4>)
 8001668:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(StartUartTask, NULL, &UART_Task_attributes);
 800166a:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <main+0xa8>)
 800166c:	2100      	movs	r1, #0
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <main+0xac>)
 8001670:	f007 fca2 	bl	8008fb8 <osThreadNew>
 8001674:	4603      	mov	r3, r0
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <main+0xb0>)
 8001678:	6013      	str	r3, [r2, #0]

  /* creation of ShowTask */
  ShowTaskHandle = osThreadNew(StartShowTask, NULL, &ShowTask_attributes);
 800167a:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <main+0xb4>)
 800167c:	2100      	movs	r1, #0
 800167e:	4815      	ldr	r0, [pc, #84]	; (80016d4 <main+0xb8>)
 8001680:	f007 fc9a 	bl	8008fb8 <osThreadNew>
 8001684:	4603      	mov	r3, r0
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <main+0xbc>)
 8001688:	6013      	str	r3, [r2, #0]

  /* creation of PathBuilderTask */
  PathBuilderTaskHandle = osThreadNew(StartPathBuilderTask, NULL, &PathBuilderTask_attributes);
 800168a:	4a14      	ldr	r2, [pc, #80]	; (80016dc <main+0xc0>)
 800168c:	2100      	movs	r1, #0
 800168e:	4814      	ldr	r0, [pc, #80]	; (80016e0 <main+0xc4>)
 8001690:	f007 fc92 	bl	8008fb8 <osThreadNew>
 8001694:	4603      	mov	r3, r0
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <main+0xc8>)
 8001698:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(IR, NULL, &IRTask_attributes);
 800169a:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <main+0xcc>)
 800169c:	2100      	movs	r1, #0
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <main+0xd0>)
 80016a0:	f007 fc8a 	bl	8008fb8 <osThreadNew>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <main+0xd4>)
 80016a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016aa:	f007 fc5f 	bl	8008f6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <main+0x92>
 80016b0:	20004a8c 	.word	0x20004a8c
 80016b4:	20004b38 	.word	0x20004b38
 80016b8:	08010ff4 	.word	0x08010ff4
 80016bc:	0800208d 	.word	0x0800208d
 80016c0:	20004a88 	.word	0x20004a88
 80016c4:	08011018 	.word	0x08011018
 80016c8:	080020a1 	.word	0x080020a1
 80016cc:	20004cc8 	.word	0x20004cc8
 80016d0:	0801103c 	.word	0x0801103c
 80016d4:	080020b1 	.word	0x080020b1
 80016d8:	20004b34 	.word	0x20004b34
 80016dc:	08011060 	.word	0x08011060
 80016e0:	080025d1 	.word	0x080025d1
 80016e4:	20004aa0 	.word	0x20004aa0
 80016e8:	08011084 	.word	0x08011084
 80016ec:	08003831 	.word	0x08003831
 80016f0:	20004d28 	.word	0x20004d28

080016f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b094      	sub	sp, #80	; 0x50
 80016f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	f107 0320 	add.w	r3, r7, #32
 80016fe:	2230      	movs	r2, #48	; 0x30
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f00d f8aa 	bl	800e85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <SystemClock_Config+0xb4>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <SystemClock_Config+0xb4>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <SystemClock_Config+0xb4>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <SystemClock_Config+0xb8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <SystemClock_Config+0xb8>)
 800173e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <SystemClock_Config+0xb8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001754:	2301      	movs	r3, #1
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001758:	2310      	movs	r3, #16
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001760:	f107 0320 	add.w	r3, r7, #32
 8001764:	4618      	mov	r0, r3
 8001766:	f004 fb3b 	bl	8005de0 <HAL_RCC_OscConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001770:	f002 f8e2 	bl	8003938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001774:	230f      	movs	r3, #15
 8001776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fd9e 	bl	80062d0 <HAL_RCC_ClockConfig>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800179a:	f002 f8cd 	bl	8003938 <Error_Handler>
  }
}
 800179e:	bf00      	nop
 80017a0:	3750      	adds	r7, #80	; 0x50
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40007000 	.word	0x40007000

080017b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017b6:	463b      	mov	r3, r7
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_ADC1_Init+0x98>)
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <MX_ADC1_Init+0x9c>)
 80017c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_ADC1_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <MX_ADC1_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_ADC1_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <MX_ADC1_Init+0x98>)
 80017dc:	2200      	movs	r2, #0
 80017de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MX_ADC1_Init+0x98>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_ADC1_Init+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_ADC1_Init+0x98>)
 80017f0:	4a17      	ldr	r2, [pc, #92]	; (8001850 <MX_ADC1_Init+0xa0>)
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_ADC1_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_ADC1_Init+0x98>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_ADC1_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_ADC1_Init+0x98>)
 800180a:	2201      	movs	r2, #1
 800180c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800180e:	480e      	ldr	r0, [pc, #56]	; (8001848 <MX_ADC1_Init+0x98>)
 8001810:	f002 fca4 	bl	800415c <HAL_ADC_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800181a:	f002 f88d 	bl	8003938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800181e:	230b      	movs	r3, #11
 8001820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182a:	463b      	mov	r3, r7
 800182c:	4619      	mov	r1, r3
 800182e:	4806      	ldr	r0, [pc, #24]	; (8001848 <MX_ADC1_Init+0x98>)
 8001830:	f002 fdb8 	bl	80043a4 <HAL_ADC_ConfigChannel>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800183a:	f002 f87d 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20004c64 	.word	0x20004c64
 800184c:	40012000 	.word	0x40012000
 8001850:	0f000001 	.word	0x0f000001

08001854 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <MX_ADC2_Init+0x98>)
 8001868:	4a21      	ldr	r2, [pc, #132]	; (80018f0 <MX_ADC2_Init+0x9c>)
 800186a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_ADC2_Init+0x98>)
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <MX_ADC2_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_ADC2_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_ADC2_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <MX_ADC2_Init+0x98>)
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_ADC2_Init+0x98>)
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_ADC2_Init+0x98>)
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <MX_ADC2_Init+0xa0>)
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_ADC2_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_ADC2_Init+0x98>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_ADC2_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_ADC2_Init+0x98>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <MX_ADC2_Init+0x98>)
 80018b4:	f002 fc52 	bl	800415c <HAL_ADC_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80018be:	f002 f83b 	bl	8003938 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018c2:	230c      	movs	r3, #12
 80018c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018c6:	2301      	movs	r3, #1
 80018c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018ce:	463b      	mov	r3, r7
 80018d0:	4619      	mov	r1, r3
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <MX_ADC2_Init+0x98>)
 80018d4:	f002 fd66 	bl	80043a4 <HAL_ADC_ConfigChannel>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80018de:	f002 f82b 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20004b7c 	.word	0x20004b7c
 80018f0:	40012100 	.word	0x40012100
 80018f4:	0f000001 	.word	0x0f000001

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f003 fa95 	bl	8004e64 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f001 fffa 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20004bc4 	.word	0x20004bc4
 800194c:	40005400 	.word	0x40005400
 8001950:	000186a0 	.word	0x000186a0

08001954 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b09a      	sub	sp, #104	; 0x68
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]
 8001982:	615a      	str	r2, [r3, #20]
 8001984:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2220      	movs	r2, #32
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f00c ff5e 	bl	800e85c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019a0:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019a2:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <MX_TIM1_Init+0x184>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160-1;
 80019a6:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019a8:	229f      	movs	r2, #159	; 0x9f
 80019aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b49      	ldr	r3, [pc, #292]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80019b2:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019c0:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019cc:	4841      	ldr	r0, [pc, #260]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019ce:	f004 fe81 	bl	80066d4 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80019d8:	f001 ffae 	bl	8003938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019e6:	4619      	mov	r1, r3
 80019e8:	483a      	ldr	r0, [pc, #232]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019ea:	f005 fc49 	bl	8007280 <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80019f4:	f001 ffa0 	bl	8003938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f8:	4836      	ldr	r0, [pc, #216]	; (8001ad4 <MX_TIM1_Init+0x180>)
 80019fa:	f004 ff2b 	bl	8006854 <HAL_TIM_PWM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001a04:	f001 ff98 	bl	8003938 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a08:	4832      	ldr	r0, [pc, #200]	; (8001ad4 <MX_TIM1_Init+0x180>)
 8001a0a:	f005 f845 	bl	8006a98 <HAL_TIM_IC_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a14:	f001 ff90 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a20:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001a24:	4619      	mov	r1, r3
 8001a26:	482b      	ldr	r0, [pc, #172]	; (8001ad4 <MX_TIM1_Init+0x180>)
 8001a28:	f006 f98e 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001a32:	f001 ff81 	bl	8003938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a36:	2360      	movs	r3, #96	; 0x60
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a42:	2300      	movs	r3, #0
 8001a44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a56:	2200      	movs	r2, #0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <MX_TIM1_Init+0x180>)
 8001a5c:	f005 fb4e 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001a66:	f001 ff67 	bl	8003938 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigIC.ICFilter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	220c      	movs	r2, #12
 8001a80:	4619      	mov	r1, r3
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM1_Init+0x180>)
 8001a84:	f005 fa9d 	bl	8006fc2 <HAL_TIM_IC_ConfigChannel>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8001a8e:	f001 ff53 	bl	8003938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <MX_TIM1_Init+0x180>)
 8001ab6:	f006 f9c3 	bl	8007e40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001ac0:	f001 ff3a 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <MX_TIM1_Init+0x180>)
 8001ac6:	f002 f92d 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8001aca:	bf00      	nop
 8001acc:	3768      	adds	r7, #104	; 0x68
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20004ce0 	.word	0x20004ce0
 8001ad8:	40010000 	.word	0x40010000

08001adc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00c feb6 	bl	800e85c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001afa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b20:	2303      	movs	r3, #3
 8001b22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b30:	230a      	movs	r3, #10
 8001b32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b40:	230a      	movs	r3, #10
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b4c:	f004 fffd 	bl	8006b4a <HAL_TIM_Encoder_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b56:	f001 feef 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <MX_TIM2_Init+0xa4>)
 8001b68:	f006 f8ee 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b72:	f001 fee1 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3730      	adds	r7, #48	; 0x30
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20004d2c 	.word	0x20004d2c

08001b84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08c      	sub	sp, #48	; 0x30
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	2224      	movs	r2, #36	; 0x24
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f00c fe62 	bl	800e85c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ba0:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <MX_TIM4_Init+0xa4>)
 8001ba4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bde:	2301      	movs	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001bf2:	f004 ffaa 	bl	8006b4a <HAL_TIM_Encoder_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001bfc:	f001 fe9c 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_TIM4_Init+0xa0>)
 8001c0e:	f006 f89b 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c18:	f001 fe8e 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	3730      	adds	r7, #48	; 0x30
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20004aec 	.word	0x20004aec
 8001c28:	40000800 	.word	0x40000800

08001c2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b096      	sub	sp, #88	; 0x58
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	605a      	str	r2, [r3, #4]
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	2220      	movs	r2, #32
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00c fdf9 	bl	800e85c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c6a:	4b44      	ldr	r3, [pc, #272]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c6c:	4a44      	ldr	r2, [pc, #272]	; (8001d80 <MX_TIM8_Init+0x154>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16 -1 ;
 8001c70:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c72:	220f      	movs	r2, #15
 8001c74:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c82:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c8a:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c96:	4839      	ldr	r0, [pc, #228]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001c98:	f004 fd1c 	bl	80066d4 <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001ca2:	f001 fe49 	bl	8003938 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001caa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4832      	ldr	r0, [pc, #200]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001cb4:	f005 fae4 	bl	8007280 <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001cbe:	f001 fe3b 	bl	8003938 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cc2:	482e      	ldr	r0, [pc, #184]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001cc4:	f004 fdc6 	bl	8006854 <HAL_TIM_PWM_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001cce:	f001 fe33 	bl	8003938 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4826      	ldr	r0, [pc, #152]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001ce2:	f006 f831 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001cec:	f001 fe24 	bl	8003938 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf0:	2360      	movs	r3, #96	; 0x60
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d10:	2200      	movs	r2, #0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4819      	ldr	r0, [pc, #100]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001d16:	f005 f9f1 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d20:	f001 fe0a 	bl	8003938 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4813      	ldr	r0, [pc, #76]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001d2e:	f005 f9e5 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d38:	f001 fdfe 	bl	8003938 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4807      	ldr	r0, [pc, #28]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001d60:	f006 f86e 	bl	8007e40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001d6a:	f001 fde5 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d6e:	4803      	ldr	r0, [pc, #12]	; (8001d7c <MX_TIM8_Init+0x150>)
 8001d70:	f001 ffd8 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8001d74:	bf00      	nop
 8001d76:	3758      	adds	r7, #88	; 0x58
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20004aa4 	.word	0x20004aa4
 8001d80:	40010400 	.word	0x40010400

08001d84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <MX_USART3_UART_Init+0x50>)
 8001d8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_USART3_UART_Init+0x4c>)
 8001dbc:	f006 f8a6 	bl	8007f0c <HAL_UART_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001dc6:	f001 fdb7 	bl	8003938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20004b38 	.word	0x20004b38
 8001dd4:	40004800 	.word	0x40004800

08001dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	613b      	str	r3, [r7, #16]
 8001e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a40      	ldr	r2, [pc, #256]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a39      	ldr	r2, [pc, #228]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e4c:	f043 0308 	orr.w	r3, r3, #8
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	603b      	str	r3, [r7, #0]
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <MX_GPIO_Init+0x158>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 51af 	mov.w	r1, #5600	; 0x15e0
 8001e80:	482c      	ldr	r0, [pc, #176]	; (8001f34 <MX_GPIO_Init+0x15c>)
 8001e82:	f002 ffd5 	bl	8004e30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001e8c:	482a      	ldr	r0, [pc, #168]	; (8001f38 <MX_GPIO_Init+0x160>)
 8001e8e:	f002 ffcf 	bl	8004e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2120      	movs	r1, #32
 8001e96:	4829      	ldr	r0, [pc, #164]	; (8001f3c <MX_GPIO_Init+0x164>)
 8001e98:	f002 ffca 	bl	8004e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           PE10 PE12 */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001e9c:	f44f 53af 	mov.w	r3, #5600	; 0x15e0
 8001ea0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481f      	ldr	r0, [pc, #124]	; (8001f34 <MX_GPIO_Init+0x15c>)
 8001eb6:	f002 fe07 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8;
 8001eba:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4819      	ldr	r0, [pc, #100]	; (8001f38 <MX_GPIO_Init+0x160>)
 8001ed4:	f002 fdf8 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4813      	ldr	r0, [pc, #76]	; (8001f3c <MX_GPIO_Init+0x164>)
 8001ef0:	f002 fdea 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	480d      	ldr	r0, [pc, #52]	; (8001f40 <MX_GPIO_Init+0x168>)
 8001f0a:	f002 fddd 	bl	8004ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_GPIO_Init+0x15c>)
 8001f22:	f002 fdd1 	bl	8004ac8 <HAL_GPIO_Init>

}
 8001f26:	bf00      	nop
 8001f28:	3728      	adds	r7, #40	; 0x28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	00000000 	.word	0x00000000

08001f48 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE BEGIN 4 */

uint16_t Value1, Value2, Time, State, Distance = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim1)											   // Input Capture Mode
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
		if (State == 0)
 8001f50:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d11b      	bne.n	8001f90 <HAL_TIM_IC_CaptureCallback+0x48>
		{
			Value1 = HAL_TIM_ReadCapturedValue(htim1, TIM_CHANNEL_4); 								   // Save First Value at Value1 ( RISING EDGE )
 8001f58:	210c      	movs	r1, #12
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f005 fa58 	bl	8007410 <HAL_TIM_ReadCapturedValue>
 8001f60:	4603      	mov	r3, r0
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001f66:	801a      	strh	r2, [r3, #0]
			State = 1;
 8001f68:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	801a      	strh	r2, [r3, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);	   // Change Capture Polarity to FALLING EDGE
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f8c:	621a      	str	r2, [r3, #32]
			Distance = Time * 0.034 / 2;
			State = 0;

			__HAL_TIM_SET_CAPTUREPOLARITY(htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);	   // Change Capture Polarity to RISING EDGE
		}
}
 8001f8e:	e057      	b.n	8002040 <HAL_TIM_IC_CaptureCallback+0xf8>
		else if (State == 1)
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x108>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d153      	bne.n	8002040 <HAL_TIM_IC_CaptureCallback+0xf8>
			Value2 = HAL_TIM_ReadCapturedValue(htim1, TIM_CHANNEL_4);  								   // Save Second Value at Value2 ( FALLING EDGE )
 8001f98:	210c      	movs	r1, #12
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f005 fa38 	bl	8007410 <HAL_TIM_ReadCapturedValue>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001fa6:	801a      	strh	r2, [r3, #0]
			if (Value2 > Value1)
 8001fa8:	4b2b      	ldr	r3, [pc, #172]	; (8002058 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001faa:	881a      	ldrh	r2, [r3, #0]
 8001fac:	4b29      	ldr	r3, [pc, #164]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d908      	bls.n	8001fc6 <HAL_TIM_IC_CaptureCallback+0x7e>
				Time = Value2-Value1;
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001fc2:	801a      	strh	r2, [r3, #0]
 8001fc4:	e00d      	b.n	8001fe2 <HAL_TIM_IC_CaptureCallback+0x9a>
			else if (Value1 > Value2)
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001fc8:	881a      	ldrh	r2, [r3, #0]
 8001fca:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d907      	bls.n	8001fe2 <HAL_TIM_IC_CaptureCallback+0x9a>
				Time = (65536 - Value1) + Value2;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001fd4:	881a      	ldrh	r2, [r3, #0]
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8001fd8:	881b      	ldrh	r3, [r3, #0]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001fe0:	801a      	strh	r2, [r3, #0]
			Distance = Time * 0.034 / 2;
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_TIM_IC_CaptureCallback+0x114>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa94 	bl	8000514 <__aeabi_i2d>
 8001fec:	a316      	add	r3, pc, #88	; (adr r3, 8002048 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	f7fe faf9 	bl	80005e8 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002006:	f7fe fc19 	bl	800083c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fdc1 	bl	8000b98 <__aeabi_d2uiz>
 8002016:	4603      	mov	r3, r0
 8002018:	b29a      	uxth	r2, r3
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_TIM_IC_CaptureCallback+0x118>)
 800201c:	801a      	strh	r2, [r3, #0]
			State = 0;
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x108>)
 8002020:	2200      	movs	r2, #0
 8002022:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim1, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);	   // Change Capture Polarity to RISING EDGE
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a12      	ldr	r2, [r2, #32]
 800203e:	621a      	str	r2, [r3, #32]
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	b020c49c 	.word	0xb020c49c
 800204c:	3fa16872 	.word	0x3fa16872
 8002050:	20004cc4 	.word	0x20004cc4
 8002054:	20004c58 	.word	0x20004c58
 8002058:	20004cdc 	.word	0x20004cdc
 800205c:	20004d74 	.word	0x20004d74
 8002060:	20000094 	.word	0x20000094

08002064 <HAL_UART_RxCpltCallback>:
}

int distance = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
//	sprintf(test, "%s\0", uartData.aRxBuffer);
//	OLED_ShowString(10,10,test,20);
	//OLED_Refresh_Gram();

	UNUSED(huart);
	uart_switch(uartData.aRxBuffer);
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_UART_RxCpltCallback+0x20>)
 800206e:	f7ff f8c7 	bl	8001200 <uart_switch>
	HAL_UART_Receive_IT(&huart3, (uint8_t *) uartData.aRxBuffer,10);
 8002072:	220a      	movs	r2, #10
 8002074:	4903      	ldr	r1, [pc, #12]	; (8002084 <HAL_UART_RxCpltCallback+0x20>)
 8002076:	4804      	ldr	r0, [pc, #16]	; (8002088 <HAL_UART_RxCpltCallback+0x24>)
 8002078:	f006 f827 	bl	80080ca <HAL_UART_Receive_IT>
 }
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20004a8c 	.word	0x20004a8c
 8002088:	20004b38 	.word	0x20004b38

0800208c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  {
//	  if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)){
//
//	  }
	  //speed_control_run(speedData.mainspeed);
	  osDelay(6000000);
 8002094:	4801      	ldr	r0, [pc, #4]	; (800209c <StartDefaultTask+0x10>)
 8002096:	f007 f821 	bl	80090dc <osDelay>
 800209a:	e7fb      	b.n	8002094 <StartDefaultTask+0x8>
 800209c:	005b8d80 	.word	0x005b8d80

080020a0 <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  for(;;){
	  //HAL_UART_Transmit(&huart3, (uint8_t*) "I2566x2566", 10, 0xFFFF);
	  //HAL_UART_Receive (&huart3, receive, 4, 0xFFFF);  // receive 4 bytes of data

	  osDelay(100);
 80020a8:	2064      	movs	r0, #100	; 0x64
 80020aa:	f007 f817 	bl	80090dc <osDelay>
 80020ae:	e7fb      	b.n	80020a8 <StartUartTask+0x8>

080020b0 <StartShowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartShowTask */
void StartShowTask(void *argument)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b09e      	sub	sp, #120	; 0x78
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartShowTask */
  /* Infinite loop */
	 OLED_Init();
 80020b8:	f00a fea6 	bl	800ce08 <OLED_Init>
	 int arr[20];
	 OLED_Clear();
 80020bc:	f00a fd74 	bl	800cba8 <OLED_Clear>

	 GPIO_PinState prevstate;
	 GPIO_PinState currstate = GPIO_PIN_RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	 int screenstate = 3;
 80020c6:	2303      	movs	r3, #3
 80020c8:	673b      	str	r3, [r7, #112]	; 0x70
	 int totalstate = 3;
 80020ca:	2303      	movs	r3, #3
 80020cc:	66fb      	str	r3, [r7, #108]	; 0x6c


  for(;;)
  {

	prevstate = currstate;
 80020ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80020d2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	currstate = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	48ce      	ldr	r0, [pc, #824]	; (8002414 <StartShowTask+0x364>)
 80020dc:	f002 fe90 	bl	8004e00 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	if (prevstate == GPIO_PIN_RESET  && currstate == GPIO_PIN_SET){
 80020e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d112      	bne.n	8002114 <StartShowTask+0x64>
 80020ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d10e      	bne.n	8002114 <StartShowTask+0x64>
		 if (screenstate < totalstate - 1) screenstate++;
 80020f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f8:	3b01      	subs	r3, #1
 80020fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020fc:	429a      	cmp	r2, r3
 80020fe:	da03      	bge.n	8002108 <StartShowTask+0x58>
 8002100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002102:	3301      	adds	r3, #1
 8002104:	673b      	str	r3, [r7, #112]	; 0x70
 8002106:	e001      	b.n	800210c <StartShowTask+0x5c>
		 else screenstate = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	673b      	str	r3, [r7, #112]	; 0x70
		 OLED_Clear();
 800210c:	f00a fd4c 	bl	800cba8 <OLED_Clear>
		 OLED_Refresh_Gram();
 8002110:	f00a fcc8 	bl	800caa4 <OLED_Refresh_Gram>
	 }
	//int distance = 100;
	prevstate = currstate;
 8002114:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002118:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	 float tickprogl = speed_control_get_tickprogress_L(speedData.mainspeed)*100;
 800211c:	4bbe      	ldr	r3, [pc, #760]	; (8002418 <StartShowTask+0x368>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f00b fcac 	bl	800da7e <speed_control_get_tickprogress_L>
 8002126:	eef0 7a40 	vmov.f32	s15, s0
 800212a:	ed9f 7abc 	vldr	s14, [pc, #752]	; 800241c <StartShowTask+0x36c>
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	 float tickprogr = speed_control_get_tickprogress_R(speedData.mainspeed)*100;
 8002136:	4bb8      	ldr	r3, [pc, #736]	; (8002418 <StartShowTask+0x368>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4618      	mov	r0, r3
 800213c:	f00b fccd 	bl	800dada <speed_control_get_tickprogress_R>
 8002140:	eef0 7a40 	vmov.f32	s15, s0
 8002144:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800241c <StartShowTask+0x36c>
 8002148:	ee67 7a87 	vmul.f32	s15, s15, s14
 800214c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	 float pulseprogl = speed_control_get_pulseprogress_L(speedData.mainspeed)*100;
 8002150:	4bb1      	ldr	r3, [pc, #708]	; (8002418 <StartShowTask+0x368>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4618      	mov	r0, r3
 8002156:	f00b fcee 	bl	800db36 <speed_control_get_pulseprogress_L>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
 800215e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800241c <StartShowTask+0x36c>
 8002162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002166:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	 float pulseprogr = speed_control_get_pulseprogress_R(speedData.mainspeed)*100;
 800216a:	4bab      	ldr	r3, [pc, #684]	; (8002418 <StartShowTask+0x368>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4618      	mov	r0, r3
 8002170:	f00b fd0f 	bl	800db92 <speed_control_get_pulseprogress_R>
 8002174:	eef0 7a40 	vmov.f32	s15, s0
 8002178:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 800241c <StartShowTask+0x36c>
 800217c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002180:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	 switch(screenstate){
 8002184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002186:	2b02      	cmp	r3, #2
 8002188:	f000 8158 	beq.w	800243c <StartShowTask+0x38c>
 800218c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800218e:	2b02      	cmp	r3, #2
 8002190:	f300 8204 	bgt.w	800259c <StartShowTask+0x4ec>
 8002194:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <StartShowTask+0xf4>
 800219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219c:	2b01      	cmp	r3, #1
 800219e:	f000 809d 	beq.w	80022dc <StartShowTask+0x22c>
 80021a2:	e1fb      	b.n	800259c <StartShowTask+0x4ec>

		 case 0:
			 sprintf(arr, "Tick Based");
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	499d      	ldr	r1, [pc, #628]	; (8002420 <StartShowTask+0x370>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	f00c fc82 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,0,arr,20);
 80021b0:	f107 0208 	add.w	r2, r7, #8
 80021b4:	2314      	movs	r3, #20
 80021b6:	2100      	movs	r1, #0
 80021b8:	200a      	movs	r0, #10
 80021ba:	f00a fde7 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Lprogp :%6d", (int)round(tickprogl));
 80021be:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80021c0:	f7fe f9ba 	bl	8000538 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	ec43 2b10 	vmov	d0, r2, r3
 80021cc:	f00d f864 	bl	800f298 <round>
 80021d0:	ec53 2b10 	vmov	r2, r3, d0
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe fcb6 	bl	8000b48 <__aeabi_d2iz>
 80021dc:	4602      	mov	r2, r0
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4990      	ldr	r1, [pc, #576]	; (8002424 <StartShowTask+0x374>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00c fc65 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,10,arr,20);
 80021ea:	f107 0208 	add.w	r2, r7, #8
 80021ee:	2314      	movs	r3, #20
 80021f0:	210a      	movs	r1, #10
 80021f2:	200a      	movs	r0, #10
 80021f4:	f00a fdca 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Rprogp :%6d", (int)round(tickprogr));
 80021f8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021fa:	f7fe f99d 	bl	8000538 <__aeabi_f2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	ec43 2b10 	vmov	d0, r2, r3
 8002206:	f00d f847 	bl	800f298 <round>
 800220a:	ec53 2b10 	vmov	r2, r3, d0
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7fe fc99 	bl	8000b48 <__aeabi_d2iz>
 8002216:	4602      	mov	r2, r0
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	4982      	ldr	r1, [pc, #520]	; (8002428 <StartShowTask+0x378>)
 800221e:	4618      	mov	r0, r3
 8002220:	f00c fc48 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,20,arr,20);
 8002224:	f107 0208 	add.w	r2, r7, #8
 8002228:	2314      	movs	r3, #20
 800222a:	2114      	movs	r1, #20
 800222c:	200a      	movs	r0, #10
 800222e:	f00a fdad 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "reqdis :%6d", (int)round(speedData.mainspeed->neededTotalTick));
 8002232:	4b79      	ldr	r3, [pc, #484]	; (8002418 <StartShowTask+0x368>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800223a:	4610      	mov	r0, r2
 800223c:	4619      	mov	r1, r3
 800223e:	f7fe f99d 	bl	800057c <__aeabi_ul2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f7fe fc7d 	bl	8000b48 <__aeabi_d2iz>
 800224e:	4602      	mov	r2, r0
 8002250:	f107 0308 	add.w	r3, r7, #8
 8002254:	4975      	ldr	r1, [pc, #468]	; (800242c <StartShowTask+0x37c>)
 8002256:	4618      	mov	r0, r3
 8002258:	f00c fc2c 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,30,arr,20);
 800225c:	f107 0208 	add.w	r2, r7, #8
 8002260:	2314      	movs	r3, #20
 8002262:	211e      	movs	r1, #30
 8002264:	200a      	movs	r0, #10
 8002266:	f00a fd91 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Lprgdis:%6d",(int)round(speedData.mainspeed->LmotorProgressTick));
 800226a:	4b6b      	ldr	r3, [pc, #428]	; (8002418 <StartShowTask+0x368>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f7fe f981 	bl	800057c <__aeabi_ul2d>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f7fe fc61 	bl	8000b48 <__aeabi_d2iz>
 8002286:	4602      	mov	r2, r0
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	4968      	ldr	r1, [pc, #416]	; (8002430 <StartShowTask+0x380>)
 800228e:	4618      	mov	r0, r3
 8002290:	f00c fc10 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,40,arr,20);
 8002294:	f107 0208 	add.w	r2, r7, #8
 8002298:	2314      	movs	r3, #20
 800229a:	2128      	movs	r1, #40	; 0x28
 800229c:	200a      	movs	r0, #10
 800229e:	f00a fd75 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Rprodis:%6d", (int)round(speedData.mainspeed->RmotorProgressTick));
 80022a2:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <StartShowTask+0x368>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe f965 	bl	800057c <__aeabi_ul2d>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc45 	bl	8000b48 <__aeabi_d2iz>
 80022be:	4602      	mov	r2, r0
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	495b      	ldr	r1, [pc, #364]	; (8002434 <StartShowTask+0x384>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00c fbf4 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,50,arr,20);
 80022cc:	f107 0208 	add.w	r2, r7, #8
 80022d0:	2314      	movs	r3, #20
 80022d2:	2132      	movs	r1, #50	; 0x32
 80022d4:	200a      	movs	r0, #10
 80022d6:	f00a fd59 	bl	800cd8c <OLED_ShowString>
		 break;
 80022da:	e15f      	b.n	800259c <StartShowTask+0x4ec>
		 case 1:

			 sprintf(arr, "Pulse Based");
 80022dc:	f107 0308 	add.w	r3, r7, #8
 80022e0:	4955      	ldr	r1, [pc, #340]	; (8002438 <StartShowTask+0x388>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00c fbe6 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,0,arr,20);
 80022e8:	f107 0208 	add.w	r2, r7, #8
 80022ec:	2314      	movs	r3, #20
 80022ee:	2100      	movs	r1, #0
 80022f0:	200a      	movs	r0, #10
 80022f2:	f00a fd4b 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Lprogp :%6d", (int)round(pulseprogl));
 80022f6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80022f8:	f7fe f91e 	bl	8000538 <__aeabi_f2d>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	ec43 2b10 	vmov	d0, r2, r3
 8002304:	f00c ffc8 	bl	800f298 <round>
 8002308:	ec53 2b10 	vmov	r2, r3, d0
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	f7fe fc1a 	bl	8000b48 <__aeabi_d2iz>
 8002314:	4602      	mov	r2, r0
 8002316:	f107 0308 	add.w	r3, r7, #8
 800231a:	4942      	ldr	r1, [pc, #264]	; (8002424 <StartShowTask+0x374>)
 800231c:	4618      	mov	r0, r3
 800231e:	f00c fbc9 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,10,arr,20);
 8002322:	f107 0208 	add.w	r2, r7, #8
 8002326:	2314      	movs	r3, #20
 8002328:	210a      	movs	r1, #10
 800232a:	200a      	movs	r0, #10
 800232c:	f00a fd2e 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Rprogp :%6d", (int)round(pulseprogr));
 8002330:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002332:	f7fe f901 	bl	8000538 <__aeabi_f2d>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	ec43 2b10 	vmov	d0, r2, r3
 800233e:	f00c ffab 	bl	800f298 <round>
 8002342:	ec53 2b10 	vmov	r2, r3, d0
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fbfd 	bl	8000b48 <__aeabi_d2iz>
 800234e:	4602      	mov	r2, r0
 8002350:	f107 0308 	add.w	r3, r7, #8
 8002354:	4934      	ldr	r1, [pc, #208]	; (8002428 <StartShowTask+0x378>)
 8002356:	4618      	mov	r0, r3
 8002358:	f00c fbac 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,20,arr,20);
 800235c:	f107 0208 	add.w	r2, r7, #8
 8002360:	2314      	movs	r3, #20
 8002362:	2114      	movs	r1, #20
 8002364:	200a      	movs	r0, #10
 8002366:	f00a fd11 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "reqdis :%6d", (int)round(speedData.mainspeed->neededTotalPulse));
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <StartShowTask+0x368>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	f7fe f901 	bl	800057c <__aeabi_ul2d>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7fe fbe1 	bl	8000b48 <__aeabi_d2iz>
 8002386:	4602      	mov	r2, r0
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	4927      	ldr	r1, [pc, #156]	; (800242c <StartShowTask+0x37c>)
 800238e:	4618      	mov	r0, r3
 8002390:	f00c fb90 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,30,arr,20);
 8002394:	f107 0208 	add.w	r2, r7, #8
 8002398:	2314      	movs	r3, #20
 800239a:	211e      	movs	r1, #30
 800239c:	200a      	movs	r0, #10
 800239e:	f00a fcf5 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Lprgdis:%6d",(int)round(speedData.mainspeed->LmotorProgressPulse));
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <StartShowTask+0x368>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe f8e5 	bl	800057c <__aeabi_ul2d>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe fbc5 	bl	8000b48 <__aeabi_d2iz>
 80023be:	4602      	mov	r2, r0
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	491a      	ldr	r1, [pc, #104]	; (8002430 <StartShowTask+0x380>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00c fb74 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,40,arr,20);
 80023cc:	f107 0208 	add.w	r2, r7, #8
 80023d0:	2314      	movs	r3, #20
 80023d2:	2128      	movs	r1, #40	; 0x28
 80023d4:	200a      	movs	r0, #10
 80023d6:	f00a fcd9 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Rprodis:%6d", (int)round(speedData.mainspeed->RmotorProgressPulse));
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <StartShowTask+0x368>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe f8c9 	bl	800057c <__aeabi_ul2d>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fba9 	bl	8000b48 <__aeabi_d2iz>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f107 0308 	add.w	r3, r7, #8
 80023fc:	490d      	ldr	r1, [pc, #52]	; (8002434 <StartShowTask+0x384>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f00c fb58 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,50,arr,20);
 8002404:	f107 0208 	add.w	r2, r7, #8
 8002408:	2314      	movs	r3, #20
 800240a:	2132      	movs	r1, #50	; 0x32
 800240c:	200a      	movs	r0, #10
 800240e:	f00a fcbd 	bl	800cd8c <OLED_ShowString>
		 break;
 8002412:	e0c3      	b.n	800259c <StartShowTask+0x4ec>
 8002414:	40020c00 	.word	0x40020c00
 8002418:	20004ccc 	.word	0x20004ccc
 800241c:	42c80000 	.word	0x42c80000
 8002420:	08010f38 	.word	0x08010f38
 8002424:	08010f44 	.word	0x08010f44
 8002428:	08010f50 	.word	0x08010f50
 800242c:	08010f5c 	.word	0x08010f5c
 8002430:	08010f68 	.word	0x08010f68
 8002434:	08010f74 	.word	0x08010f74
 8002438:	08010f80 	.word	0x08010f80
		 case 2:
			 sprintf(arr, "Speed & Error");
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	495a      	ldr	r1, [pc, #360]	; (80025ac <StartShowTask+0x4fc>)
 8002442:	4618      	mov	r0, r3
 8002444:	f00c fb36 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,0,arr,20);
 8002448:	f107 0208 	add.w	r2, r7, #8
 800244c:	2314      	movs	r3, #20
 800244e:	2100      	movs	r1, #0
 8002450:	200a      	movs	r0, #10
 8002452:	f00a fc9b 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "LMotor :%6d", (int)round(speedData.motorLspeed->speed));
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <StartShowTask+0x500>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f86b 	bl	8000538 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	ec43 2b10 	vmov	d0, r2, r3
 800246a:	f00c ff15 	bl	800f298 <round>
 800246e:	ec53 2b10 	vmov	r2, r3, d0
 8002472:	4610      	mov	r0, r2
 8002474:	4619      	mov	r1, r3
 8002476:	f7fe fb67 	bl	8000b48 <__aeabi_d2iz>
 800247a:	4602      	mov	r2, r0
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	494c      	ldr	r1, [pc, #304]	; (80025b4 <StartShowTask+0x504>)
 8002482:	4618      	mov	r0, r3
 8002484:	f00c fb16 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,10,arr,20);
 8002488:	f107 0208 	add.w	r2, r7, #8
 800248c:	2314      	movs	r3, #20
 800248e:	210a      	movs	r1, #10
 8002490:	200a      	movs	r0, #10
 8002492:	f00a fc7b 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Rmotor :%6d", (int)round(speedData.motorRspeed->speed));
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <StartShowTask+0x500>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f84b 	bl	8000538 <__aeabi_f2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	ec43 2b10 	vmov	d0, r2, r3
 80024aa:	f00c fef5 	bl	800f298 <round>
 80024ae:	ec53 2b10 	vmov	r2, r3, d0
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	f7fe fb47 	bl	8000b48 <__aeabi_d2iz>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f107 0308 	add.w	r3, r7, #8
 80024c0:	493d      	ldr	r1, [pc, #244]	; (80025b8 <StartShowTask+0x508>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00c faf6 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,20,arr,20);
 80024c8:	f107 0208 	add.w	r2, r7, #8
 80024cc:	2314      	movs	r3, #20
 80024ce:	2114      	movs	r1, #20
 80024d0:	200a      	movs	r0, #10
 80024d2:	f00a fc5b 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "WA     :%6d", (int)round(speedData.mainspeed->requestedAngle));
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <StartShowTask+0x500>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f82b 	bl	8000538 <__aeabi_f2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	ec43 2b10 	vmov	d0, r2, r3
 80024ea:	f00c fed5 	bl	800f298 <round>
 80024ee:	ec53 2b10 	vmov	r2, r3, d0
 80024f2:	4610      	mov	r0, r2
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7fe fb27 	bl	8000b48 <__aeabi_d2iz>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	492e      	ldr	r1, [pc, #184]	; (80025bc <StartShowTask+0x50c>)
 8002502:	4618      	mov	r0, r3
 8002504:	f00c fad6 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,30,arr,20);
 8002508:	f107 0208 	add.w	r2, r7, #8
 800250c:	2314      	movs	r3, #20
 800250e:	211e      	movs	r1, #30
 8002510:	200a      	movs	r0, #10
 8002512:	f00a fc3b 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Lerr   :%6d", (int)round(pidData.motorLpid->curr->Error));
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <StartShowTask+0x510>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f80a 	bl	8000538 <__aeabi_f2d>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	ec43 2b10 	vmov	d0, r2, r3
 800252c:	f00c feb4 	bl	800f298 <round>
 8002530:	ec53 2b10 	vmov	r2, r3, d0
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	f7fe fb06 	bl	8000b48 <__aeabi_d2iz>
 800253c:	4602      	mov	r2, r0
 800253e:	f107 0308 	add.w	r3, r7, #8
 8002542:	4920      	ldr	r1, [pc, #128]	; (80025c4 <StartShowTask+0x514>)
 8002544:	4618      	mov	r0, r3
 8002546:	f00c fab5 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,40,arr,20);
 800254a:	f107 0208 	add.w	r2, r7, #8
 800254e:	2314      	movs	r3, #20
 8002550:	2128      	movs	r1, #40	; 0x28
 8002552:	200a      	movs	r0, #10
 8002554:	f00a fc1a 	bl	800cd8c <OLED_ShowString>
			 sprintf(arr, "Rerr   :%6d",(int)round(pidData.motorRpid->curr->Error));
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <StartShowTask+0x510>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ffe9 	bl	8000538 <__aeabi_f2d>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	ec43 2b10 	vmov	d0, r2, r3
 800256e:	f00c fe93 	bl	800f298 <round>
 8002572:	ec53 2b10 	vmov	r2, r3, d0
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fae5 	bl	8000b48 <__aeabi_d2iz>
 800257e:	4602      	mov	r2, r0
 8002580:	f107 0308 	add.w	r3, r7, #8
 8002584:	4910      	ldr	r1, [pc, #64]	; (80025c8 <StartShowTask+0x518>)
 8002586:	4618      	mov	r0, r3
 8002588:	f00c fa94 	bl	800eab4 <siprintf>
			 OLED_ShowString(10,50,arr,20);
 800258c:	f107 0208 	add.w	r2, r7, #8
 8002590:	2314      	movs	r3, #20
 8002592:	2132      	movs	r1, #50	; 0x32
 8002594:	200a      	movs	r0, #10
 8002596:	f00a fbf9 	bl	800cd8c <OLED_ShowString>
       break;
 800259a:	bf00      	nop

   }
	 OLED_Refresh_Gram();
 800259c:	f00a fa82 	bl	800caa4 <OLED_Refresh_Gram>
	 osDelay(500); //every half a second
 80025a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025a4:	f006 fd9a 	bl	80090dc <osDelay>
  {
 80025a8:	e591      	b.n	80020ce <StartShowTask+0x1e>
 80025aa:	bf00      	nop
 80025ac:	08010f8c 	.word	0x08010f8c
 80025b0:	20004ccc 	.word	0x20004ccc
 80025b4:	08010f9c 	.word	0x08010f9c
 80025b8:	08010fa8 	.word	0x08010fa8
 80025bc:	08010fb4 	.word	0x08010fb4
 80025c0:	20004d7c 	.word	0x20004d7c
 80025c4:	08010fc0 	.word	0x08010fc0
 80025c8:	08010fcc 	.word	0x08010fcc
 80025cc:	00000000 	.word	0x00000000

080025d0 <StartPathBuilderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPathBuilderTask */
void StartPathBuilderTask(void *argument)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b096      	sub	sp, #88	; 0x58
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPathBuilderTask */


	// VehicleServo Control
	vehicleservoData.vehicleservo = vehicleservo_init(&htim1, TIM_CHANNEL_1);
 80025d8:	2100      	movs	r1, #0
 80025da:	487d      	ldr	r0, [pc, #500]	; (80027d0 <StartPathBuilderTask+0x200>)
 80025dc:	f00c f867 	bl	800e6ae <vehicleservo_init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a7c      	ldr	r2, [pc, #496]	; (80027d4 <StartPathBuilderTask+0x204>)
 80025e4:	6013      	str	r3, [r2, #0]

	//Motor Control
	motor_control_pin pin2, pin3, pin4, pin5;

	pin2.GPIOx = GPIOA; pin2.GPIO_Pin = GPIO_PIN_2;
 80025e6:	4b7c      	ldr	r3, [pc, #496]	; (80027d8 <StartPathBuilderTask+0x208>)
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	2304      	movs	r3, #4
 80025ec:	84bb      	strh	r3, [r7, #36]	; 0x24
	pin3.GPIOx = GPIOA; pin3.GPIO_Pin = GPIO_PIN_3;
 80025ee:	4b7a      	ldr	r3, [pc, #488]	; (80027d8 <StartPathBuilderTask+0x208>)
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	2308      	movs	r3, #8
 80025f4:	83bb      	strh	r3, [r7, #28]
	pin4.GPIOx = GPIOC; pin4.GPIO_Pin = GPIO_PIN_5;
 80025f6:	4b79      	ldr	r3, [pc, #484]	; (80027dc <StartPathBuilderTask+0x20c>)
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	2320      	movs	r3, #32
 80025fc:	82bb      	strh	r3, [r7, #20]
	pin5.GPIOx = GPIOE; pin5.GPIO_Pin = GPIO_PIN_12;
 80025fe:	4b78      	ldr	r3, [pc, #480]	; (80027e0 <StartPathBuilderTask+0x210>)
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	81bb      	strh	r3, [r7, #12]

	motorData.motorL = motor_init(&htim8, TIM_CHANNEL_1, pin3, pin2);
 8002608:	466a      	mov	r2, sp
 800260a:	f107 0320 	add.w	r3, r7, #32
 800260e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002612:	e882 0003 	stmia.w	r2, {r0, r1}
 8002616:	f107 0318 	add.w	r3, r7, #24
 800261a:	cb0c      	ldmia	r3, {r2, r3}
 800261c:	2100      	movs	r1, #0
 800261e:	4871      	ldr	r0, [pc, #452]	; (80027e4 <StartPathBuilderTask+0x214>)
 8002620:	f00a f929 	bl	800c876 <motor_init>
 8002624:	4603      	mov	r3, r0
 8002626:	4a70      	ldr	r2, [pc, #448]	; (80027e8 <StartPathBuilderTask+0x218>)
 8002628:	6013      	str	r3, [r2, #0]
	motorData.motorR = motor_init(&htim8, TIM_CHANNEL_3, pin5, pin4);
 800262a:	466a      	mov	r2, sp
 800262c:	f107 0310 	add.w	r3, r7, #16
 8002630:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002634:	e882 0003 	stmia.w	r2, {r0, r1}
 8002638:	f107 0308 	add.w	r3, r7, #8
 800263c:	cb0c      	ldmia	r3, {r2, r3}
 800263e:	2108      	movs	r1, #8
 8002640:	4868      	ldr	r0, [pc, #416]	; (80027e4 <StartPathBuilderTask+0x214>)
 8002642:	f00a f918 	bl	800c876 <motor_init>
 8002646:	4603      	mov	r3, r0
 8002648:	4a67      	ldr	r2, [pc, #412]	; (80027e8 <StartPathBuilderTask+0x218>)
 800264a:	6053      	str	r3, [r2, #4]

	//Encoder Control
	encoderData.motorLencoder = encoder_init(&htim2);
 800264c:	4867      	ldr	r0, [pc, #412]	; (80027ec <StartPathBuilderTask+0x21c>)
 800264e:	f009 fb0d 	bl	800bc6c <encoder_init>
 8002652:	4603      	mov	r3, r0
 8002654:	4a66      	ldr	r2, [pc, #408]	; (80027f0 <StartPathBuilderTask+0x220>)
 8002656:	6013      	str	r3, [r2, #0]
	encoderData.motorRencoder = encoder_init(&htim4);
 8002658:	4866      	ldr	r0, [pc, #408]	; (80027f4 <StartPathBuilderTask+0x224>)
 800265a:	f009 fb07 	bl	800bc6c <encoder_init>
 800265e:	4603      	mov	r3, r0
 8002660:	4a63      	ldr	r2, [pc, #396]	; (80027f0 <StartPathBuilderTask+0x220>)
 8002662:	6053      	str	r3, [r2, #4]

	//PID_Control
	//set default
	diffData.pid_ki_l = 0.01;
 8002664:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <StartPathBuilderTask+0x228>)
 8002666:	4a65      	ldr	r2, [pc, #404]	; (80027fc <StartPathBuilderTask+0x22c>)
 8002668:	605a      	str	r2, [r3, #4]
	diffData.pid_kp_l = 12;
 800266a:	4b63      	ldr	r3, [pc, #396]	; (80027f8 <StartPathBuilderTask+0x228>)
 800266c:	4a64      	ldr	r2, [pc, #400]	; (8002800 <StartPathBuilderTask+0x230>)
 800266e:	601a      	str	r2, [r3, #0]
	diffData.pid_ki_r = 0.01;
 8002670:	4b61      	ldr	r3, [pc, #388]	; (80027f8 <StartPathBuilderTask+0x228>)
 8002672:	4a62      	ldr	r2, [pc, #392]	; (80027fc <StartPathBuilderTask+0x22c>)
 8002674:	60da      	str	r2, [r3, #12]
	diffData.pid_kp_r = 11;
 8002676:	4b60      	ldr	r3, [pc, #384]	; (80027f8 <StartPathBuilderTask+0x228>)
 8002678:	4a62      	ldr	r2, [pc, #392]	; (8002804 <StartPathBuilderTask+0x234>)
 800267a:	609a      	str	r2, [r3, #8]
	diffData.pid_ki_a = 0.0005;
 800267c:	4b5e      	ldr	r3, [pc, #376]	; (80027f8 <StartPathBuilderTask+0x228>)
 800267e:	4a62      	ldr	r2, [pc, #392]	; (8002808 <StartPathBuilderTask+0x238>)
 8002680:	615a      	str	r2, [r3, #20]
	diffData.pid_kp_a = 8;
 8002682:	4b5d      	ldr	r3, [pc, #372]	; (80027f8 <StartPathBuilderTask+0x228>)
 8002684:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8002688:	611a      	str	r2, [r3, #16]

	pidData.motorLpid = pid_init(&(diffData.pid_kp_l),&(diffData.pid_ki_l)); //hyper parameter
 800268a:	4960      	ldr	r1, [pc, #384]	; (800280c <StartPathBuilderTask+0x23c>)
 800268c:	485a      	ldr	r0, [pc, #360]	; (80027f8 <StartPathBuilderTask+0x228>)
 800268e:	f00a fc47 	bl	800cf20 <pid_init>
 8002692:	4603      	mov	r3, r0
 8002694:	4a5e      	ldr	r2, [pc, #376]	; (8002810 <StartPathBuilderTask+0x240>)
 8002696:	6013      	str	r3, [r2, #0]
	pidData.motorRpid = pid_init(&(diffData.pid_kp_r),&(diffData.pid_ki_r)); // hyper parameter
 8002698:	495e      	ldr	r1, [pc, #376]	; (8002814 <StartPathBuilderTask+0x244>)
 800269a:	485f      	ldr	r0, [pc, #380]	; (8002818 <StartPathBuilderTask+0x248>)
 800269c:	f00a fc40 	bl	800cf20 <pid_init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a5b      	ldr	r2, [pc, #364]	; (8002810 <StartPathBuilderTask+0x240>)
 80026a4:	6053      	str	r3, [r2, #4]
	pidData.anglepid = pid_init(&(diffData.pid_kp_a),&(diffData.pid_ki_a)); //hyper parameter
 80026a6:	495d      	ldr	r1, [pc, #372]	; (800281c <StartPathBuilderTask+0x24c>)
 80026a8:	485d      	ldr	r0, [pc, #372]	; (8002820 <StartPathBuilderTask+0x250>)
 80026aa:	f00a fc39 	bl	800cf20 <pid_init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4a57      	ldr	r2, [pc, #348]	; (8002810 <StartPathBuilderTask+0x240>)
 80026b2:	6093      	str	r3, [r2, #8]

	//Speed_Control
	speedData.motorLspeed = speed_subcontrol_init(pidData.motorLpid,motorData.motorL,encoderData.motorLencoder);
 80026b4:	4b56      	ldr	r3, [pc, #344]	; (8002810 <StartPathBuilderTask+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a4b      	ldr	r2, [pc, #300]	; (80027e8 <StartPathBuilderTask+0x218>)
 80026ba:	6811      	ldr	r1, [r2, #0]
 80026bc:	4a4c      	ldr	r2, [pc, #304]	; (80027f0 <StartPathBuilderTask+0x220>)
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f00a ff45 	bl	800d550 <speed_subcontrol_init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4a56      	ldr	r2, [pc, #344]	; (8002824 <StartPathBuilderTask+0x254>)
 80026ca:	6013      	str	r3, [r2, #0]
	speedData.motorRspeed = speed_subcontrol_init(pidData.motorRpid,motorData.motorR,encoderData.motorRencoder);
 80026cc:	4b50      	ldr	r3, [pc, #320]	; (8002810 <StartPathBuilderTask+0x240>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4a45      	ldr	r2, [pc, #276]	; (80027e8 <StartPathBuilderTask+0x218>)
 80026d2:	6851      	ldr	r1, [r2, #4]
 80026d4:	4a46      	ldr	r2, [pc, #280]	; (80027f0 <StartPathBuilderTask+0x220>)
 80026d6:	6852      	ldr	r2, [r2, #4]
 80026d8:	4618      	mov	r0, r3
 80026da:	f00a ff39 	bl	800d550 <speed_subcontrol_init>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a50      	ldr	r2, [pc, #320]	; (8002824 <StartPathBuilderTask+0x254>)
 80026e2:	6053      	str	r3, [r2, #4]


	//gyro control
	icm20948_init(&hi2c1);
 80026e4:	4850      	ldr	r0, [pc, #320]	; (8002828 <StartPathBuilderTask+0x258>)
 80026e6:	f009 fc7b 	bl	800bfe0 <icm20948_init>
	speedData.servoangle = angle_subcontrol_init(pidData.anglepid,vehicleservoData.vehicleservo,&hi2c1);
 80026ea:	4b49      	ldr	r3, [pc, #292]	; (8002810 <StartPathBuilderTask+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	4a39      	ldr	r2, [pc, #228]	; (80027d4 <StartPathBuilderTask+0x204>)
 80026f0:	6811      	ldr	r1, [r2, #0]
 80026f2:	4a4d      	ldr	r2, [pc, #308]	; (8002828 <StartPathBuilderTask+0x258>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f00a fd04 	bl	800d102 <angle_subcontrol_init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a49      	ldr	r2, [pc, #292]	; (8002824 <StartPathBuilderTask+0x254>)
 80026fe:	6093      	str	r3, [r2, #8]

	//Main Speed_Control
	speedData.mainspeed = speed_control_init(speedData.motorLspeed,speedData.motorRspeed,speedData.servoangle,&huart3);
 8002700:	4b48      	ldr	r3, [pc, #288]	; (8002824 <StartPathBuilderTask+0x254>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	4b47      	ldr	r3, [pc, #284]	; (8002824 <StartPathBuilderTask+0x254>)
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <StartPathBuilderTask+0x254>)
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	4b47      	ldr	r3, [pc, #284]	; (800282c <StartPathBuilderTask+0x25c>)
 800270e:	f00a ffcd 	bl	800d6ac <speed_control_init>
 8002712:	4603      	mov	r3, r0
 8002714:	4a43      	ldr	r2, [pc, #268]	; (8002824 <StartPathBuilderTask+0x254>)
 8002716:	60d3      	str	r3, [r2, #12]

	speed_control_set_callbackdistptr(speedData.mainspeed, &(task2data.distance));
 8002718:	4b42      	ldr	r3, [pc, #264]	; (8002824 <StartPathBuilderTask+0x254>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4944      	ldr	r1, [pc, #272]	; (8002830 <StartPathBuilderTask+0x260>)
 800271e:	4618      	mov	r0, r3
 8002720:	f00b f889 	bl	800d836 <speed_control_set_callbackdistptr>

  task2data.distToObs = 0;
 8002724:	4943      	ldr	r1, [pc, #268]	; (8002834 <StartPathBuilderTask+0x264>)
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	e9c1 2308 	strd	r2, r3, [r1, #32]
  task2data.distToObsEdge = 0;
 8002732:	4940      	ldr	r1, [pc, #256]	; (8002834 <StartPathBuilderTask+0x264>)
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9c1 2306 	strd	r2, r3, [r1, #24]
  task2data.ultrasensordist = 999;
 8002740:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <StartPathBuilderTask+0x264>)
 8002742:	4a3d      	ldr	r2, [pc, #244]	; (8002838 <StartPathBuilderTask+0x268>)
 8002744:	629a      	str	r2, [r3, #40]	; 0x28

  task2data.distance = 0;
 8002746:	493b      	ldr	r1, [pc, #236]	; (8002834 <StartPathBuilderTask+0x264>)
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9c1 2302 	strd	r2, r3, [r1, #8]
  task2data.stage = -1;
 8002754:	4b37      	ldr	r3, [pc, #220]	; (8002834 <StartPathBuilderTask+0x264>)
 8002756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800275a:	601a      	str	r2, [r3, #0]


  double Ladd = 0, Radd =0;
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

  double Lencodersum = 0;
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  double Rencodersum = 0;
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  double idealencodersum =0;
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <StartPathBuilderTask+0x254>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80027c8 <StartPathBuilderTask+0x1f8>
 80027a4:	4618      	mov	r0, r3
 80027a6:	f00b ffb1 	bl	800e70c <vehicleservo_set_wheel_angle>

  for(;;)
  {


	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)){
 80027aa:	2101      	movs	r1, #1
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <StartPathBuilderTask+0x210>)
 80027ae:	f002 fb27 	bl	8004e00 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d041      	beq.n	800283c <StartPathBuilderTask+0x26c>
		 speed_control_run(speedData.mainspeed);
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <StartPathBuilderTask+0x254>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4618      	mov	r0, r3
 80027be:	f00b fa17 	bl	800dbf0 <speed_control_run>
 80027c2:	f001 b81d 	b.w	8003800 <StartPathBuilderTask+0x1230>
 80027c6:	bf00      	nop
	...
 80027d0:	20004ce0 	.word	0x20004ce0
 80027d4:	20004d78 	.word	0x20004d78
 80027d8:	40020000 	.word	0x40020000
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	20004aa4 	.word	0x20004aa4
 80027e8:	20004c18 	.word	0x20004c18
 80027ec:	20004d2c 	.word	0x20004d2c
 80027f0:	20004c5c 	.word	0x20004c5c
 80027f4:	20004aec 	.word	0x20004aec
 80027f8:	20004cac 	.word	0x20004cac
 80027fc:	3c23d70a 	.word	0x3c23d70a
 8002800:	41400000 	.word	0x41400000
 8002804:	41300000 	.word	0x41300000
 8002808:	3a03126f 	.word	0x3a03126f
 800280c:	20004cb0 	.word	0x20004cb0
 8002810:	20004d7c 	.word	0x20004d7c
 8002814:	20004cb8 	.word	0x20004cb8
 8002818:	20004cb4 	.word	0x20004cb4
 800281c:	20004cc0 	.word	0x20004cc0
 8002820:	20004cbc 	.word	0x20004cbc
 8002824:	20004ccc 	.word	0x20004ccc
 8002828:	20004bc4 	.word	0x20004bc4
 800282c:	20004b38 	.word	0x20004b38
 8002830:	20004c28 	.word	0x20004c28
 8002834:	20004c20 	.word	0x20004c20
 8002838:	4479c000 	.word	0x4479c000
	 }else{

	 //fastest path tasks uses lower level pwm control over pid due to accuary issues

	 encoder_run(speedData.mainspeed->Lmotor_speed_subctl->encoder_ctl,200,ENCODER_DIRECTION_NATURAL);
 800283c:	4bc2      	ldr	r3, [pc, #776]	; (8002b48 <StartPathBuilderTask+0x578>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2201      	movs	r2, #1
 8002846:	21c8      	movs	r1, #200	; 0xc8
 8002848:	4618      	mov	r0, r3
 800284a:	f009 fa42 	bl	800bcd2 <encoder_run>
	 encoder_run(speedData.mainspeed->Rmotor_speed_subctl->encoder_ctl,200,ENCODER_DIRECTION_FLIPPED);
 800284e:	4bbe      	ldr	r3, [pc, #760]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800285a:	21c8      	movs	r1, #200	; 0xc8
 800285c:	4618      	mov	r0, r3
 800285e:	f009 fa38 	bl	800bcd2 <encoder_run>
	 Ladd = speedData.mainspeed->Lmotor_speed_subctl->encoder_ctl->currFrame->pulseDiff;
 8002862:	4bb9      	ldr	r3, [pc, #740]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe50 	bl	8000514 <__aeabi_i2d>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	 Radd = speedData.mainspeed->Rmotor_speed_subctl->encoder_ctl->currFrame->pulseDiff;
 800287c:	4bb2      	ldr	r3, [pc, #712]	; (8002b48 <StartPathBuilderTask+0x578>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe43 	bl	8000514 <__aeabi_i2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	 Lencodersum += Ladd;
 8002896:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800289a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800289e:	f7fd fced 	bl	800027c <__adddf3>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	 Rencodersum += Radd;
 80028aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80028ae:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028b2:	f7fd fce3 	bl	800027c <__adddf3>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	 idealencodersum = Lencodersum + Rencodersum;
 80028be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80028c6:	f7fd fcd9 	bl	800027c <__adddf3>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	  switch(task2data.stage){
 80028d2:	4b9e      	ldr	r3, [pc, #632]	; (8002b4c <StartPathBuilderTask+0x57c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b13      	cmp	r3, #19
 80028d8:	f200 8792 	bhi.w	8003800 <StartPathBuilderTask+0x1230>
 80028dc:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <StartPathBuilderTask+0x314>)
 80028de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e2:	bf00      	nop
 80028e4:	08002935 	.word	0x08002935
 80028e8:	08002a6f 	.word	0x08002a6f
 80028ec:	08002b55 	.word	0x08002b55
 80028f0:	08002bf9 	.word	0x08002bf9
 80028f4:	08002cb1 	.word	0x08002cb1
 80028f8:	08002d51 	.word	0x08002d51
 80028fc:	08002e31 	.word	0x08002e31
 8002900:	08002ed1 	.word	0x08002ed1
 8002904:	08002f89 	.word	0x08002f89
 8002908:	08003025 	.word	0x08003025
 800290c:	080030f9 	.word	0x080030f9
 8002910:	08003195 	.word	0x08003195
 8002914:	08003247 	.word	0x08003247
 8002918:	080032e3 	.word	0x080032e3
 800291c:	080033c1 	.word	0x080033c1
 8002920:	08003461 	.word	0x08003461
 8002924:	08003513 	.word	0x08003513
 8002928:	080035c9 	.word	0x080035c9
 800292c:	080036b5 	.word	0x080036b5
 8002930:	08003767 	.word	0x08003767
	  	  case 0:
	  		 vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8002934:	4b84      	ldr	r3, [pc, #528]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8002b30 <StartPathBuilderTask+0x560>
 8002940:	4618      	mov	r0, r3
 8002942:	f00b fee3 	bl	800e70c <vehicleservo_set_wheel_angle>
			 motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 3980),MOTOR_PWM_NORMAL);
 8002946:	4b80      	ldr	r3, [pc, #512]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681c      	ldr	r4, [r3, #0]
 800294e:	f640 718c 	movw	r1, #3980	; 0xf8c
 8002952:	2000      	movs	r0, #0
 8002954:	f009 f88c 	bl	800ba70 <diff_get_Lmotor_values>
 8002958:	ec53 2b10 	vmov	r2, r3, d0
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	f7fe f8f2 	bl	8000b48 <__aeabi_d2iz>
 8002964:	4603      	mov	r3, r0
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	4620      	mov	r0, r4
 800296c:	f009 ffae 	bl	800c8cc <motor_set_pwm>
			 motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl, diff_get_Rmotor_values(0, 4000),MOTOR_PWM_NORMAL);
 8002970:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	681c      	ldr	r4, [r3, #0]
 8002978:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800297c:	2000      	movs	r0, #0
 800297e:	f009 f8f7 	bl	800bb70 <diff_get_Rmotor_values>
 8002982:	ec53 2b10 	vmov	r2, r3, d0
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fe f8dd 	bl	8000b48 <__aeabi_d2iz>
 800298e:	4603      	mov	r3, r0
 8002990:	2200      	movs	r2, #0
 8002992:	4619      	mov	r1, r3
 8002994:	4620      	mov	r0, r4
 8002996:	f009 ff99 	bl	800c8cc <motor_set_pwm>
			 if(task2data.ultrasensordist < 50) {
 800299a:	4b6c      	ldr	r3, [pc, #432]	; (8002b4c <StartPathBuilderTask+0x57c>)
 800299c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80029a0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002b50 <StartPathBuilderTask+0x580>
 80029a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ac:	d510      	bpl.n	80029d0 <StartPathBuilderTask+0x400>
				 task2data.stage = 1;
 80029ae:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <StartPathBuilderTask+0x57c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 }else if ( ((double)task2data.IRdistL /(double) task2data.IRdistR) > 1.23 || ((double)task2data.IRdistR / (double)task2data.IRdistL) > 1.23  ){
				 task2data.stage = 18;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 80029cc:	f000 bf18 	b.w	8003800 <StartPathBuilderTask+0x1230>
			 }else if ( ((double)task2data.IRdistL /(double) task2data.IRdistR) > 1.23 || ((double)task2data.IRdistR / (double)task2data.IRdistL) > 1.23  ){
 80029d0:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <StartPathBuilderTask+0x57c>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fd9d 	bl	8000514 <__aeabi_i2d>
 80029da:	4604      	mov	r4, r0
 80029dc:	460d      	mov	r5, r1
 80029de:	4b5b      	ldr	r3, [pc, #364]	; (8002b4c <StartPathBuilderTask+0x57c>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd96 	bl	8000514 <__aeabi_i2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4620      	mov	r0, r4
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7fd ff24 	bl	800083c <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	a34e      	add	r3, pc, #312	; (adr r3, 8002b38 <StartPathBuilderTask+0x568>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fe f881 	bl	8000b08 <__aeabi_dcmpgt>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11f      	bne.n	8002a4c <StartPathBuilderTask+0x47c>
 8002a0c:	4b4f      	ldr	r3, [pc, #316]	; (8002b4c <StartPathBuilderTask+0x57c>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fd7f 	bl	8000514 <__aeabi_i2d>
 8002a16:	4604      	mov	r4, r0
 8002a18:	460d      	mov	r5, r1
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <StartPathBuilderTask+0x57c>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd78 	bl	8000514 <__aeabi_i2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4620      	mov	r0, r4
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f7fd ff06 	bl	800083c <__aeabi_ddiv>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	a33f      	add	r3, pc, #252	; (adr r3, 8002b38 <StartPathBuilderTask+0x568>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fe f863 	bl	8000b08 <__aeabi_dcmpgt>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <StartPathBuilderTask+0x47c>
			 break;
 8002a48:	f000 beda 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 18;
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <StartPathBuilderTask+0x57c>)
 8002a4e:	2212      	movs	r2, #18
 8002a50:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002a6a:	f000 bec9 	b.w	8003800 <StartPathBuilderTask+0x1230>
	  	  case 1: //brake
		  		 vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, -30);
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8002b40 <StartPathBuilderTask+0x570>
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f00b fe46 	bl	800e70c <vehicleservo_set_wheel_angle>
			 motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(-30, 0),MOTOR_PWM_BRAKE);
 8002a80:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681c      	ldr	r4, [r3, #0]
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f06f 001d 	mvn.w	r0, #29
 8002a8e:	f008 ffef 	bl	800ba70 <diff_get_Lmotor_values>
 8002a92:	ec53 2b10 	vmov	r2, r3, d0
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f855 	bl	8000b48 <__aeabi_d2iz>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	f009 ff11 	bl	800c8cc <motor_set_pwm>
			 motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(-30, 0),MOTOR_PWM_BRAKE);
 8002aaa:	4b27      	ldr	r3, [pc, #156]	; (8002b48 <StartPathBuilderTask+0x578>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	681c      	ldr	r4, [r3, #0]
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f06f 001d 	mvn.w	r0, #29
 8002ab8:	f009 f85a 	bl	800bb70 <diff_get_Rmotor_values>
 8002abc:	ec53 2b10 	vmov	r2, r3, d0
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f7fe f840 	bl	8000b48 <__aeabi_d2iz>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2201      	movs	r2, #1
 8002acc:	4619      	mov	r1, r3
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f009 fefc 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002ae0:	f7fd ffea 	bl	8000ab8 <__aeabi_dcmpeq>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <StartPathBuilderTask+0x51e>
				 task2data.stage = 2;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8002aea:	f000 be89 	b.w	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002afa:	f7fd ffdd 	bl	8000ab8 <__aeabi_dcmpeq>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <StartPathBuilderTask+0x538>
			 break;
 8002b04:	f000 be7c 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 2;
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <StartPathBuilderTask+0x57c>)
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002b26:	f000 be6b 	b.w	8003800 <StartPathBuilderTask+0x1230>
 8002b2a:	bf00      	nop
 8002b2c:	f3af 8000 	nop.w
	...
 8002b38:	7ae147ae 	.word	0x7ae147ae
 8002b3c:	3ff3ae14 	.word	0x3ff3ae14
 8002b40:	00000000 	.word	0x00000000
 8002b44:	c03e0000 	.word	0xc03e0000
 8002b48:	20004ccc 	.word	0x20004ccc
 8002b4c:	20004c20 	.word	0x20004c20
 8002b50:	42480000 	.word	0x42480000
	  	  case 2: //turn 90 left
	  		vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, -30);
 8002b54:	4bb2      	ldr	r3, [pc, #712]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	ed9f 0baa 	vldr	d0, [pc, #680]	; 8002e08 <StartPathBuilderTask+0x838>
 8002b60:	4618      	mov	r0, r3
 8002b62:	f00b fdd3 	bl	800e70c <vehicleservo_set_wheel_angle>
			 motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(-30, 4950),MOTOR_PWM_NORMAL);
 8002b66:	4bae      	ldr	r3, [pc, #696]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681c      	ldr	r4, [r3, #0]
 8002b6e:	f241 3156 	movw	r1, #4950	; 0x1356
 8002b72:	f06f 001d 	mvn.w	r0, #29
 8002b76:	f008 ff7b 	bl	800ba70 <diff_get_Lmotor_values>
 8002b7a:	ec53 2b10 	vmov	r2, r3, d0
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ffe1 	bl	8000b48 <__aeabi_d2iz>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f009 fe9d 	bl	800c8cc <motor_set_pwm>
			 motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(-30, 5000),MOTOR_PWM_NORMAL);
 8002b92:	4ba3      	ldr	r3, [pc, #652]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	681c      	ldr	r4, [r3, #0]
 8002b9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b9e:	f06f 001d 	mvn.w	r0, #29
 8002ba2:	f008 ffe5 	bl	800bb70 <diff_get_Rmotor_values>
 8002ba6:	ec53 2b10 	vmov	r2, r3, d0
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fd ffcb 	bl	8000b48 <__aeabi_d2iz>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f009 fe87 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum > 250 /* turn distance*/) {
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4b98      	ldr	r3, [pc, #608]	; (8002e24 <StartPathBuilderTask+0x854>)
 8002bc4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bc8:	f7fd ff9e 	bl	8000b08 <__aeabi_dcmpgt>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <StartPathBuilderTask+0x606>
				 task2data.stage = 3;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8002bd2:	f000 be15 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 3;
 8002bd6:	4b94      	ldr	r3, [pc, #592]	; (8002e28 <StartPathBuilderTask+0x858>)
 8002bd8:	2203      	movs	r2, #3
 8002bda:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002bf4:	f000 be04 	b.w	8003800 <StartPathBuilderTask+0x1230>
	  	  case 3: //brake
	  		vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8002bf8:	4b89      	ldr	r3, [pc, #548]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	ed9f 0b83 	vldr	d0, [pc, #524]	; 8002e10 <StartPathBuilderTask+0x840>
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00b fd81 	bl	800e70c <vehicleservo_set_wheel_angle>
			 motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8002c0a:	4b85      	ldr	r3, [pc, #532]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681c      	ldr	r4, [r3, #0]
 8002c12:	2100      	movs	r1, #0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f008 ff2b 	bl	800ba70 <diff_get_Lmotor_values>
 8002c1a:	ec53 2b10 	vmov	r2, r3, d0
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ff91 	bl	8000b48 <__aeabi_d2iz>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f009 fe4d 	bl	800c8cc <motor_set_pwm>
			 motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8002c32:	4b7b      	ldr	r3, [pc, #492]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	681c      	ldr	r4, [r3, #0]
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f008 ff97 	bl	800bb70 <diff_get_Rmotor_values>
 8002c42:	ec53 2b10 	vmov	r2, r3, d0
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7fd ff7d 	bl	8000b48 <__aeabi_d2iz>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2201      	movs	r2, #1
 8002c52:	4619      	mov	r1, r3
 8002c54:	4620      	mov	r0, r4
 8002c56:	f009 fe39 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002c66:	f7fd ff27 	bl	8000ab8 <__aeabi_dcmpeq>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <StartPathBuilderTask+0x6a4>
				 task2data.stage = 4;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8002c70:	f000 bdc6 	b.w	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c80:	f7fd ff1a 	bl	8000ab8 <__aeabi_dcmpeq>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <StartPathBuilderTask+0x6be>
			 break;
 8002c8a:	f000 bdb9 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 4;
 8002c8e:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <StartPathBuilderTask+0x858>)
 8002c90:	2204      	movs	r2, #4
 8002c92:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002cac:	f000 bda8 	b.w	8003800 <StartPathBuilderTask+0x1230>
	  	  case 4: //str parallel
	  		vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8002cb0:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8002e10 <StartPathBuilderTask+0x840>
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f00b fd25 	bl	800e70c <vehicleservo_set_wheel_angle>
			 motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0,4950),MOTOR_PWM_NORMAL);
 8002cc2:	4b57      	ldr	r3, [pc, #348]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681c      	ldr	r4, [r3, #0]
 8002cca:	f241 3156 	movw	r1, #4950	; 0x1356
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f008 fece 	bl	800ba70 <diff_get_Lmotor_values>
 8002cd4:	ec53 2b10 	vmov	r2, r3, d0
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd ff34 	bl	8000b48 <__aeabi_d2iz>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f009 fdf0 	bl	800c8cc <motor_set_pwm>
			 motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 5000),MOTOR_PWM_NORMAL);
 8002cec:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	681c      	ldr	r4, [r3, #0]
 8002cf4:	f241 3188 	movw	r1, #5000	; 0x1388
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f008 ff39 	bl	800bb70 <diff_get_Rmotor_values>
 8002cfe:	ec53 2b10 	vmov	r2, r3, d0
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f7fd ff1f 	bl	8000b48 <__aeabi_d2iz>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4620      	mov	r0, r4
 8002d12:	f009 fddb 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum > 40  /* str distance*/) {
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	4b44      	ldr	r3, [pc, #272]	; (8002e2c <StartPathBuilderTask+0x85c>)
 8002d1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d20:	f7fd fef2 	bl	8000b08 <__aeabi_dcmpgt>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <StartPathBuilderTask+0x75e>
				 task2data.stage = 5;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8002d2a:	f000 bd69 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 5;
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <StartPathBuilderTask+0x858>)
 8002d30:	2205      	movs	r2, #5
 8002d32:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002d4c:	f000 bd58 	b.w	8003800 <StartPathBuilderTask+0x1230>
	  	  case 5: //brake
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 30);
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8002e18 <StartPathBuilderTask+0x848>
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00b fcd5 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f008 fe7f 	bl	800ba70 <diff_get_Lmotor_values>
 8002d72:	ec53 2b10 	vmov	r2, r3, d0
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd fee5 	bl	8000b48 <__aeabi_d2iz>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2201      	movs	r2, #1
 8002d82:	4619      	mov	r1, r3
 8002d84:	4620      	mov	r0, r4
 8002d86:	f009 fda1 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <StartPathBuilderTask+0x850>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	681c      	ldr	r4, [r3, #0]
 8002d92:	2100      	movs	r1, #0
 8002d94:	2000      	movs	r0, #0
 8002d96:	f008 feeb 	bl	800bb70 <diff_get_Rmotor_values>
 8002d9a:	ec53 2b10 	vmov	r2, r3, d0
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd fed1 	bl	8000b48 <__aeabi_d2iz>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2201      	movs	r2, #1
 8002daa:	4619      	mov	r1, r3
 8002dac:	4620      	mov	r0, r4
 8002dae:	f009 fd8d 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002dbe:	f7fd fe7b 	bl	8000ab8 <__aeabi_dcmpeq>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <StartPathBuilderTask+0x7fc>
				 task2data.stage = 6;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8002dc8:	f000 bd1a 	b.w	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002dd8:	f7fd fe6e 	bl	8000ab8 <__aeabi_dcmpeq>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <StartPathBuilderTask+0x816>
			 break;
 8002de2:	f000 bd0d 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 6;
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <StartPathBuilderTask+0x858>)
 8002de8:	2206      	movs	r2, #6
 8002dea:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002e04:	f000 bcfc 	b.w	8003800 <StartPathBuilderTask+0x1230>
 8002e08:	00000000 	.word	0x00000000
 8002e0c:	c03e0000 	.word	0xc03e0000
	...
 8002e1c:	403e0000 	.word	0x403e0000
 8002e20:	20004ccc 	.word	0x20004ccc
 8002e24:	406f4000 	.word	0x406f4000
 8002e28:	20004c20 	.word	0x20004c20
 8002e2c:	40440000 	.word	0x40440000
	  	  case 6: // turn 180
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 30);
 8002e30:	4bad      	ldr	r3, [pc, #692]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	ed9f 0ba7 	vldr	d0, [pc, #668]	; 80030d8 <StartPathBuilderTask+0xb08>
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f00b fc65 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(30, 4950),MOTOR_PWM_NORMAL);
 8002e42:	4ba9      	ldr	r3, [pc, #676]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	f241 3156 	movw	r1, #4950	; 0x1356
 8002e4e:	201e      	movs	r0, #30
 8002e50:	f008 fe0e 	bl	800ba70 <diff_get_Lmotor_values>
 8002e54:	ec53 2b10 	vmov	r2, r3, d0
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7fd fe74 	bl	8000b48 <__aeabi_d2iz>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2200      	movs	r2, #0
 8002e64:	4619      	mov	r1, r3
 8002e66:	4620      	mov	r0, r4
 8002e68:	f009 fd30 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(30, 5000),MOTOR_PWM_NORMAL);
 8002e6c:	4b9e      	ldr	r3, [pc, #632]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	681c      	ldr	r4, [r3, #0]
 8002e74:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e78:	201e      	movs	r0, #30
 8002e7a:	f008 fe79 	bl	800bb70 <diff_get_Rmotor_values>
 8002e7e:	ec53 2b10 	vmov	r2, r3, d0
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	f7fd fe5f 	bl	8000b48 <__aeabi_d2iz>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4620      	mov	r0, r4
 8002e92:	f009 fd1b 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum >  800  /* turn distance*/) {
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	4b94      	ldr	r3, [pc, #592]	; (80030ec <StartPathBuilderTask+0xb1c>)
 8002e9c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ea0:	f7fd fe32 	bl	8000b08 <__aeabi_dcmpgt>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <StartPathBuilderTask+0x8de>
				 task2data.stage = 7;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8002eaa:	f000 bca9 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 7;
 8002eae:	4b90      	ldr	r3, [pc, #576]	; (80030f0 <StartPathBuilderTask+0xb20>)
 8002eb0:	2207      	movs	r2, #7
 8002eb2:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002ecc:	f000 bc98 	b.w	8003800 <StartPathBuilderTask+0x1230>
	  	  case 7: //brake
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8002ed0:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	ed9f 0b81 	vldr	d0, [pc, #516]	; 80030e0 <StartPathBuilderTask+0xb10>
 8002edc:	4618      	mov	r0, r3
 8002ede:	f00b fc15 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8002ee2:	4b81      	ldr	r3, [pc, #516]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681c      	ldr	r4, [r3, #0]
 8002eea:	2100      	movs	r1, #0
 8002eec:	2000      	movs	r0, #0
 8002eee:	f008 fdbf 	bl	800ba70 <diff_get_Lmotor_values>
 8002ef2:	ec53 2b10 	vmov	r2, r3, d0
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f7fd fe25 	bl	8000b48 <__aeabi_d2iz>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2201      	movs	r2, #1
 8002f02:	4619      	mov	r1, r3
 8002f04:	4620      	mov	r0, r4
 8002f06:	f009 fce1 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8002f0a:	4b77      	ldr	r3, [pc, #476]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	681c      	ldr	r4, [r3, #0]
 8002f12:	2100      	movs	r1, #0
 8002f14:	2000      	movs	r0, #0
 8002f16:	f008 fe2b 	bl	800bb70 <diff_get_Rmotor_values>
 8002f1a:	ec53 2b10 	vmov	r2, r3, d0
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fe11 	bl	8000b48 <__aeabi_d2iz>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f009 fccd 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002f3e:	f7fd fdbb 	bl	8000ab8 <__aeabi_dcmpeq>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <StartPathBuilderTask+0x97c>
				 task2data.stage = 8;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8002f48:	f000 bc5a 	b.w	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002f58:	f7fd fdae 	bl	8000ab8 <__aeabi_dcmpeq>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <StartPathBuilderTask+0x996>
			 break;
 8002f62:	f000 bc4d 	b.w	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 8;
 8002f66:	4b62      	ldr	r3, [pc, #392]	; (80030f0 <StartPathBuilderTask+0xb20>)
 8002f68:	2208      	movs	r2, #8
 8002f6a:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8002f84:	f000 bc3c 	b.w	8003800 <StartPathBuilderTask+0x1230>
	  	  case 8: //str parallel
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8002f88:	4b57      	ldr	r3, [pc, #348]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	ed9f 0b53 	vldr	d0, [pc, #332]	; 80030e0 <StartPathBuilderTask+0xb10>
 8002f94:	4618      	mov	r0, r3
 8002f96:	f00b fbb9 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 4950),MOTOR_PWM_NORMAL);
 8002f9a:	4b53      	ldr	r3, [pc, #332]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681c      	ldr	r4, [r3, #0]
 8002fa2:	f241 3156 	movw	r1, #4950	; 0x1356
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f008 fd62 	bl	800ba70 <diff_get_Lmotor_values>
 8002fac:	ec53 2b10 	vmov	r2, r3, d0
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fdc8 	bl	8000b48 <__aeabi_d2iz>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f009 fc84 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 5000),MOTOR_PWM_NORMAL);
 8002fc4:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	681c      	ldr	r4, [r3, #0]
 8002fcc:	f241 3188 	movw	r1, #5000	; 0x1388
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f008 fdcd 	bl	800bb70 <diff_get_Rmotor_values>
 8002fd6:	ec53 2b10 	vmov	r2, r3, d0
 8002fda:	4610      	mov	r0, r2
 8002fdc:	4619      	mov	r1, r3
 8002fde:	f7fd fdb3 	bl	8000b48 <__aeabi_d2iz>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4620      	mov	r0, r4
 8002fea:	f009 fc6f 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum > 1320/*distance*/) {
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <StartPathBuilderTask+0xb24>)
 8002ff4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ff8:	f7fd fd86 	bl	8000b08 <__aeabi_dcmpgt>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d100      	bne.n	8003004 <StartPathBuilderTask+0xa34>
				 task2data.stage = 9;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8003002:	e3fd      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 9;
 8003004:	4b3a      	ldr	r3, [pc, #232]	; (80030f0 <StartPathBuilderTask+0xb20>)
 8003006:	2209      	movs	r2, #9
 8003008:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8003022:	e3ed      	b.n	8003800 <StartPathBuilderTask+0x1230>
	  	  case 9: //brake
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 30);
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 80030d8 <StartPathBuilderTask+0xb08>
 8003030:	4618      	mov	r0, r3
 8003032:	f00b fb6b 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681c      	ldr	r4, [r3, #0]
 800303e:	2100      	movs	r1, #0
 8003040:	2000      	movs	r0, #0
 8003042:	f008 fd15 	bl	800ba70 <diff_get_Lmotor_values>
 8003046:	ec53 2b10 	vmov	r2, r3, d0
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	f7fd fd7b 	bl	8000b48 <__aeabi_d2iz>
 8003052:	4603      	mov	r3, r0
 8003054:	2201      	movs	r2, #1
 8003056:	4619      	mov	r1, r3
 8003058:	4620      	mov	r0, r4
 800305a:	f009 fc37 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 800305e:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <StartPathBuilderTask+0xb18>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	681c      	ldr	r4, [r3, #0]
 8003066:	2100      	movs	r1, #0
 8003068:	2000      	movs	r0, #0
 800306a:	f008 fd81 	bl	800bb70 <diff_get_Rmotor_values>
 800306e:	ec53 2b10 	vmov	r2, r3, d0
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fd67 	bl	8000b48 <__aeabi_d2iz>
 800307a:	4603      	mov	r3, r0
 800307c:	2201      	movs	r2, #1
 800307e:	4619      	mov	r1, r3
 8003080:	4620      	mov	r0, r4
 8003082:	f009 fc23 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003092:	f7fd fd11 	bl	8000ab8 <__aeabi_dcmpeq>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d100      	bne.n	800309e <StartPathBuilderTask+0xace>
				 task2data.stage = 10;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 800309c:	e3b0      	b.n	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030aa:	f7fd fd05 	bl	8000ab8 <__aeabi_dcmpeq>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <StartPathBuilderTask+0xae6>
			 break;
 80030b4:	e3a4      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 10;
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <StartPathBuilderTask+0xb20>)
 80030b8:	220a      	movs	r2, #10
 80030ba:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 80030d4:	e394      	b.n	8003800 <StartPathBuilderTask+0x1230>
 80030d6:	bf00      	nop
 80030d8:	00000000 	.word	0x00000000
 80030dc:	403e0000 	.word	0x403e0000
	...
 80030e8:	20004ccc 	.word	0x20004ccc
 80030ec:	40890000 	.word	0x40890000
 80030f0:	20004c20 	.word	0x20004c20
 80030f4:	4094a000 	.word	0x4094a000
	  	  case 10: // turn 180
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 30);
 80030f8:	4bad      	ldr	r3, [pc, #692]	; (80033b0 <StartPathBuilderTask+0xde0>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8003398 <StartPathBuilderTask+0xdc8>
 8003104:	4618      	mov	r0, r3
 8003106:	f00b fb01 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(30, 4950),MOTOR_PWM_NORMAL);
 800310a:	4ba9      	ldr	r3, [pc, #676]	; (80033b0 <StartPathBuilderTask+0xde0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681c      	ldr	r4, [r3, #0]
 8003112:	f241 3156 	movw	r1, #4950	; 0x1356
 8003116:	201e      	movs	r0, #30
 8003118:	f008 fcaa 	bl	800ba70 <diff_get_Lmotor_values>
 800311c:	ec53 2b10 	vmov	r2, r3, d0
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f7fd fd10 	bl	8000b48 <__aeabi_d2iz>
 8003128:	4603      	mov	r3, r0
 800312a:	2200      	movs	r2, #0
 800312c:	4619      	mov	r1, r3
 800312e:	4620      	mov	r0, r4
 8003130:	f009 fbcc 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(30, 5000),MOTOR_PWM_NORMAL);
 8003134:	4b9e      	ldr	r3, [pc, #632]	; (80033b0 <StartPathBuilderTask+0xde0>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	681c      	ldr	r4, [r3, #0]
 800313c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003140:	201e      	movs	r0, #30
 8003142:	f008 fd15 	bl	800bb70 <diff_get_Rmotor_values>
 8003146:	ec53 2b10 	vmov	r2, r3, d0
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	f7fd fcfb 	bl	8000b48 <__aeabi_d2iz>
 8003152:	4603      	mov	r3, r0
 8003154:	2200      	movs	r2, #0
 8003156:	4619      	mov	r1, r3
 8003158:	4620      	mov	r0, r4
 800315a:	f009 fbb7 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum > 800 /* turn distance*/) {
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <StartPathBuilderTask+0xde4>)
 8003164:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003168:	f7fd fcce 	bl	8000b08 <__aeabi_dcmpgt>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d100      	bne.n	8003174 <StartPathBuilderTask+0xba4>
				 task2data.stage = 11;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8003172:	e345      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 11;
 8003174:	4b90      	ldr	r3, [pc, #576]	; (80033b8 <StartPathBuilderTask+0xde8>)
 8003176:	220b      	movs	r2, #11
 8003178:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8003192:	e335      	b.n	8003800 <StartPathBuilderTask+0x1230>
	  	  case 11: //brake
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8003194:	4b86      	ldr	r3, [pc, #536]	; (80033b0 <StartPathBuilderTask+0xde0>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	ed9f 0b80 	vldr	d0, [pc, #512]	; 80033a0 <StartPathBuilderTask+0xdd0>
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00b fab3 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 80031a6:	4b82      	ldr	r3, [pc, #520]	; (80033b0 <StartPathBuilderTask+0xde0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	2100      	movs	r1, #0
 80031b0:	2000      	movs	r0, #0
 80031b2:	f008 fc5d 	bl	800ba70 <diff_get_Lmotor_values>
 80031b6:	ec53 2b10 	vmov	r2, r3, d0
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f7fd fcc3 	bl	8000b48 <__aeabi_d2iz>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2201      	movs	r2, #1
 80031c6:	4619      	mov	r1, r3
 80031c8:	4620      	mov	r0, r4
 80031ca:	f009 fb7f 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 80031ce:	4b78      	ldr	r3, [pc, #480]	; (80033b0 <StartPathBuilderTask+0xde0>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	681c      	ldr	r4, [r3, #0]
 80031d6:	2100      	movs	r1, #0
 80031d8:	2000      	movs	r0, #0
 80031da:	f008 fcc9 	bl	800bb70 <diff_get_Rmotor_values>
 80031de:	ec53 2b10 	vmov	r2, r3, d0
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	f7fd fcaf 	bl	8000b48 <__aeabi_d2iz>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2201      	movs	r2, #1
 80031ee:	4619      	mov	r1, r3
 80031f0:	4620      	mov	r0, r4
 80031f2:	f009 fb6b 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003202:	f7fd fc59 	bl	8000ab8 <__aeabi_dcmpeq>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d100      	bne.n	800320e <StartPathBuilderTask+0xc3e>
				 task2data.stage = 12;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 800320c:	e2f8      	b.n	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800321a:	f7fd fc4d 	bl	8000ab8 <__aeabi_dcmpeq>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d100      	bne.n	8003226 <StartPathBuilderTask+0xc56>
			 break;
 8003224:	e2ec      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 12;
 8003226:	4b64      	ldr	r3, [pc, #400]	; (80033b8 <StartPathBuilderTask+0xde8>)
 8003228:	220c      	movs	r2, #12
 800322a:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8003244:	e2dc      	b.n	8003800 <StartPathBuilderTask+0x1230>
	  	  case 12: //str parallel
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8003246:	4b5a      	ldr	r3, [pc, #360]	; (80033b0 <StartPathBuilderTask+0xde0>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80033a0 <StartPathBuilderTask+0xdd0>
 8003252:	4618      	mov	r0, r3
 8003254:	f00b fa5a 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 4950),MOTOR_PWM_NORMAL);
 8003258:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <StartPathBuilderTask+0xde0>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681c      	ldr	r4, [r3, #0]
 8003260:	f241 3156 	movw	r1, #4950	; 0x1356
 8003264:	2000      	movs	r0, #0
 8003266:	f008 fc03 	bl	800ba70 <diff_get_Lmotor_values>
 800326a:	ec53 2b10 	vmov	r2, r3, d0
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f7fd fc69 	bl	8000b48 <__aeabi_d2iz>
 8003276:	4603      	mov	r3, r0
 8003278:	2200      	movs	r2, #0
 800327a:	4619      	mov	r1, r3
 800327c:	4620      	mov	r0, r4
 800327e:	f009 fb25 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 5000),MOTOR_PWM_NORMAL);
 8003282:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <StartPathBuilderTask+0xde0>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	681c      	ldr	r4, [r3, #0]
 800328a:	f241 3188 	movw	r1, #5000	; 0x1388
 800328e:	2000      	movs	r0, #0
 8003290:	f008 fc6e 	bl	800bb70 <diff_get_Rmotor_values>
 8003294:	ec53 2b10 	vmov	r2, r3, d0
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	f7fd fc54 	bl	8000b48 <__aeabi_d2iz>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2200      	movs	r2, #0
 80032a4:	4619      	mov	r1, r3
 80032a6:	4620      	mov	r0, r4
 80032a8:	f009 fb10 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum > 40/* turn distance*/) {
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	4b42      	ldr	r3, [pc, #264]	; (80033bc <StartPathBuilderTask+0xdec>)
 80032b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032b6:	f7fd fc27 	bl	8000b08 <__aeabi_dcmpgt>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d100      	bne.n	80032c2 <StartPathBuilderTask+0xcf2>
				 task2data.stage = 13;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 80032c0:	e29e      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 13;
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <StartPathBuilderTask+0xde8>)
 80032c4:	220d      	movs	r2, #13
 80032c6:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 80032e0:	e28e      	b.n	8003800 <StartPathBuilderTask+0x1230>
	  	  case 13: //brake
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, -30);
 80032e2:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <StartPathBuilderTask+0xde0>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 80033a8 <StartPathBuilderTask+0xdd8>
 80032ee:	4618      	mov	r0, r3
 80032f0:	f00b fa0c 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(-30, 0),MOTOR_PWM_BRAKE);
 80032f4:	4b2e      	ldr	r3, [pc, #184]	; (80033b0 <StartPathBuilderTask+0xde0>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	2100      	movs	r1, #0
 80032fe:	f06f 001d 	mvn.w	r0, #29
 8003302:	f008 fbb5 	bl	800ba70 <diff_get_Lmotor_values>
 8003306:	ec53 2b10 	vmov	r2, r3, d0
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	f7fd fc1b 	bl	8000b48 <__aeabi_d2iz>
 8003312:	4603      	mov	r3, r0
 8003314:	2201      	movs	r2, #1
 8003316:	4619      	mov	r1, r3
 8003318:	4620      	mov	r0, r4
 800331a:	f009 fad7 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(-30, 0),MOTOR_PWM_BRAKE);
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <StartPathBuilderTask+0xde0>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	681c      	ldr	r4, [r3, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	f06f 001d 	mvn.w	r0, #29
 800332c:	f008 fc20 	bl	800bb70 <diff_get_Rmotor_values>
 8003330:	ec53 2b10 	vmov	r2, r3, d0
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fc06 	bl	8000b48 <__aeabi_d2iz>
 800333c:	4603      	mov	r3, r0
 800333e:	2201      	movs	r2, #1
 8003340:	4619      	mov	r1, r3
 8003342:	4620      	mov	r0, r4
 8003344:	f009 fac2 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003354:	f7fd fbb0 	bl	8000ab8 <__aeabi_dcmpeq>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d100      	bne.n	8003360 <StartPathBuilderTask+0xd90>
				 task2data.stage = 14;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 800335e:	e24f      	b.n	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800336c:	f7fd fba4 	bl	8000ab8 <__aeabi_dcmpeq>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d100      	bne.n	8003378 <StartPathBuilderTask+0xda8>
			 break;
 8003376:	e243      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 14;
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <StartPathBuilderTask+0xde8>)
 800337a:	220e      	movs	r2, #14
 800337c:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8003396:	e233      	b.n	8003800 <StartPathBuilderTask+0x1230>
 8003398:	00000000 	.word	0x00000000
 800339c:	403e0000 	.word	0x403e0000
	...
 80033ac:	c03e0000 	.word	0xc03e0000
 80033b0:	20004ccc 	.word	0x20004ccc
 80033b4:	40890000 	.word	0x40890000
 80033b8:	20004c20 	.word	0x20004c20
 80033bc:	40440000 	.word	0x40440000
	  	  case 14: // turn 90
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, -30);
 80033c0:	4bb7      	ldr	r3, [pc, #732]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	ed9f 0bb1 	vldr	d0, [pc, #708]	; 8003690 <StartPathBuilderTask+0x10c0>
 80033cc:	4618      	mov	r0, r3
 80033ce:	f00b f99d 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(-30, 5000),MOTOR_PWM_NORMAL);
 80033d2:	4bb3      	ldr	r3, [pc, #716]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681c      	ldr	r4, [r3, #0]
 80033da:	f241 3188 	movw	r1, #5000	; 0x1388
 80033de:	f06f 001d 	mvn.w	r0, #29
 80033e2:	f008 fb45 	bl	800ba70 <diff_get_Lmotor_values>
 80033e6:	ec53 2b10 	vmov	r2, r3, d0
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd fbab 	bl	8000b48 <__aeabi_d2iz>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2200      	movs	r2, #0
 80033f6:	4619      	mov	r1, r3
 80033f8:	4620      	mov	r0, r4
 80033fa:	f009 fa67 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(-30, 5000),MOTOR_PWM_NORMAL);
 80033fe:	4ba8      	ldr	r3, [pc, #672]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	681c      	ldr	r4, [r3, #0]
 8003406:	f241 3188 	movw	r1, #5000	; 0x1388
 800340a:	f06f 001d 	mvn.w	r0, #29
 800340e:	f008 fbaf 	bl	800bb70 <diff_get_Rmotor_values>
 8003412:	ec53 2b10 	vmov	r2, r3, d0
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	f7fd fb95 	bl	8000b48 <__aeabi_d2iz>
 800341e:	4603      	mov	r3, r0
 8003420:	2200      	movs	r2, #0
 8003422:	4619      	mov	r1, r3
 8003424:	4620      	mov	r0, r4
 8003426:	f009 fa51 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum > 250 /* turn distance*/) {
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	4b9d      	ldr	r3, [pc, #628]	; (80036a4 <StartPathBuilderTask+0x10d4>)
 8003430:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003434:	f7fd fb68 	bl	8000b08 <__aeabi_dcmpgt>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d100      	bne.n	8003440 <StartPathBuilderTask+0xe70>
				 task2data.stage = 15;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 800343e:	e1df      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 15;
 8003440:	4b99      	ldr	r3, [pc, #612]	; (80036a8 <StartPathBuilderTask+0x10d8>)
 8003442:	220f      	movs	r2, #15
 8003444:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 800345e:	e1cf      	b.n	8003800 <StartPathBuilderTask+0x1230>
	  	  case 15: //brake
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8003460:	4b8f      	ldr	r3, [pc, #572]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8003698 <StartPathBuilderTask+0x10c8>
 800346c:	4618      	mov	r0, r3
 800346e:	f00b f94d 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8003472:	4b8b      	ldr	r3, [pc, #556]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681c      	ldr	r4, [r3, #0]
 800347a:	2100      	movs	r1, #0
 800347c:	2000      	movs	r0, #0
 800347e:	f008 faf7 	bl	800ba70 <diff_get_Lmotor_values>
 8003482:	ec53 2b10 	vmov	r2, r3, d0
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f7fd fb5d 	bl	8000b48 <__aeabi_d2iz>
 800348e:	4603      	mov	r3, r0
 8003490:	2201      	movs	r2, #1
 8003492:	4619      	mov	r1, r3
 8003494:	4620      	mov	r0, r4
 8003496:	f009 fa19 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 800349a:	4b81      	ldr	r3, [pc, #516]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	681c      	ldr	r4, [r3, #0]
 80034a2:	2100      	movs	r1, #0
 80034a4:	2000      	movs	r0, #0
 80034a6:	f008 fb63 	bl	800bb70 <diff_get_Rmotor_values>
 80034aa:	ec53 2b10 	vmov	r2, r3, d0
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f7fd fb49 	bl	8000b48 <__aeabi_d2iz>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2201      	movs	r2, #1
 80034ba:	4619      	mov	r1, r3
 80034bc:	4620      	mov	r0, r4
 80034be:	f009 fa05 	bl	800c8cc <motor_set_pwm>
			 if (Ladd == 0 && Radd == 0) {
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80034ce:	f7fd faf3 	bl	8000ab8 <__aeabi_dcmpeq>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d100      	bne.n	80034da <StartPathBuilderTask+0xf0a>
				 task2data.stage = 16;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 80034d8:	e192      	b.n	8003800 <StartPathBuilderTask+0x1230>
			 if (Ladd == 0 && Radd == 0) {
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80034e6:	f7fd fae7 	bl	8000ab8 <__aeabi_dcmpeq>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d100      	bne.n	80034f2 <StartPathBuilderTask+0xf22>
			 break;
 80034f0:	e186      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 16;
 80034f2:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <StartPathBuilderTask+0x10d8>)
 80034f4:	2210      	movs	r2, #16
 80034f6:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8003510:	e176      	b.n	8003800 <StartPathBuilderTask+0x1230>
	  	  case 16:
	  		 vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8003698 <StartPathBuilderTask+0x10c8>
 800351e:	4618      	mov	r0, r3
 8003520:	f00b f8f4 	bl	800e70c <vehicleservo_set_wheel_angle>
			 motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 4950),MOTOR_PWM_NORMAL);
 8003524:	4b5e      	ldr	r3, [pc, #376]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681c      	ldr	r4, [r3, #0]
 800352c:	f241 3156 	movw	r1, #4950	; 0x1356
 8003530:	2000      	movs	r0, #0
 8003532:	f008 fa9d 	bl	800ba70 <diff_get_Lmotor_values>
 8003536:	ec53 2b10 	vmov	r2, r3, d0
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	f7fd fb03 	bl	8000b48 <__aeabi_d2iz>
 8003542:	4603      	mov	r3, r0
 8003544:	2200      	movs	r2, #0
 8003546:	4619      	mov	r1, r3
 8003548:	4620      	mov	r0, r4
 800354a:	f009 f9bf 	bl	800c8cc <motor_set_pwm>
			 motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl, diff_get_Rmotor_values(0, 5000),MOTOR_PWM_NORMAL);
 800354e:	4b54      	ldr	r3, [pc, #336]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	681c      	ldr	r4, [r3, #0]
 8003556:	f241 3188 	movw	r1, #5000	; 0x1388
 800355a:	2000      	movs	r0, #0
 800355c:	f008 fb08 	bl	800bb70 <diff_get_Rmotor_values>
 8003560:	ec53 2b10 	vmov	r2, r3, d0
 8003564:	4610      	mov	r0, r2
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd faee 	bl	8000b48 <__aeabi_d2iz>
 800356c:	4603      	mov	r3, r0
 800356e:	2200      	movs	r2, #0
 8003570:	4619      	mov	r1, r3
 8003572:	4620      	mov	r0, r4
 8003574:	f009 f9aa 	bl	800c8cc <motor_set_pwm>
			 if(task2data.ultrasensordist < 30 || (task2data.IRdistR > 2130 &&  task2data.IRdistL > 2130)) {
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <StartPathBuilderTask+0x10d8>)
 800357a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800357e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358a:	d40d      	bmi.n	80035a8 <StartPathBuilderTask+0xfd8>
 800358c:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <StartPathBuilderTask+0x10d8>)
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	f640 0252 	movw	r2, #2130	; 0x852
 8003594:	4293      	cmp	r3, r2
 8003596:	f340 8132 	ble.w	80037fe <StartPathBuilderTask+0x122e>
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <StartPathBuilderTask+0x10d8>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f640 0252 	movw	r2, #2130	; 0x852
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f340 812b 	ble.w	80037fe <StartPathBuilderTask+0x122e>
				 task2data.stage = 17;
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <StartPathBuilderTask+0x10d8>)
 80035aa:	2211      	movs	r2, #17
 80035ac:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 }
			 break;
 80035c6:	e11a      	b.n	80037fe <StartPathBuilderTask+0x122e>
	  	  case 17: //brake
		  	vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 80035c8:	4b35      	ldr	r3, [pc, #212]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8003698 <StartPathBuilderTask+0x10c8>
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00b f899 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681c      	ldr	r4, [r3, #0]
 80035e2:	2100      	movs	r1, #0
 80035e4:	2000      	movs	r0, #0
 80035e6:	f008 fa43 	bl	800ba70 <diff_get_Lmotor_values>
 80035ea:	ec53 2b10 	vmov	r2, r3, d0
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	f7fd faa9 	bl	8000b48 <__aeabi_d2iz>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2201      	movs	r2, #1
 80035fa:	4619      	mov	r1, r3
 80035fc:	4620      	mov	r0, r4
 80035fe:	f009 f965 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <StartPathBuilderTask+0x10d0>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	681c      	ldr	r4, [r3, #0]
 800360a:	2100      	movs	r1, #0
 800360c:	2000      	movs	r0, #0
 800360e:	f008 faaf 	bl	800bb70 <diff_get_Rmotor_values>
 8003612:	ec53 2b10 	vmov	r2, r3, d0
 8003616:	4610      	mov	r0, r2
 8003618:	4619      	mov	r1, r3
 800361a:	f7fd fa95 	bl	8000b48 <__aeabi_d2iz>
 800361e:	4603      	mov	r3, r0
 8003620:	2201      	movs	r2, #1
 8003622:	4619      	mov	r1, r3
 8003624:	4620      	mov	r0, r4
 8003626:	f009 f951 	bl	800c8cc <motor_set_pwm>


			if (Ladd == 0 && Radd == 0) {
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003636:	f7fd fa3f 	bl	8000ab8 <__aeabi_dcmpeq>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d100      	bne.n	8003642 <StartPathBuilderTask+0x1072>
				 task2data.stage = -1;
				 HAL_UART_Transmit(&huart3, (uint8_t*) "0000000000", 10, 0xFFFF);
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 8003640:	e0de      	b.n	8003800 <StartPathBuilderTask+0x1230>
			if (Ladd == 0 && Radd == 0) {
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800364e:	f7fd fa33 	bl	8000ab8 <__aeabi_dcmpeq>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d100      	bne.n	800365a <StartPathBuilderTask+0x108a>
			 break;
 8003658:	e0d2      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = -1;
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <StartPathBuilderTask+0x10d8>)
 800365c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003660:	601a      	str	r2, [r3, #0]
				 HAL_UART_Transmit(&huart3, (uint8_t*) "0000000000", 10, 0xFFFF);
 8003662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003666:	220a      	movs	r2, #10
 8003668:	4910      	ldr	r1, [pc, #64]	; (80036ac <StartPathBuilderTask+0x10dc>)
 800366a:	4811      	ldr	r0, [pc, #68]	; (80036b0 <StartPathBuilderTask+0x10e0>)
 800366c:	f004 fc9b 	bl	8007fa6 <HAL_UART_Transmit>
				 Lencodersum = 0;
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8003688:	e0ba      	b.n	8003800 <StartPathBuilderTask+0x1230>
 800368a:	bf00      	nop
 800368c:	f3af 8000 	nop.w
 8003690:	00000000 	.word	0x00000000
 8003694:	c03e0000 	.word	0xc03e0000
	...
 80036a0:	20004ccc 	.word	0x20004ccc
 80036a4:	406f4000 	.word	0x406f4000
 80036a8:	20004c20 	.word	0x20004c20
 80036ac:	08010f20 	.word	0x08010f20
 80036b0:	20004b38 	.word	0x20004b38


		  //edgecase
	  	  case 18:
			vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 80036b4:	4b58      	ldr	r3, [pc, #352]	; (8003818 <StartPathBuilderTask+0x1248>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	ed9f 0b54 	vldr	d0, [pc, #336]	; 8003810 <StartPathBuilderTask+0x1240>
 80036c0:	4618      	mov	r0, r3
 80036c2:	f00b f823 	bl	800e70c <vehicleservo_set_wheel_angle>
			motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, 0),MOTOR_PWM_BRAKE);
 80036c6:	4b54      	ldr	r3, [pc, #336]	; (8003818 <StartPathBuilderTask+0x1248>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681c      	ldr	r4, [r3, #0]
 80036ce:	2100      	movs	r1, #0
 80036d0:	2000      	movs	r0, #0
 80036d2:	f008 f9cd 	bl	800ba70 <diff_get_Lmotor_values>
 80036d6:	ec53 2b10 	vmov	r2, r3, d0
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f7fd fa33 	bl	8000b48 <__aeabi_d2iz>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2201      	movs	r2, #1
 80036e6:	4619      	mov	r1, r3
 80036e8:	4620      	mov	r0, r4
 80036ea:	f009 f8ef 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl,diff_get_Rmotor_values(0, 0),MOTOR_PWM_BRAKE);
 80036ee:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <StartPathBuilderTask+0x1248>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	681c      	ldr	r4, [r3, #0]
 80036f6:	2100      	movs	r1, #0
 80036f8:	2000      	movs	r0, #0
 80036fa:	f008 fa39 	bl	800bb70 <diff_get_Rmotor_values>
 80036fe:	ec53 2b10 	vmov	r2, r3, d0
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	f7fd fa1f 	bl	8000b48 <__aeabi_d2iz>
 800370a:	4603      	mov	r3, r0
 800370c:	2201      	movs	r2, #1
 800370e:	4619      	mov	r1, r3
 8003710:	4620      	mov	r0, r4
 8003712:	f009 f8db 	bl	800c8cc <motor_set_pwm>
			if (Ladd == 0 && Radd == 0) {
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003722:	f7fd f9c9 	bl	8000ab8 <__aeabi_dcmpeq>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d100      	bne.n	800372e <StartPathBuilderTask+0x115e>
				 task2data.stage = 19;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 800372c:	e068      	b.n	8003800 <StartPathBuilderTask+0x1230>
			if (Ladd == 0 && Radd == 0) {
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800373a:	f7fd f9bd 	bl	8000ab8 <__aeabi_dcmpeq>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d100      	bne.n	8003746 <StartPathBuilderTask+0x1176>
			 break;
 8003744:	e05c      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 19;
 8003746:	4b35      	ldr	r3, [pc, #212]	; (800381c <StartPathBuilderTask+0x124c>)
 8003748:	2213      	movs	r2, #19
 800374a:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 8003764:	e04c      	b.n	8003800 <StartPathBuilderTask+0x1230>

	  	  case 19:
	  		 vehicleservo_set_wheel_angle(speedData.mainspeed->angle_subctl->vehicleservo_ctl, 0);
 8003766:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <StartPathBuilderTask+0x1248>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8003810 <StartPathBuilderTask+0x1240>
 8003772:	4618      	mov	r0, r3
 8003774:	f00a ffca 	bl	800e70c <vehicleservo_set_wheel_angle>
			 motor_set_pwm(speedData.mainspeed->Lmotor_speed_subctl->motor_ctl, diff_get_Lmotor_values(0, -3920),MOTOR_PWM_NORMAL);
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <StartPathBuilderTask+0x1248>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681c      	ldr	r4, [r3, #0]
 8003780:	4927      	ldr	r1, [pc, #156]	; (8003820 <StartPathBuilderTask+0x1250>)
 8003782:	2000      	movs	r0, #0
 8003784:	f008 f974 	bl	800ba70 <diff_get_Lmotor_values>
 8003788:	ec53 2b10 	vmov	r2, r3, d0
 800378c:	4610      	mov	r0, r2
 800378e:	4619      	mov	r1, r3
 8003790:	f7fd f9da 	bl	8000b48 <__aeabi_d2iz>
 8003794:	4603      	mov	r3, r0
 8003796:	2200      	movs	r2, #0
 8003798:	4619      	mov	r1, r3
 800379a:	4620      	mov	r0, r4
 800379c:	f009 f896 	bl	800c8cc <motor_set_pwm>
			 motor_set_pwm(speedData.mainspeed->Rmotor_speed_subctl->motor_ctl, diff_get_Rmotor_values(0, -4000),MOTOR_PWM_NORMAL);
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <StartPathBuilderTask+0x1248>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	681c      	ldr	r4, [r3, #0]
 80037a8:	491e      	ldr	r1, [pc, #120]	; (8003824 <StartPathBuilderTask+0x1254>)
 80037aa:	2000      	movs	r0, #0
 80037ac:	f008 f9e0 	bl	800bb70 <diff_get_Rmotor_values>
 80037b0:	ec53 2b10 	vmov	r2, r3, d0
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	f7fd f9c6 	bl	8000b48 <__aeabi_d2iz>
 80037bc:	4603      	mov	r3, r0
 80037be:	2200      	movs	r2, #0
 80037c0:	4619      	mov	r1, r3
 80037c2:	4620      	mov	r0, r4
 80037c4:	f009 f882 	bl	800c8cc <motor_set_pwm>
			 if (idealencodersum < -100 ) {
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <StartPathBuilderTask+0x1258>)
 80037ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037d2:	f7fd f97b 	bl	8000acc <__aeabi_dcmplt>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d100      	bne.n	80037de <StartPathBuilderTask+0x120e>
				 task2data.stage = 1;
				 Lencodersum = 0;
				 Rencodersum = 0;
			 }
			 break;
 80037dc:	e010      	b.n	8003800 <StartPathBuilderTask+0x1230>
				 task2data.stage = 1;
 80037de:	4b0f      	ldr	r3, [pc, #60]	; (800381c <StartPathBuilderTask+0x124c>)
 80037e0:	2201      	movs	r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
				 Lencodersum = 0;
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				 Rencodersum = 0;
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			 break;
 80037fc:	e000      	b.n	8003800 <StartPathBuilderTask+0x1230>
			 break;
 80037fe:	bf00      	nop


	  }
	 }

    osDelay(100);
 8003800:	2064      	movs	r0, #100	; 0x64
 8003802:	f005 fc6b 	bl	80090dc <osDelay>
	 if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)){
 8003806:	f7fe bfd0 	b.w	80027aa <StartPathBuilderTask+0x1da>
 800380a:	bf00      	nop
 800380c:	f3af 8000 	nop.w
	...
 8003818:	20004ccc 	.word	0x20004ccc
 800381c:	20004c20 	.word	0x20004c20
 8003820:	fffff0b0 	.word	0xfffff0b0
 8003824:	fffff060 	.word	0xfffff060
 8003828:	c0590000 	.word	0xc0590000
 800382c:	00000000 	.word	0x00000000

08003830 <IR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR */
void IR(void *argument)
{
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	  /* Infinite loop */
		uint16_t IR_top, IR_bottom;
		char distance_top[10], distance_bottom[10];
	  for(;;)
	  {
		  HAL_ADC_Start(&hadc1);
 8003838:	4833      	ldr	r0, [pc, #204]	; (8003908 <IR+0xd8>)
 800383a:	f000 fcd3 	bl	80041e4 <HAL_ADC_Start>
		  HAL_ADC_Start(&hadc2);
 800383e:	4833      	ldr	r0, [pc, #204]	; (800390c <IR+0xdc>)
 8003840:	f000 fcd0 	bl	80041e4 <HAL_ADC_Start>

		  IR_top = HAL_ADC_GetValue(&hadc1);
 8003844:	4830      	ldr	r0, [pc, #192]	; (8003908 <IR+0xd8>)
 8003846:	f000 fd9f 	bl	8004388 <HAL_ADC_GetValue>
 800384a:	4603      	mov	r3, r0
 800384c:	84fb      	strh	r3, [r7, #38]	; 0x26
		  IR_bottom = HAL_ADC_GetValue(&hadc2);
 800384e:	482f      	ldr	r0, [pc, #188]	; (800390c <IR+0xdc>)
 8003850:	f000 fd9a 	bl	8004388 <HAL_ADC_GetValue>
 8003854:	4603      	mov	r3, r0
 8003856:	84bb      	strh	r3, [r7, #36]	; 0x24
//		  sprintf(distance_top, "%d", IR_top);
//		  sprintf(distance_bottom, "%d", IR_bottom);
//
//		  char distanceCombined[10];

		  task2data.IRdistR = ((int)IR_top*0.8) + (task2data.IRdistR*0.2) ;
 8003858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fe5a 	bl	8000514 <__aeabi_i2d>
 8003860:	a325      	add	r3, pc, #148	; (adr r3, 80038f8 <IR+0xc8>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	f7fc febf 	bl	80005e8 <__aeabi_dmul>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4614      	mov	r4, r2
 8003870:	461d      	mov	r5, r3
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <IR+0xe0>)
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fe4c 	bl	8000514 <__aeabi_i2d>
 800387c:	a320      	add	r3, pc, #128	; (adr r3, 8003900 <IR+0xd0>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f7fc feb1 	bl	80005e8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4620      	mov	r0, r4
 800388c:	4629      	mov	r1, r5
 800388e:	f7fc fcf5 	bl	800027c <__adddf3>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	f7fd f955 	bl	8000b48 <__aeabi_d2iz>
 800389e:	4603      	mov	r3, r0
 80038a0:	4a1b      	ldr	r2, [pc, #108]	; (8003910 <IR+0xe0>)
 80038a2:	62d3      	str	r3, [r2, #44]	; 0x2c
		  task2data.IRdistL = ((int)IR_bottom*0.8)+( task2data.IRdistL*0.2) ;
 80038a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fc fe34 	bl	8000514 <__aeabi_i2d>
 80038ac:	a312      	add	r3, pc, #72	; (adr r3, 80038f8 <IR+0xc8>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f7fc fe99 	bl	80005e8 <__aeabi_dmul>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4614      	mov	r4, r2
 80038bc:	461d      	mov	r5, r3
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <IR+0xe0>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe26 	bl	8000514 <__aeabi_i2d>
 80038c8:	a30d      	add	r3, pc, #52	; (adr r3, 8003900 <IR+0xd0>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc fe8b 	bl	80005e8 <__aeabi_dmul>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4620      	mov	r0, r4
 80038d8:	4629      	mov	r1, r5
 80038da:	f7fc fccf 	bl	800027c <__adddf3>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4610      	mov	r0, r2
 80038e4:	4619      	mov	r1, r3
 80038e6:	f7fd f92f 	bl	8000b48 <__aeabi_d2iz>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <IR+0xe0>)
 80038ee:	6313      	str	r3, [r2, #48]	; 0x30
		  //HAL_UART_Transmit(&huart3, (uint8_t*) distanceCombined, 10, 0xFFFF);
		  //osDelay(10);
		  //HAL_UART_Transmit(&huart3, (uint8_t*) distance_bottom, 5, 0xFFFF);


	    osDelay(50);
 80038f0:	2032      	movs	r0, #50	; 0x32
 80038f2:	f005 fbf3 	bl	80090dc <osDelay>
		  HAL_ADC_Start(&hadc1);
 80038f6:	e79f      	b.n	8003838 <IR+0x8>
 80038f8:	9999999a 	.word	0x9999999a
 80038fc:	3fe99999 	.word	0x3fe99999
 8003900:	9999999a 	.word	0x9999999a
 8003904:	3fc99999 	.word	0x3fc99999
 8003908:	20004c64 	.word	0x20004c64
 800390c:	20004b7c 	.word	0x20004b7c
 8003910:	20004c20 	.word	0x20004c20

08003914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003926:	f000 fbd5 	bl	80040d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40002000 	.word	0x40002000

08003938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800393c:	b672      	cpsid	i
}
 800393e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003940:	e7fe      	b.n	8003940 <Error_Handler+0x8>
	...

08003944 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_MspInit+0x54>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003952:	4a11      	ldr	r2, [pc, #68]	; (8003998 <HAL_MspInit+0x54>)
 8003954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003958:	6453      	str	r3, [r2, #68]	; 0x44
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <HAL_MspInit+0x54>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_MspInit+0x54>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <HAL_MspInit+0x54>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <HAL_MspInit+0x54>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003982:	2200      	movs	r2, #0
 8003984:	210f      	movs	r1, #15
 8003986:	f06f 0001 	mvn.w	r0, #1
 800398a:	f000 ffe1 	bl	8004950 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	; 0x30
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	f107 031c 	add.w	r3, r7, #28
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	609a      	str	r2, [r3, #8]
 80039b0:	60da      	str	r2, [r3, #12]
 80039b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <HAL_ADC_MspInit+0xd8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d128      	bne.n	8003a10 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	4b2d      	ldr	r3, [pc, #180]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4a2c      	ldr	r2, [pc, #176]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 80039c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039cc:	6453      	str	r3, [r2, #68]	; 0x44
 80039ce:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 80039e4:	f043 0304 	orr.w	r3, r3, #4
 80039e8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ea:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80039f6:	2306      	movs	r3, #6
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039fa:	2303      	movs	r3, #3
 80039fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a02:	f107 031c 	add.w	r3, r7, #28
 8003a06:	4619      	mov	r1, r3
 8003a08:	481c      	ldr	r0, [pc, #112]	; (8003a7c <HAL_ADC_MspInit+0xe0>)
 8003a0a:	f001 f85d 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003a0e:	e02c      	b.n	8003a6a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <HAL_ADC_MspInit+0xe4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d127      	bne.n	8003a6a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 8003a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a28:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2a:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a0e      	ldr	r2, [pc, #56]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <HAL_ADC_MspInit+0xdc>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a52:	2304      	movs	r3, #4
 8003a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a56:	2303      	movs	r3, #3
 8003a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a5e:	f107 031c 	add.w	r3, r7, #28
 8003a62:	4619      	mov	r1, r3
 8003a64:	4805      	ldr	r0, [pc, #20]	; (8003a7c <HAL_ADC_MspInit+0xe0>)
 8003a66:	f001 f82f 	bl	8004ac8 <HAL_GPIO_Init>
}
 8003a6a:	bf00      	nop
 8003a6c:	3730      	adds	r7, #48	; 0x30
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40012000 	.word	0x40012000
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40020800 	.word	0x40020800
 8003a80:	40012100 	.word	0x40012100

08003a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <HAL_I2C_MspInit+0x84>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12c      	bne.n	8003b00 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <HAL_I2C_MspInit+0x88>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <HAL_I2C_MspInit+0x88>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_I2C_MspInit+0x88>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ac8:	2312      	movs	r3, #18
 8003aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	4619      	mov	r1, r3
 8003ade:	480c      	ldr	r0, [pc, #48]	; (8003b10 <HAL_I2C_MspInit+0x8c>)
 8003ae0:	f000 fff2 	bl	8004ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_I2C_MspInit+0x88>)
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <HAL_I2C_MspInit+0x88>)
 8003aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003af2:	6413      	str	r3, [r2, #64]	; 0x40
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_I2C_MspInit+0x88>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b00:	bf00      	nop
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40005400 	.word	0x40005400
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020400 	.word	0x40020400

08003b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <HAL_TIM_Base_MspInit+0xcc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d135      	bne.n	8003ba2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4a29      	ldr	r2, [pc, #164]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	6453      	str	r3, [r2, #68]	; 0x44
 8003b46:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4a22      	ldr	r2, [pc, #136]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4817      	ldr	r0, [pc, #92]	; (8003be8 <HAL_TIM_Base_MspInit+0xd4>)
 8003b8c:	f000 ff9c 	bl	8004ac8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003b90:	2200      	movs	r2, #0
 8003b92:	2105      	movs	r1, #5
 8003b94:	201b      	movs	r0, #27
 8003b96:	f000 fedb 	bl	8004950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003b9a:	201b      	movs	r0, #27
 8003b9c:	f000 fef4 	bl	8004988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003ba0:	e01a      	b.n	8003bd8 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <HAL_TIM_Base_MspInit+0xd8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d115      	bne.n	8003bd8 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	4a0b      	ldr	r2, [pc, #44]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003bb6:	f043 0302 	orr.w	r3, r3, #2
 8003bba:	6453      	str	r3, [r2, #68]	; 0x44
 8003bbc:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <HAL_TIM_Base_MspInit+0xd0>)
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	210f      	movs	r1, #15
 8003bcc:	202d      	movs	r0, #45	; 0x2d
 8003bce:	f000 febf 	bl	8004950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003bd2:	202d      	movs	r0, #45	; 0x2d
 8003bd4:	f000 fed8 	bl	8004988 <HAL_NVIC_EnableIRQ>
}
 8003bd8:	bf00      	nop
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40010400 	.word	0x40010400

08003bf0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	; 0x30
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	f107 031c 	add.w	r3, r7, #28
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d14b      	bne.n	8003caa <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
 8003c16:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	4a3e      	ldr	r2, [pc, #248]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	6413      	str	r3, [r2, #64]	; 0x40
 8003c22:	4b3c      	ldr	r3, [pc, #240]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	4b38      	ldr	r3, [pc, #224]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3e:	4b35      	ldr	r3, [pc, #212]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4a30      	ldr	r2, [pc, #192]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c54:	f043 0302 	orr.w	r3, r3, #2
 8003c58:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5a:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7c:	f107 031c 	add.w	r3, r7, #28
 8003c80:	4619      	mov	r1, r3
 8003c82:	4825      	ldr	r0, [pc, #148]	; (8003d18 <HAL_TIM_Encoder_MspInit+0x128>)
 8003c84:	f000 ff20 	bl	8004ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c88:	2308      	movs	r3, #8
 8003c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c9c:	f107 031c 	add.w	r3, r7, #28
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	481e      	ldr	r0, [pc, #120]	; (8003d1c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003ca4:	f000 ff10 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ca8:	e030      	b.n	8003d0c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a1c      	ldr	r2, [pc, #112]	; (8003d20 <HAL_TIM_Encoder_MspInit+0x130>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d12b      	bne.n	8003d0c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cda:	f043 0302 	orr.w	r3, r3, #2
 8003cde:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cec:	23c0      	movs	r3, #192	; 0xc0
 8003cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d00:	f107 031c 	add.w	r3, r7, #28
 8003d04:	4619      	mov	r1, r3
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d08:	f000 fede 	bl	8004ac8 <HAL_GPIO_Init>
}
 8003d0c:	bf00      	nop
 8003d0e:	3730      	adds	r7, #48	; 0x30
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40020000 	.word	0x40020000
 8003d1c:	40020400 	.word	0x40020400
 8003d20:	40000800 	.word	0x40000800

08003d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <HAL_TIM_MspPostInit+0xb4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d11f      	bne.n	8003d86 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_TIM_MspPostInit+0xb8>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <HAL_TIM_MspPostInit+0xb8>)
 8003d50:	f043 0310 	orr.w	r3, r3, #16
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_TIM_MspPostInit+0xb8>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d70:	2300      	movs	r3, #0
 8003d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d74:	2301      	movs	r3, #1
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4818      	ldr	r0, [pc, #96]	; (8003de0 <HAL_TIM_MspPostInit+0xbc>)
 8003d80:	f000 fea2 	bl	8004ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d84:	e023      	b.n	8003dce <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <HAL_TIM_MspPostInit+0xc0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d11e      	bne.n	8003dce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_TIM_MspPostInit+0xb8>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <HAL_TIM_MspPostInit+0xb8>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_TIM_MspPostInit+0xb8>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8003dac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db2:	2302      	movs	r3, #2
 8003db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4807      	ldr	r0, [pc, #28]	; (8003de8 <HAL_TIM_MspPostInit+0xc4>)
 8003dca:	f000 fe7d 	bl	8004ac8 <HAL_GPIO_Init>
}
 8003dce:	bf00      	nop
 8003dd0:	3728      	adds	r7, #40	; 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40020800 	.word	0x40020800

08003dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <HAL_UART_MspInit+0x94>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d134      	bne.n	8003e78 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e34:	f043 0304 	orr.w	r3, r3, #4
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_UART_MspInit+0x98>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e58:	2307      	movs	r3, #7
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4619      	mov	r1, r3
 8003e62:	4809      	ldr	r0, [pc, #36]	; (8003e88 <HAL_UART_MspInit+0x9c>)
 8003e64:	f000 fe30 	bl	8004ac8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2105      	movs	r1, #5
 8003e6c:	2027      	movs	r0, #39	; 0x27
 8003e6e:	f000 fd6f 	bl	8004950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e72:	2027      	movs	r0, #39	; 0x27
 8003e74:	f000 fd88 	bl	8004988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e78:	bf00      	nop
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40004800 	.word	0x40004800
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020800 	.word	0x40020800

08003e8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	202d      	movs	r0, #45	; 0x2d
 8003ea2:	f000 fd55 	bl	8004950 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003ea6:	202d      	movs	r0, #45	; 0x2d
 8003ea8:	f000 fd6e 	bl	8004988 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_InitTick+0xa0>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_InitTick+0xa0>)
 8003eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eba:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_InitTick+0xa0>)
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ec8:	f107 0210 	add.w	r2, r7, #16
 8003ecc:	f107 0314 	add.w	r3, r7, #20
 8003ed0:	4611      	mov	r1, r2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f002 fbcc 	bl	8006670 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f002 fba2 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 8003edc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	4a13      	ldr	r2, [pc, #76]	; (8003f30 <HAL_InitTick+0xa4>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0c9b      	lsrs	r3, r3, #18
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_InitTick+0xa8>)
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <HAL_InitTick+0xac>)
 8003ef0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_InitTick+0xa8>)
 8003ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ef8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003efa:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_InitTick+0xa8>)
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_InitTick+0xa8>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_InitTick+0xa8>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8003f0c:	4809      	ldr	r0, [pc, #36]	; (8003f34 <HAL_InitTick+0xa8>)
 8003f0e:	f002 fbe1 	bl	80066d4 <HAL_TIM_Base_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8003f18:	4806      	ldr	r0, [pc, #24]	; (8003f34 <HAL_InitTick+0xa8>)
 8003f1a:	f002 fc2b 	bl	8006774 <HAL_TIM_Base_Start_IT>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	e000      	b.n	8003f24 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3730      	adds	r7, #48	; 0x30
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	431bde83 	.word	0x431bde83
 8003f34:	20004d88 	.word	0x20004d88
 8003f38:	40002000 	.word	0x40002000

08003f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f40:	e7fe      	b.n	8003f40 <NMI_Handler+0x4>

08003f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f46:	e7fe      	b.n	8003f46 <HardFault_Handler+0x4>

08003f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f4c:	e7fe      	b.n	8003f4c <MemManage_Handler+0x4>

08003f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f52:	e7fe      	b.n	8003f52 <BusFault_Handler+0x4>

08003f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f58:	e7fe      	b.n	8003f58 <UsageFault_Handler+0x4>

08003f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f6c:	4802      	ldr	r0, [pc, #8]	; (8003f78 <TIM1_CC_IRQHandler+0x10>)
 8003f6e:	f002 ff20 	bl	8006db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20004ce0 	.word	0x20004ce0

08003f7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f80:	4802      	ldr	r0, [pc, #8]	; (8003f8c <USART3_IRQHandler+0x10>)
 8003f82:	f004 f8d3 	bl	800812c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20004b38 	.word	0x20004b38

08003f90 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003f94:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8003f96:	f002 ff0c 	bl	8006db2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8003f9a:	4803      	ldr	r0, [pc, #12]	; (8003fa8 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8003f9c:	f002 ff09 	bl	8006db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20004aa4 	.word	0x20004aa4
 8003fa8:	20004d88 	.word	0x20004d88

08003fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <_sbrk+0x5c>)
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <_sbrk+0x60>)
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fc0:	4b13      	ldr	r3, [pc, #76]	; (8004010 <_sbrk+0x64>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <_sbrk+0x64>)
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <_sbrk+0x68>)
 8003fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <_sbrk+0x64>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d207      	bcs.n	8003fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fdc:	f00a fbf4 	bl	800e7c8 <__errno>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	220c      	movs	r2, #12
 8003fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fea:	e009      	b.n	8004000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <_sbrk+0x64>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <_sbrk+0x64>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	4a05      	ldr	r2, [pc, #20]	; (8004010 <_sbrk+0x64>)
 8003ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20020000 	.word	0x20020000
 800400c:	00000400 	.word	0x00000400
 8004010:	20000098 	.word	0x20000098
 8004014:	20005228 	.word	0x20005228

08004018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <SystemInit+0x20>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	4a05      	ldr	r2, [pc, #20]	; (8004038 <SystemInit+0x20>)
 8004024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000ed00 	.word	0xe000ed00

0800403c <Reset_Handler>:
 800403c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004074 <LoopFillZerobss+0x12>
 8004040:	480d      	ldr	r0, [pc, #52]	; (8004078 <LoopFillZerobss+0x16>)
 8004042:	490e      	ldr	r1, [pc, #56]	; (800407c <LoopFillZerobss+0x1a>)
 8004044:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <LoopFillZerobss+0x1e>)
 8004046:	2300      	movs	r3, #0
 8004048:	e002      	b.n	8004050 <LoopCopyDataInit>

0800404a <CopyDataInit>:
 800404a:	58d4      	ldr	r4, [r2, r3]
 800404c:	50c4      	str	r4, [r0, r3]
 800404e:	3304      	adds	r3, #4

08004050 <LoopCopyDataInit>:
 8004050:	18c4      	adds	r4, r0, r3
 8004052:	428c      	cmp	r4, r1
 8004054:	d3f9      	bcc.n	800404a <CopyDataInit>
 8004056:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <LoopFillZerobss+0x22>)
 8004058:	4c0b      	ldr	r4, [pc, #44]	; (8004088 <LoopFillZerobss+0x26>)
 800405a:	2300      	movs	r3, #0
 800405c:	e001      	b.n	8004062 <LoopFillZerobss>

0800405e <FillZerobss>:
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	3204      	adds	r2, #4

08004062 <LoopFillZerobss>:
 8004062:	42a2      	cmp	r2, r4
 8004064:	d3fb      	bcc.n	800405e <FillZerobss>
 8004066:	f7ff ffd7 	bl	8004018 <SystemInit>
 800406a:	f00a fbb3 	bl	800e7d4 <__libc_init_array>
 800406e:	f7fd fad5 	bl	800161c <main>
 8004072:	4770      	bx	lr
 8004074:	20020000 	.word	0x20020000
 8004078:	20000000 	.word	0x20000000
 800407c:	20000078 	.word	0x20000078
 8004080:	08011ea0 	.word	0x08011ea0
 8004084:	20000078 	.word	0x20000078
 8004088:	20005224 	.word	0x20005224

0800408c <ADC_IRQHandler>:
 800408c:	e7fe      	b.n	800408c <ADC_IRQHandler>
	...

08004090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_Init+0x40>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0d      	ldr	r2, [pc, #52]	; (80040d0 <HAL_Init+0x40>)
 800409a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800409e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_Init+0x40>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_Init+0x40>)
 80040a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ac:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <HAL_Init+0x40>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <HAL_Init+0x40>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b8:	2003      	movs	r0, #3
 80040ba:	f000 fc3e 	bl	800493a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040be:	200f      	movs	r0, #15
 80040c0:	f7ff fee4 	bl	8003e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c4:	f7ff fc3e 	bl	8003944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023c00 	.word	0x40023c00

080040d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_IncTick+0x20>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <HAL_IncTick+0x24>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4413      	add	r3, r2
 80040e4:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <HAL_IncTick+0x24>)
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000008 	.word	0x20000008
 80040f8:	20004dd0 	.word	0x20004dd0

080040fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_GetTick+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20004dd0 	.word	0x20004dd0

08004114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800411c:	f7ff ffee 	bl	80040fc <HAL_GetTick>
 8004120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412c:	d005      	beq.n	800413a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800412e:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_Delay+0x44>)
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800413a:	bf00      	nop
 800413c:	f7ff ffde 	bl	80040fc <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d8f7      	bhi.n	800413c <HAL_Delay+0x28>
  {
  }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000008 	.word	0x20000008

0800415c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e033      	b.n	80041da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff fc0e 	bl	800399c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d118      	bne.n	80041cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041a2:	f023 0302 	bic.w	r3, r3, #2
 80041a6:	f043 0202 	orr.w	r2, r3, #2
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa1a 	bl	80045e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
 80041ca:	e001      	b.n	80041d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_ADC_Start+0x1a>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e0b2      	b.n	8004364 <HAL_ADC_Start+0x180>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b01      	cmp	r3, #1
 8004212:	d018      	beq.n	8004246 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004224:	4b52      	ldr	r3, [pc, #328]	; (8004370 <HAL_ADC_Start+0x18c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a52      	ldr	r2, [pc, #328]	; (8004374 <HAL_ADC_Start+0x190>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	0c9a      	lsrs	r2, r3, #18
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004238:	e002      	b.n	8004240 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3b01      	subs	r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f9      	bne.n	800423a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b01      	cmp	r3, #1
 8004252:	d17a      	bne.n	800434a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800427e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004292:	d106      	bne.n	80042a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f023 0206 	bic.w	r2, r3, #6
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
 80042a0:	e002      	b.n	80042a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b0:	4b31      	ldr	r3, [pc, #196]	; (8004378 <HAL_ADC_Start+0x194>)
 80042b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80042bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d12a      	bne.n	8004320 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a2b      	ldr	r2, [pc, #172]	; (800437c <HAL_ADC_Start+0x198>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d015      	beq.n	8004300 <HAL_ADC_Start+0x11c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a29      	ldr	r2, [pc, #164]	; (8004380 <HAL_ADC_Start+0x19c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d105      	bne.n	80042ea <HAL_ADC_Start+0x106>
 80042de:	4b26      	ldr	r3, [pc, #152]	; (8004378 <HAL_ADC_Start+0x194>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a25      	ldr	r2, [pc, #148]	; (8004384 <HAL_ADC_Start+0x1a0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d136      	bne.n	8004362 <HAL_ADC_Start+0x17e>
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_ADC_Start+0x194>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d130      	bne.n	8004362 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d129      	bne.n	8004362 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	e020      	b.n	8004362 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a15      	ldr	r2, [pc, #84]	; (800437c <HAL_ADC_Start+0x198>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d11b      	bne.n	8004362 <HAL_ADC_Start+0x17e>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d114      	bne.n	8004362 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	e00b      	b.n	8004362 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0210 	orr.w	r2, r3, #16
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435a:	f043 0201 	orr.w	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	20000000 	.word	0x20000000
 8004374:	431bde83 	.word	0x431bde83
 8004378:	40012300 	.word	0x40012300
 800437c:	40012000 	.word	0x40012000
 8004380:	40012100 	.word	0x40012100
 8004384:	40012200 	.word	0x40012200

08004388 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x1c>
 80043bc:	2302      	movs	r3, #2
 80043be:	e105      	b.n	80045cc <HAL_ADC_ConfigChannel+0x228>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	d925      	bls.n	800441c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68d9      	ldr	r1, [r3, #12]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	4613      	mov	r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	4413      	add	r3, r2
 80043e4:	3b1e      	subs	r3, #30
 80043e6:	2207      	movs	r2, #7
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43da      	mvns	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	400a      	ands	r2, r1
 80043f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68d9      	ldr	r1, [r3, #12]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	4618      	mov	r0, r3
 8004408:	4603      	mov	r3, r0
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	4403      	add	r3, r0
 800440e:	3b1e      	subs	r3, #30
 8004410:	409a      	lsls	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	60da      	str	r2, [r3, #12]
 800441a:	e022      	b.n	8004462 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6919      	ldr	r1, [r3, #16]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	4613      	mov	r3, r2
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	4413      	add	r3, r2
 8004430:	2207      	movs	r2, #7
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43da      	mvns	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	400a      	ands	r2, r1
 800443e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6919      	ldr	r1, [r3, #16]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	4618      	mov	r0, r3
 8004452:	4603      	mov	r3, r0
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4403      	add	r3, r0
 8004458:	409a      	lsls	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d824      	bhi.n	80044b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	3b05      	subs	r3, #5
 800447c:	221f      	movs	r2, #31
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	400a      	ands	r2, r1
 800448a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	4618      	mov	r0, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4413      	add	r3, r2
 80044a4:	3b05      	subs	r3, #5
 80044a6:	fa00 f203 	lsl.w	r2, r0, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
 80044b2:	e04c      	b.n	800454e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d824      	bhi.n	8004506 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	3b23      	subs	r3, #35	; 0x23
 80044ce:	221f      	movs	r2, #31
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	43da      	mvns	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	400a      	ands	r2, r1
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	3b23      	subs	r3, #35	; 0x23
 80044f8:	fa00 f203 	lsl.w	r2, r0, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
 8004504:	e023      	b.n	800454e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	3b41      	subs	r3, #65	; 0x41
 8004518:	221f      	movs	r2, #31
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	400a      	ands	r2, r1
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	4618      	mov	r0, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	3b41      	subs	r3, #65	; 0x41
 8004542:	fa00 f203 	lsl.w	r2, r0, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800454e:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <HAL_ADC_ConfigChannel+0x234>)
 8004550:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	; (80045dc <HAL_ADC_ConfigChannel+0x238>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x1cc>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b12      	cmp	r3, #18
 8004562:	d105      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a19      	ldr	r2, [pc, #100]	; (80045dc <HAL_ADC_ConfigChannel+0x238>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d123      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x21e>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b10      	cmp	r3, #16
 8004580:	d003      	beq.n	800458a <HAL_ADC_ConfigChannel+0x1e6>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b11      	cmp	r3, #17
 8004588:	d11b      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b10      	cmp	r3, #16
 800459c:	d111      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800459e:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_ADC_ConfigChannel+0x23c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <HAL_ADC_ConfigChannel+0x240>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	0c9a      	lsrs	r2, r3, #18
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045b4:	e002      	b.n	80045bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f9      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	40012300 	.word	0x40012300
 80045dc:	40012000 	.word	0x40012000
 80045e0:	20000000 	.word	0x20000000
 80045e4:	431bde83 	.word	0x431bde83

080045e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045f0:	4b79      	ldr	r3, [pc, #484]	; (80047d8 <ADC_Init+0x1f0>)
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800461c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	021a      	lsls	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6899      	ldr	r1, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	4a58      	ldr	r2, [pc, #352]	; (80047dc <ADC_Init+0x1f4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800468e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6899      	ldr	r1, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6899      	ldr	r1, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	609a      	str	r2, [r3, #8]
 80046c4:	e00f      	b.n	80046e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0202 	bic.w	r2, r2, #2
 80046f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6899      	ldr	r1, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7e1b      	ldrb	r3, [r3, #24]
 8004700:	005a      	lsls	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004722:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004732:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	3b01      	subs	r3, #1
 8004740:	035a      	lsls	r2, r3, #13
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	e007      	b.n	800475c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800476a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	3b01      	subs	r3, #1
 8004778:	051a      	lsls	r2, r3, #20
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6899      	ldr	r1, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800479e:	025a      	lsls	r2, r3, #9
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6899      	ldr	r1, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	029a      	lsls	r2, r3, #10
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	40012300 	.word	0x40012300
 80047dc:	0f000001 	.word	0x0f000001

080047e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <__NVIC_SetPriorityGrouping+0x44>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047fc:	4013      	ands	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800480c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004812:	4a04      	ldr	r2, [pc, #16]	; (8004824 <__NVIC_SetPriorityGrouping+0x44>)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	60d3      	str	r3, [r2, #12]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	e000ed00 	.word	0xe000ed00

08004828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800482c:	4b04      	ldr	r3, [pc, #16]	; (8004840 <__NVIC_GetPriorityGrouping+0x18>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	0a1b      	lsrs	r3, r3, #8
 8004832:	f003 0307 	and.w	r3, r3, #7
}
 8004836:	4618      	mov	r0, r3
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800484e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004852:	2b00      	cmp	r3, #0
 8004854:	db0b      	blt.n	800486e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	f003 021f 	and.w	r2, r3, #31
 800485c:	4907      	ldr	r1, [pc, #28]	; (800487c <__NVIC_EnableIRQ+0x38>)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	2001      	movs	r0, #1
 8004866:	fa00 f202 	lsl.w	r2, r0, r2
 800486a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000e100 	.word	0xe000e100

08004880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	6039      	str	r1, [r7, #0]
 800488a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004890:	2b00      	cmp	r3, #0
 8004892:	db0a      	blt.n	80048aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	490c      	ldr	r1, [pc, #48]	; (80048cc <__NVIC_SetPriority+0x4c>)
 800489a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489e:	0112      	lsls	r2, r2, #4
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	440b      	add	r3, r1
 80048a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a8:	e00a      	b.n	80048c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	4908      	ldr	r1, [pc, #32]	; (80048d0 <__NVIC_SetPriority+0x50>)
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	3b04      	subs	r3, #4
 80048b8:	0112      	lsls	r2, r2, #4
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	440b      	add	r3, r1
 80048be:	761a      	strb	r2, [r3, #24]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	e000e100 	.word	0xe000e100
 80048d0:	e000ed00 	.word	0xe000ed00

080048d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f1c3 0307 	rsb	r3, r3, #7
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	bf28      	it	cs
 80048f2:	2304      	movcs	r3, #4
 80048f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3304      	adds	r3, #4
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d902      	bls.n	8004904 <NVIC_EncodePriority+0x30>
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3b03      	subs	r3, #3
 8004902:	e000      	b.n	8004906 <NVIC_EncodePriority+0x32>
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	401a      	ands	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800491c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	43d9      	mvns	r1, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800492c:	4313      	orrs	r3, r2
         );
}
 800492e:	4618      	mov	r0, r3
 8004930:	3724      	adds	r7, #36	; 0x24
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff ff4c 	bl	80047e0 <__NVIC_SetPriorityGrouping>
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004962:	f7ff ff61 	bl	8004828 <__NVIC_GetPriorityGrouping>
 8004966:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68b9      	ldr	r1, [r7, #8]
 800496c:	6978      	ldr	r0, [r7, #20]
 800496e:	f7ff ffb1 	bl	80048d4 <NVIC_EncodePriority>
 8004972:	4602      	mov	r2, r0
 8004974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004978:	4611      	mov	r1, r2
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff ff80 	bl	8004880 <__NVIC_SetPriority>
}
 8004980:	bf00      	nop
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff ff54 	bl	8004844 <__NVIC_EnableIRQ>
}
 800499c:	bf00      	nop
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049b2:	f7ff fba3 	bl	80040fc <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d008      	beq.n	80049d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e052      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0216 	bic.w	r2, r2, #22
 80049e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_DMA_Abort+0x62>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0208 	bic.w	r2, r2, #8
 8004a14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a26:	e013      	b.n	8004a50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a28:	f7ff fb68 	bl	80040fc <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	d90c      	bls.n	8004a50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e015      	b.n	8004a7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e4      	bne.n	8004a28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	223f      	movs	r2, #63	; 0x3f
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e00c      	b.n	8004abc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2205      	movs	r2, #5
 8004aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e16b      	b.n	8004dbc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4013      	ands	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	f040 815a 	bne.w	8004db6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d005      	beq.n	8004b1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d130      	bne.n	8004b7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	2203      	movs	r2, #3
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b50:	2201      	movs	r2, #1
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 0201 	and.w	r2, r3, #1
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d017      	beq.n	8004bb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	2203      	movs	r2, #3
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d123      	bne.n	8004c0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	08da      	lsrs	r2, r3, #3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3208      	adds	r2, #8
 8004bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	220f      	movs	r2, #15
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	08da      	lsrs	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3208      	adds	r2, #8
 8004c06:	69b9      	ldr	r1, [r7, #24]
 8004c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	2203      	movs	r2, #3
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4013      	ands	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 0203 	and.w	r2, r3, #3
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80b4 	beq.w	8004db6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	4b60      	ldr	r3, [pc, #384]	; (8004dd4 <HAL_GPIO_Init+0x30c>)
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	4a5f      	ldr	r2, [pc, #380]	; (8004dd4 <HAL_GPIO_Init+0x30c>)
 8004c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c5e:	4b5d      	ldr	r3, [pc, #372]	; (8004dd4 <HAL_GPIO_Init+0x30c>)
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c6a:	4a5b      	ldr	r2, [pc, #364]	; (8004dd8 <HAL_GPIO_Init+0x310>)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	089b      	lsrs	r3, r3, #2
 8004c70:	3302      	adds	r3, #2
 8004c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	220f      	movs	r2, #15
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a52      	ldr	r2, [pc, #328]	; (8004ddc <HAL_GPIO_Init+0x314>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d02b      	beq.n	8004cee <HAL_GPIO_Init+0x226>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a51      	ldr	r2, [pc, #324]	; (8004de0 <HAL_GPIO_Init+0x318>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d025      	beq.n	8004cea <HAL_GPIO_Init+0x222>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a50      	ldr	r2, [pc, #320]	; (8004de4 <HAL_GPIO_Init+0x31c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01f      	beq.n	8004ce6 <HAL_GPIO_Init+0x21e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a4f      	ldr	r2, [pc, #316]	; (8004de8 <HAL_GPIO_Init+0x320>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d019      	beq.n	8004ce2 <HAL_GPIO_Init+0x21a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a4e      	ldr	r2, [pc, #312]	; (8004dec <HAL_GPIO_Init+0x324>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_GPIO_Init+0x216>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a4d      	ldr	r2, [pc, #308]	; (8004df0 <HAL_GPIO_Init+0x328>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00d      	beq.n	8004cda <HAL_GPIO_Init+0x212>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a4c      	ldr	r2, [pc, #304]	; (8004df4 <HAL_GPIO_Init+0x32c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d007      	beq.n	8004cd6 <HAL_GPIO_Init+0x20e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4b      	ldr	r2, [pc, #300]	; (8004df8 <HAL_GPIO_Init+0x330>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d101      	bne.n	8004cd2 <HAL_GPIO_Init+0x20a>
 8004cce:	2307      	movs	r3, #7
 8004cd0:	e00e      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	e00c      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004cd6:	2306      	movs	r3, #6
 8004cd8:	e00a      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004cda:	2305      	movs	r3, #5
 8004cdc:	e008      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004cde:	2304      	movs	r3, #4
 8004ce0:	e006      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e004      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e002      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <HAL_GPIO_Init+0x228>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	f002 0203 	and.w	r2, r2, #3
 8004cf6:	0092      	lsls	r2, r2, #2
 8004cf8:	4093      	lsls	r3, r2
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d00:	4935      	ldr	r1, [pc, #212]	; (8004dd8 <HAL_GPIO_Init+0x310>)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	089b      	lsrs	r3, r3, #2
 8004d06:	3302      	adds	r3, #2
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d32:	4a32      	ldr	r2, [pc, #200]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d38:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d5c:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d62:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d86:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004db0:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <HAL_GPIO_Init+0x334>)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3301      	adds	r3, #1
 8004dba:	61fb      	str	r3, [r7, #28]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	2b0f      	cmp	r3, #15
 8004dc0:	f67f ae90 	bls.w	8004ae4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	bf00      	nop
 8004dc8:	3724      	adds	r7, #36	; 0x24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40013800 	.word	0x40013800
 8004ddc:	40020000 	.word	0x40020000
 8004de0:	40020400 	.word	0x40020400
 8004de4:	40020800 	.word	0x40020800
 8004de8:	40020c00 	.word	0x40020c00
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40021400 	.word	0x40021400
 8004df4:	40021800 	.word	0x40021800
 8004df8:	40021c00 	.word	0x40021c00
 8004dfc:	40013c00 	.word	0x40013c00

08004e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	887b      	ldrh	r3, [r7, #2]
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	e001      	b.n	8004e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	807b      	strh	r3, [r7, #2]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e40:	787b      	ldrb	r3, [r7, #1]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e46:	887a      	ldrh	r2, [r7, #2]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e4c:	e003      	b.n	8004e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e4e:	887b      	ldrh	r3, [r7, #2]
 8004e50:	041a      	lsls	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	619a      	str	r2, [r3, #24]
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e12b      	b.n	80050ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fe fdfa 	bl	8003a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f001 fbaa 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4a81      	ldr	r2, [pc, #516]	; (80050d8 <HAL_I2C_Init+0x274>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d807      	bhi.n	8004ee8 <HAL_I2C_Init+0x84>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a80      	ldr	r2, [pc, #512]	; (80050dc <HAL_I2C_Init+0x278>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bf94      	ite	ls
 8004ee0:	2301      	movls	r3, #1
 8004ee2:	2300      	movhi	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	e006      	b.n	8004ef6 <HAL_I2C_Init+0x92>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4a7d      	ldr	r2, [pc, #500]	; (80050e0 <HAL_I2C_Init+0x27c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bf94      	ite	ls
 8004ef0:	2301      	movls	r3, #1
 8004ef2:	2300      	movhi	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e0e7      	b.n	80050ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a78      	ldr	r2, [pc, #480]	; (80050e4 <HAL_I2C_Init+0x280>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0c9b      	lsrs	r3, r3, #18
 8004f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a6a      	ldr	r2, [pc, #424]	; (80050d8 <HAL_I2C_Init+0x274>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d802      	bhi.n	8004f38 <HAL_I2C_Init+0xd4>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	3301      	adds	r3, #1
 8004f36:	e009      	b.n	8004f4c <HAL_I2C_Init+0xe8>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	4a69      	ldr	r2, [pc, #420]	; (80050e8 <HAL_I2C_Init+0x284>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	099b      	lsrs	r3, r3, #6
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	495c      	ldr	r1, [pc, #368]	; (80050d8 <HAL_I2C_Init+0x274>)
 8004f68:	428b      	cmp	r3, r1
 8004f6a:	d819      	bhi.n	8004fa0 <HAL_I2C_Init+0x13c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1e59      	subs	r1, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f7a:	1c59      	adds	r1, r3, #1
 8004f7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f80:	400b      	ands	r3, r1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <HAL_I2C_Init+0x138>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1e59      	subs	r1, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f94:	3301      	adds	r3, #1
 8004f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9a:	e051      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	e04f      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d111      	bne.n	8004fcc <HAL_I2C_Init+0x168>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	1e58      	subs	r0, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6859      	ldr	r1, [r3, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	440b      	add	r3, r1
 8004fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	e012      	b.n	8004ff2 <HAL_I2C_Init+0x18e>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1e58      	subs	r0, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	0099      	lsls	r1, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_I2C_Init+0x196>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e022      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10e      	bne.n	8005020 <HAL_I2C_Init+0x1bc>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1e58      	subs	r0, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	440b      	add	r3, r1
 8005010:	fbb0 f3f3 	udiv	r3, r0, r3
 8005014:	3301      	adds	r3, #1
 8005016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501e:	e00f      	b.n	8005040 <HAL_I2C_Init+0x1dc>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1e58      	subs	r0, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	0099      	lsls	r1, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	fbb0 f3f3 	udiv	r3, r0, r3
 8005036:	3301      	adds	r3, #1
 8005038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	6809      	ldr	r1, [r1, #0]
 8005044:	4313      	orrs	r3, r2
 8005046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69da      	ldr	r2, [r3, #28]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800506e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6911      	ldr	r1, [r2, #16]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68d2      	ldr	r2, [r2, #12]
 800507a:	4311      	orrs	r1, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	430b      	orrs	r3, r1
 8005082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	000186a0 	.word	0x000186a0
 80050dc:	001e847f 	.word	0x001e847f
 80050e0:	003d08ff 	.word	0x003d08ff
 80050e4:	431bde83 	.word	0x431bde83
 80050e8:	10624dd3 	.word	0x10624dd3

080050ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	607a      	str	r2, [r7, #4]
 80050f6:	461a      	mov	r2, r3
 80050f8:	460b      	mov	r3, r1
 80050fa:	817b      	strh	r3, [r7, #10]
 80050fc:	4613      	mov	r3, r2
 80050fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7fe fffc 	bl	80040fc <HAL_GetTick>
 8005104:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b20      	cmp	r3, #32
 8005110:	f040 80e0 	bne.w	80052d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	2319      	movs	r3, #25
 800511a:	2201      	movs	r2, #1
 800511c:	4970      	ldr	r1, [pc, #448]	; (80052e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fc58 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
 800512c:	e0d3      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_I2C_Master_Transmit+0x50>
 8005138:	2302      	movs	r3, #2
 800513a:	e0cc      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d007      	beq.n	8005162 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0201 	orr.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2221      	movs	r2, #33	; 0x21
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2210      	movs	r2, #16
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	893a      	ldrh	r2, [r7, #8]
 8005192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a50      	ldr	r2, [pc, #320]	; (80052e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80051a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051a4:	8979      	ldrh	r1, [r7, #10]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fac2 	bl	8005734 <I2C_MasterRequestWrite>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e08d      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051d0:	e066      	b.n	80052a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	6a39      	ldr	r1, [r7, #32]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fcd2 	bl	8005b80 <I2C_WaitOnTXEFlagUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00d      	beq.n	80051fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d107      	bne.n	80051fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e06b      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	781a      	ldrb	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b04      	cmp	r3, #4
 800523a:	d11b      	bne.n	8005274 <HAL_I2C_Master_Transmit+0x188>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d017      	beq.n	8005274 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	781a      	ldrb	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	6a39      	ldr	r1, [r7, #32]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fcc2 	bl	8005c02 <I2C_WaitOnBTFFlagUntilTimeout>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	2b04      	cmp	r3, #4
 800528a:	d107      	bne.n	800529c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e01a      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d194      	bne.n	80051d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e000      	b.n	80052d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	00100002 	.word	0x00100002
 80052e4:	ffff0000 	.word	0xffff0000

080052e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	; 0x30
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	461a      	mov	r2, r3
 80052f4:	460b      	mov	r3, r1
 80052f6:	817b      	strh	r3, [r7, #10]
 80052f8:	4613      	mov	r3, r2
 80052fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052fc:	f7fe fefe 	bl	80040fc <HAL_GetTick>
 8005300:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b20      	cmp	r3, #32
 800530c:	f040 820b 	bne.w	8005726 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	2319      	movs	r3, #25
 8005316:	2201      	movs	r2, #1
 8005318:	497c      	ldr	r1, [pc, #496]	; (800550c <HAL_I2C_Master_Receive+0x224>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fb5a 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005326:	2302      	movs	r3, #2
 8005328:	e1fe      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_I2C_Master_Receive+0x50>
 8005334:	2302      	movs	r3, #2
 8005336:	e1f7      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b01      	cmp	r3, #1
 800534c:	d007      	beq.n	800535e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800536c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2222      	movs	r2, #34	; 0x22
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2210      	movs	r2, #16
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	893a      	ldrh	r2, [r7, #8]
 800538e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4a5c      	ldr	r2, [pc, #368]	; (8005510 <HAL_I2C_Master_Receive+0x228>)
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053a0:	8979      	ldrh	r1, [r7, #10]
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fa46 	bl	8005838 <I2C_MasterRequestRead>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e1b8      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d113      	bne.n	80053e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	623b      	str	r3, [r7, #32]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	623b      	str	r3, [r7, #32]
 80053d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	e18c      	b.n	8005700 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d11b      	bne.n	8005426 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	61fb      	str	r3, [r7, #28]
 8005412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e16c      	b.n	8005700 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542a:	2b02      	cmp	r3, #2
 800542c:	d11b      	bne.n	8005466 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	e14c      	b.n	8005700 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005474:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005476:	2300      	movs	r3, #0
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800548c:	e138      	b.n	8005700 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005492:	2b03      	cmp	r3, #3
 8005494:	f200 80f1 	bhi.w	800567a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549c:	2b01      	cmp	r3, #1
 800549e:	d123      	bne.n	80054e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fbed 	bl	8005c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e139      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691a      	ldr	r2, [r3, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e6:	e10b      	b.n	8005700 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d14e      	bne.n	800558e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	2200      	movs	r2, #0
 80054f8:	4906      	ldr	r1, [pc, #24]	; (8005514 <HAL_I2C_Master_Receive+0x22c>)
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fa6a 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e10e      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
 800550a:	bf00      	nop
 800550c:	00100002 	.word	0x00100002
 8005510:	ffff0000 	.word	0xffff0000
 8005514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800558c:	e0b8      	b.n	8005700 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	2200      	movs	r2, #0
 8005596:	4966      	ldr	r1, [pc, #408]	; (8005730 <HAL_I2C_Master_Receive+0x448>)
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fa1b 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0bf      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	2200      	movs	r2, #0
 80055f2:	494f      	ldr	r1, [pc, #316]	; (8005730 <HAL_I2C_Master_Receive+0x448>)
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f9ed 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e091      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005678:	e042      	b.n	8005700 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800567a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fb00 	bl	8005c84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e04c      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d118      	bne.n	8005700 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	f47f aec2 	bne.w	800548e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	e000      	b.n	8005728 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005726:	2302      	movs	r3, #2
  }
}
 8005728:	4618      	mov	r0, r3
 800572a:	3728      	adds	r7, #40	; 0x28
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	00010004 	.word	0x00010004

08005734 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	607a      	str	r2, [r7, #4]
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	460b      	mov	r3, r1
 8005742:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d006      	beq.n	800575e <I2C_MasterRequestWrite+0x2a>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d003      	beq.n	800575e <I2C_MasterRequestWrite+0x2a>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800575c:	d108      	bne.n	8005770 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e00b      	b.n	8005788 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	2b12      	cmp	r3, #18
 8005776:	d107      	bne.n	8005788 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005786:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f91d 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ae:	d103      	bne.n	80057b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e035      	b.n	8005828 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057c4:	d108      	bne.n	80057d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057c6:	897b      	ldrh	r3, [r7, #10]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057d4:	611a      	str	r2, [r3, #16]
 80057d6:	e01b      	b.n	8005810 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057d8:	897b      	ldrh	r3, [r7, #10]
 80057da:	11db      	asrs	r3, r3, #7
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	f003 0306 	and.w	r3, r3, #6
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f063 030f 	orn	r3, r3, #15
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	490e      	ldr	r1, [pc, #56]	; (8005830 <I2C_MasterRequestWrite+0xfc>)
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f943 	bl	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e010      	b.n	8005828 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005806:	897b      	ldrh	r3, [r7, #10]
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4907      	ldr	r1, [pc, #28]	; (8005834 <I2C_MasterRequestWrite+0x100>)
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f933 	bl	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	00010008 	.word	0x00010008
 8005834:	00010002 	.word	0x00010002

08005838 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	460b      	mov	r3, r1
 8005846:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800585c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b08      	cmp	r3, #8
 8005862:	d006      	beq.n	8005872 <I2C_MasterRequestRead+0x3a>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d003      	beq.n	8005872 <I2C_MasterRequestRead+0x3a>
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005870:	d108      	bne.n	8005884 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e00b      	b.n	800589c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005888:	2b11      	cmp	r3, #17
 800588a:	d107      	bne.n	800589c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800589a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f893 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00d      	beq.n	80058d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c2:	d103      	bne.n	80058cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e079      	b.n	80059c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058d8:	d108      	bne.n	80058ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	f043 0301 	orr.w	r3, r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]
 80058ea:	e05f      	b.n	80059ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058ec:	897b      	ldrh	r3, [r7, #10]
 80058ee:	11db      	asrs	r3, r3, #7
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	f003 0306 	and.w	r3, r3, #6
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f063 030f 	orn	r3, r3, #15
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	4930      	ldr	r1, [pc, #192]	; (80059cc <I2C_MasterRequestRead+0x194>)
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f8b9 	bl	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e054      	b.n	80059c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800591a:	897b      	ldrh	r3, [r7, #10]
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4929      	ldr	r1, [pc, #164]	; (80059d0 <I2C_MasterRequestRead+0x198>)
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f8a9 	bl	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e044      	b.n	80059c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800595e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f831 	bl	80059d4 <I2C_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00d      	beq.n	8005994 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005986:	d103      	bne.n	8005990 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e017      	b.n	80059c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005994:	897b      	ldrh	r3, [r7, #10]
 8005996:	11db      	asrs	r3, r3, #7
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 0306 	and.w	r3, r3, #6
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f063 030e 	orn	r3, r3, #14
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4907      	ldr	r1, [pc, #28]	; (80059d0 <I2C_MasterRequestRead+0x198>)
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f865 	bl	8005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	00010008 	.word	0x00010008
 80059d0:	00010002 	.word	0x00010002

080059d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	603b      	str	r3, [r7, #0]
 80059e0:	4613      	mov	r3, r2
 80059e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059e4:	e025      	b.n	8005a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ec:	d021      	beq.n	8005a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ee:	f7fe fb85 	bl	80040fc <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d302      	bcc.n	8005a04 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d116      	bne.n	8005a32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e023      	b.n	8005a7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	0c1b      	lsrs	r3, r3, #16
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d10d      	bne.n	8005a58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	43da      	mvns	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bf0c      	ite	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	2300      	movne	r3, #0
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	e00c      	b.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	43da      	mvns	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4013      	ands	r3, r2
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d0b6      	beq.n	80059e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a90:	e051      	b.n	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa0:	d123      	bne.n	8005aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f043 0204 	orr.w	r2, r3, #4
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e046      	b.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af0:	d021      	beq.n	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af2:	f7fe fb03 	bl	80040fc <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d302      	bcc.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d116      	bne.n	8005b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2220      	movs	r2, #32
 8005b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f043 0220 	orr.w	r2, r3, #32
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e020      	b.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	0c1b      	lsrs	r3, r3, #16
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d10c      	bne.n	8005b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	43da      	mvns	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bf14      	ite	ne
 8005b52:	2301      	movne	r3, #1
 8005b54:	2300      	moveq	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	e00b      	b.n	8005b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	43da      	mvns	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4013      	ands	r3, r2
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d18d      	bne.n	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b8c:	e02d      	b.n	8005bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f8ce 	bl	8005d30 <I2C_IsAcknowledgeFailed>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e02d      	b.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba4:	d021      	beq.n	8005bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba6:	f7fe faa9 	bl	80040fc <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d302      	bcc.n	8005bbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d116      	bne.n	8005bea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f043 0220 	orr.w	r2, r3, #32
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e007      	b.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b80      	cmp	r3, #128	; 0x80
 8005bf6:	d1ca      	bne.n	8005b8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c0e:	e02d      	b.n	8005c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f88d 	bl	8005d30 <I2C_IsAcknowledgeFailed>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e02d      	b.n	8005c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c26:	d021      	beq.n	8005c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c28:	f7fe fa68 	bl	80040fc <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d302      	bcc.n	8005c3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d116      	bne.n	8005c6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e007      	b.n	8005c7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d1ca      	bne.n	8005c10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c90:	e042      	b.n	8005d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0310 	and.w	r3, r3, #16
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d119      	bne.n	8005cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0210 	mvn.w	r2, #16
 8005ca8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e029      	b.n	8005d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd4:	f7fe fa12 	bl	80040fc <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d116      	bne.n	8005d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	f043 0220 	orr.w	r2, r3, #32
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e007      	b.n	8005d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b40      	cmp	r3, #64	; 0x40
 8005d24:	d1b5      	bne.n	8005c92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d46:	d11b      	bne.n	8005d80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	f043 0204 	orr.w	r2, r3, #4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e000      	b.n	8005d82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005da2:	687b      	ldr	r3, [r7, #4]
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	420e0020 	.word	0x420e0020
 8005db4:	40007000 	.word	0x40007000

08005db8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005dc4:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <HAL_PWR_DisableBkUpAccess+0x24>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005dca:	687b      	ldr	r3, [r7, #4]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	420e0020 	.word	0x420e0020
 8005ddc:	40007000 	.word	0x40007000

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e264      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d075      	beq.n	8005eea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dfe:	4ba3      	ldr	r3, [pc, #652]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d00c      	beq.n	8005e24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e0a:	4ba0      	ldr	r3, [pc, #640]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d112      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e16:	4b9d      	ldr	r3, [pc, #628]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e22:	d10b      	bne.n	8005e3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e24:	4b99      	ldr	r3, [pc, #612]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d05b      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x108>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d157      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e23f      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e44:	d106      	bne.n	8005e54 <HAL_RCC_OscConfig+0x74>
 8005e46:	4b91      	ldr	r3, [pc, #580]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a90      	ldr	r2, [pc, #576]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e01d      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b8b      	ldr	r3, [pc, #556]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a8a      	ldr	r2, [pc, #552]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b88      	ldr	r3, [pc, #544]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a87      	ldr	r2, [pc, #540]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_OscConfig+0xb0>
 8005e78:	4b84      	ldr	r3, [pc, #528]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a83      	ldr	r2, [pc, #524]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e82:	6013      	str	r3, [r2, #0]
 8005e84:	4b81      	ldr	r3, [pc, #516]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a80      	ldr	r2, [pc, #512]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d013      	beq.n	8005ec0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fe f930 	bl	80040fc <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fe f92c 	bl	80040fc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e204      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb2:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0f0      	beq.n	8005ea0 <HAL_RCC_OscConfig+0xc0>
 8005ebe:	e014      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec0:	f7fe f91c 	bl	80040fc <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec8:	f7fe f918 	bl	80040fc <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b64      	cmp	r3, #100	; 0x64
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e1f0      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eda:	4b6c      	ldr	r3, [pc, #432]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0xe8>
 8005ee6:	e000      	b.n	8005eea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d063      	beq.n	8005fbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ef6:	4b65      	ldr	r3, [pc, #404]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f02:	4b62      	ldr	r3, [pc, #392]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f0a:	2b08      	cmp	r3, #8
 8005f0c:	d11c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0e:	4b5f      	ldr	r3, [pc, #380]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d116      	bne.n	8005f48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	4b5c      	ldr	r3, [pc, #368]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d001      	beq.n	8005f32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e1c4      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f32:	4b56      	ldr	r3, [pc, #344]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4952      	ldr	r1, [pc, #328]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f46:	e03a      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d020      	beq.n	8005f92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f50:	4b4f      	ldr	r3, [pc, #316]	; (8006090 <HAL_RCC_OscConfig+0x2b0>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f56:	f7fe f8d1 	bl	80040fc <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f5e:	f7fe f8cd 	bl	80040fc <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e1a5      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f70:	4b46      	ldr	r3, [pc, #280]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0f0      	beq.n	8005f5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4940      	ldr	r1, [pc, #256]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]
 8005f90:	e015      	b.n	8005fbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f92:	4b3f      	ldr	r3, [pc, #252]	; (8006090 <HAL_RCC_OscConfig+0x2b0>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fe f8b0 	bl	80040fc <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa0:	f7fe f8ac 	bl	80040fc <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e184      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fb2:	4b36      	ldr	r3, [pc, #216]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d030      	beq.n	800602c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d016      	beq.n	8006000 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fd2:	4b30      	ldr	r3, [pc, #192]	; (8006094 <HAL_RCC_OscConfig+0x2b4>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd8:	f7fe f890 	bl	80040fc <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fe0:	f7fe f88c 	bl	80040fc <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e164      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ff2:	4b26      	ldr	r3, [pc, #152]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x200>
 8005ffe:	e015      	b.n	800602c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006000:	4b24      	ldr	r3, [pc, #144]	; (8006094 <HAL_RCC_OscConfig+0x2b4>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006006:	f7fe f879 	bl	80040fc <HAL_GetTick>
 800600a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800600c:	e008      	b.n	8006020 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600e:	f7fe f875 	bl	80040fc <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b02      	cmp	r3, #2
 800601a:	d901      	bls.n	8006020 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e14d      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f0      	bne.n	800600e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80a0 	beq.w	800617a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603e:	4b13      	ldr	r3, [pc, #76]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10f      	bne.n	800606a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	4b0f      	ldr	r3, [pc, #60]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	4a0e      	ldr	r2, [pc, #56]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 8006054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006058:	6413      	str	r3, [r2, #64]	; 0x40
 800605a:	4b0c      	ldr	r3, [pc, #48]	; (800608c <HAL_RCC_OscConfig+0x2ac>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006062:	60bb      	str	r3, [r7, #8]
 8006064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_RCC_OscConfig+0x2b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006072:	2b00      	cmp	r3, #0
 8006074:	d121      	bne.n	80060ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006076:	4b08      	ldr	r3, [pc, #32]	; (8006098 <HAL_RCC_OscConfig+0x2b8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a07      	ldr	r2, [pc, #28]	; (8006098 <HAL_RCC_OscConfig+0x2b8>)
 800607c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006082:	f7fe f83b 	bl	80040fc <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006088:	e011      	b.n	80060ae <HAL_RCC_OscConfig+0x2ce>
 800608a:	bf00      	nop
 800608c:	40023800 	.word	0x40023800
 8006090:	42470000 	.word	0x42470000
 8006094:	42470e80 	.word	0x42470e80
 8006098:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800609c:	f7fe f82e 	bl	80040fc <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e106      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ae:	4b85      	ldr	r3, [pc, #532]	; (80062c4 <HAL_RCC_OscConfig+0x4e4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0f0      	beq.n	800609c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d106      	bne.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
 80060c2:	4b81      	ldr	r3, [pc, #516]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a80      	ldr	r2, [pc, #512]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
 80060ce:	e01c      	b.n	800610a <HAL_RCC_OscConfig+0x32a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b05      	cmp	r3, #5
 80060d6:	d10c      	bne.n	80060f2 <HAL_RCC_OscConfig+0x312>
 80060d8:	4b7b      	ldr	r3, [pc, #492]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	4a7a      	ldr	r2, [pc, #488]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060de:	f043 0304 	orr.w	r3, r3, #4
 80060e2:	6713      	str	r3, [r2, #112]	; 0x70
 80060e4:	4b78      	ldr	r3, [pc, #480]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	4a77      	ldr	r2, [pc, #476]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6713      	str	r3, [r2, #112]	; 0x70
 80060f0:	e00b      	b.n	800610a <HAL_RCC_OscConfig+0x32a>
 80060f2:	4b75      	ldr	r3, [pc, #468]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	4a74      	ldr	r2, [pc, #464]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	6713      	str	r3, [r2, #112]	; 0x70
 80060fe:	4b72      	ldr	r3, [pc, #456]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	4a71      	ldr	r2, [pc, #452]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006104:	f023 0304 	bic.w	r3, r3, #4
 8006108:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d015      	beq.n	800613e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006112:	f7fd fff3 	bl	80040fc <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006118:	e00a      	b.n	8006130 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800611a:	f7fd ffef 	bl	80040fc <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	f241 3288 	movw	r2, #5000	; 0x1388
 8006128:	4293      	cmp	r3, r2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e0c5      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006130:	4b65      	ldr	r3, [pc, #404]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0ee      	beq.n	800611a <HAL_RCC_OscConfig+0x33a>
 800613c:	e014      	b.n	8006168 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613e:	f7fd ffdd 	bl	80040fc <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006144:	e00a      	b.n	800615c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fd ffd9 	bl	80040fc <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f241 3288 	movw	r2, #5000	; 0x1388
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0af      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800615c:	4b5a      	ldr	r3, [pc, #360]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 800615e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1ee      	bne.n	8006146 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616e:	4b56      	ldr	r3, [pc, #344]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	4a55      	ldr	r2, [pc, #340]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 809b 	beq.w	80062ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006184:	4b50      	ldr	r3, [pc, #320]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d05c      	beq.n	800624a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d141      	bne.n	800621c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006198:	4b4c      	ldr	r3, [pc, #304]	; (80062cc <HAL_RCC_OscConfig+0x4ec>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800619e:	f7fd ffad 	bl	80040fc <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061a6:	f7fd ffa9 	bl	80040fc <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e081      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f0      	bne.n	80061a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	019b      	lsls	r3, r3, #6
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	3b01      	subs	r3, #1
 80061de:	041b      	lsls	r3, r3, #16
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	061b      	lsls	r3, r3, #24
 80061e8:	4937      	ldr	r1, [pc, #220]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ee:	4b37      	ldr	r3, [pc, #220]	; (80062cc <HAL_RCC_OscConfig+0x4ec>)
 80061f0:	2201      	movs	r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f4:	f7fd ff82 	bl	80040fc <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061fc:	f7fd ff7e 	bl	80040fc <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e056      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800620e:	4b2e      	ldr	r3, [pc, #184]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x41c>
 800621a:	e04e      	b.n	80062ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621c:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <HAL_RCC_OscConfig+0x4ec>)
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006222:	f7fd ff6b 	bl	80040fc <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006228:	e008      	b.n	800623c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800622a:	f7fd ff67 	bl	80040fc <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d901      	bls.n	800623c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e03f      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800623c:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1f0      	bne.n	800622a <HAL_RCC_OscConfig+0x44a>
 8006248:	e037      	b.n	80062ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e032      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006256:	4b1c      	ldr	r3, [pc, #112]	; (80062c8 <HAL_RCC_OscConfig+0x4e8>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d028      	beq.n	80062b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626e:	429a      	cmp	r2, r3
 8006270:	d121      	bne.n	80062b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627c:	429a      	cmp	r2, r3
 800627e:	d11a      	bne.n	80062b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006286:	4013      	ands	r3, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800628c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800628e:	4293      	cmp	r3, r2
 8006290:	d111      	bne.n	80062b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	3b01      	subs	r3, #1
 80062a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d107      	bne.n	80062b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d001      	beq.n	80062ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40007000 	.word	0x40007000
 80062c8:	40023800 	.word	0x40023800
 80062cc:	42470060 	.word	0x42470060

080062d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e0cc      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062e4:	4b68      	ldr	r3, [pc, #416]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d90c      	bls.n	800630c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062f2:	4b65      	ldr	r3, [pc, #404]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fa:	4b63      	ldr	r3, [pc, #396]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0307 	and.w	r3, r3, #7
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d001      	beq.n	800630c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0b8      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d020      	beq.n	800635a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006324:	4b59      	ldr	r3, [pc, #356]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a58      	ldr	r2, [pc, #352]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800632e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800633c:	4b53      	ldr	r3, [pc, #332]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4a52      	ldr	r2, [pc, #328]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006348:	4b50      	ldr	r3, [pc, #320]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	494d      	ldr	r1, [pc, #308]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d044      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d107      	bne.n	800637e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636e:	4b47      	ldr	r3, [pc, #284]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d119      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e07f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	2b02      	cmp	r3, #2
 8006384:	d003      	beq.n	800638e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638e:	4b3f      	ldr	r3, [pc, #252]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d109      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e06f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639e:	4b3b      	ldr	r3, [pc, #236]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e067      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063ae:	4b37      	ldr	r3, [pc, #220]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	4934      	ldr	r1, [pc, #208]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063c0:	f7fd fe9c 	bl	80040fc <HAL_GetTick>
 80063c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	e00a      	b.n	80063de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c8:	f7fd fe98 	bl	80040fc <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e04f      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063de:	4b2b      	ldr	r3, [pc, #172]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 020c 	and.w	r2, r3, #12
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d1eb      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d20c      	bcs.n	8006418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b22      	ldr	r3, [pc, #136]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b20      	ldr	r3, [pc, #128]	; (8006488 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e032      	b.n	800647e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006424:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4916      	ldr	r1, [pc, #88]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006442:	4b12      	ldr	r3, [pc, #72]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	490e      	ldr	r1, [pc, #56]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006456:	f000 f821 	bl	800649c <HAL_RCC_GetSysClockFreq>
 800645a:	4602      	mov	r2, r0
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	091b      	lsrs	r3, r3, #4
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	490a      	ldr	r1, [pc, #40]	; (8006490 <HAL_RCC_ClockConfig+0x1c0>)
 8006468:	5ccb      	ldrb	r3, [r1, r3]
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <HAL_RCC_ClockConfig+0x1c4>)
 8006470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <HAL_RCC_ClockConfig+0x1c8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f7fd fd08 	bl	8003e8c <HAL_InitTick>

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40023c00 	.word	0x40023c00
 800648c:	40023800 	.word	0x40023800
 8006490:	080110a8 	.word	0x080110a8
 8006494:	20000000 	.word	0x20000000
 8006498:	20000004 	.word	0x20000004

0800649c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800649c:	b5b0      	push	{r4, r5, r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064a2:	2100      	movs	r1, #0
 80064a4:	6079      	str	r1, [r7, #4]
 80064a6:	2100      	movs	r1, #0
 80064a8:	60f9      	str	r1, [r7, #12]
 80064aa:	2100      	movs	r1, #0
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064ae:	2100      	movs	r1, #0
 80064b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b2:	4952      	ldr	r1, [pc, #328]	; (80065fc <HAL_RCC_GetSysClockFreq+0x160>)
 80064b4:	6889      	ldr	r1, [r1, #8]
 80064b6:	f001 010c 	and.w	r1, r1, #12
 80064ba:	2908      	cmp	r1, #8
 80064bc:	d00d      	beq.n	80064da <HAL_RCC_GetSysClockFreq+0x3e>
 80064be:	2908      	cmp	r1, #8
 80064c0:	f200 8094 	bhi.w	80065ec <HAL_RCC_GetSysClockFreq+0x150>
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d002      	beq.n	80064ce <HAL_RCC_GetSysClockFreq+0x32>
 80064c8:	2904      	cmp	r1, #4
 80064ca:	d003      	beq.n	80064d4 <HAL_RCC_GetSysClockFreq+0x38>
 80064cc:	e08e      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064ce:	4b4c      	ldr	r3, [pc, #304]	; (8006600 <HAL_RCC_GetSysClockFreq+0x164>)
 80064d0:	60bb      	str	r3, [r7, #8]
       break;
 80064d2:	e08e      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064d4:	4b4b      	ldr	r3, [pc, #300]	; (8006604 <HAL_RCC_GetSysClockFreq+0x168>)
 80064d6:	60bb      	str	r3, [r7, #8]
      break;
 80064d8:	e08b      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064da:	4948      	ldr	r1, [pc, #288]	; (80065fc <HAL_RCC_GetSysClockFreq+0x160>)
 80064dc:	6849      	ldr	r1, [r1, #4]
 80064de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80064e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064e4:	4945      	ldr	r1, [pc, #276]	; (80065fc <HAL_RCC_GetSysClockFreq+0x160>)
 80064e6:	6849      	ldr	r1, [r1, #4]
 80064e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80064ec:	2900      	cmp	r1, #0
 80064ee:	d024      	beq.n	800653a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064f0:	4942      	ldr	r1, [pc, #264]	; (80065fc <HAL_RCC_GetSysClockFreq+0x160>)
 80064f2:	6849      	ldr	r1, [r1, #4]
 80064f4:	0989      	lsrs	r1, r1, #6
 80064f6:	4608      	mov	r0, r1
 80064f8:	f04f 0100 	mov.w	r1, #0
 80064fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006500:	f04f 0500 	mov.w	r5, #0
 8006504:	ea00 0204 	and.w	r2, r0, r4
 8006508:	ea01 0305 	and.w	r3, r1, r5
 800650c:	493d      	ldr	r1, [pc, #244]	; (8006604 <HAL_RCC_GetSysClockFreq+0x168>)
 800650e:	fb01 f003 	mul.w	r0, r1, r3
 8006512:	2100      	movs	r1, #0
 8006514:	fb01 f102 	mul.w	r1, r1, r2
 8006518:	1844      	adds	r4, r0, r1
 800651a:	493a      	ldr	r1, [pc, #232]	; (8006604 <HAL_RCC_GetSysClockFreq+0x168>)
 800651c:	fba2 0101 	umull	r0, r1, r2, r1
 8006520:	1863      	adds	r3, r4, r1
 8006522:	4619      	mov	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	461a      	mov	r2, r3
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	f7fa fcb2 	bl	8000e94 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e04a      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653a:	4b30      	ldr	r3, [pc, #192]	; (80065fc <HAL_RCC_GetSysClockFreq+0x160>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	099b      	lsrs	r3, r3, #6
 8006540:	461a      	mov	r2, r3
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	ea02 0400 	and.w	r4, r2, r0
 8006552:	ea03 0501 	and.w	r5, r3, r1
 8006556:	4620      	mov	r0, r4
 8006558:	4629      	mov	r1, r5
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	f04f 0300 	mov.w	r3, #0
 8006562:	014b      	lsls	r3, r1, #5
 8006564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006568:	0142      	lsls	r2, r0, #5
 800656a:	4610      	mov	r0, r2
 800656c:	4619      	mov	r1, r3
 800656e:	1b00      	subs	r0, r0, r4
 8006570:	eb61 0105 	sbc.w	r1, r1, r5
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	018b      	lsls	r3, r1, #6
 800657e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006582:	0182      	lsls	r2, r0, #6
 8006584:	1a12      	subs	r2, r2, r0
 8006586:	eb63 0301 	sbc.w	r3, r3, r1
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	00d9      	lsls	r1, r3, #3
 8006594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006598:	00d0      	lsls	r0, r2, #3
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	1912      	adds	r2, r2, r4
 80065a0:	eb45 0303 	adc.w	r3, r5, r3
 80065a4:	f04f 0000 	mov.w	r0, #0
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	0299      	lsls	r1, r3, #10
 80065ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065b2:	0290      	lsls	r0, r2, #10
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4610      	mov	r0, r2
 80065ba:	4619      	mov	r1, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	461a      	mov	r2, r3
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	f7fa fc66 	bl	8000e94 <__aeabi_uldivmod>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4613      	mov	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065d0:	4b0a      	ldr	r3, [pc, #40]	; (80065fc <HAL_RCC_GetSysClockFreq+0x160>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	3301      	adds	r3, #1
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	60bb      	str	r3, [r7, #8]
      break;
 80065ea:	e002      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065ec:	4b04      	ldr	r3, [pc, #16]	; (8006600 <HAL_RCC_GetSysClockFreq+0x164>)
 80065ee:	60bb      	str	r3, [r7, #8]
      break;
 80065f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065f2:	68bb      	ldr	r3, [r7, #8]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bdb0      	pop	{r4, r5, r7, pc}
 80065fc:	40023800 	.word	0x40023800
 8006600:	00f42400 	.word	0x00f42400
 8006604:	017d7840 	.word	0x017d7840

08006608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800660c:	4b03      	ldr	r3, [pc, #12]	; (800661c <HAL_RCC_GetHCLKFreq+0x14>)
 800660e:	681b      	ldr	r3, [r3, #0]
}
 8006610:	4618      	mov	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	20000000 	.word	0x20000000

08006620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006624:	f7ff fff0 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b05      	ldr	r3, [pc, #20]	; (8006640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	0a9b      	lsrs	r3, r3, #10
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4903      	ldr	r1, [pc, #12]	; (8006644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40023800 	.word	0x40023800
 8006644:	080110b8 	.word	0x080110b8

08006648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800664c:	f7ff ffdc 	bl	8006608 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0b5b      	lsrs	r3, r3, #13
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	; (800666c <HAL_RCC_GetPCLK2Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	080110b8 	.word	0x080110b8

08006670 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	220f      	movs	r2, #15
 800667e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0203 	and.w	r2, r3, #3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006698:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <HAL_RCC_GetClockConfig+0x5c>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <HAL_RCC_GetClockConfig+0x60>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0207 	and.w	r2, r3, #7
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40023c00 	.word	0x40023c00

080066d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e041      	b.n	800676a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fd fa0a 	bl	8003b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f000 fede 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	d001      	beq.n	800678c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e04e      	b.n	800682a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a23      	ldr	r2, [pc, #140]	; (8006838 <HAL_TIM_Base_Start_IT+0xc4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d022      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b6:	d01d      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1f      	ldr	r2, [pc, #124]	; (800683c <HAL_TIM_Base_Start_IT+0xc8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d018      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <HAL_TIM_Base_Start_IT+0xcc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d013      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <HAL_TIM_Base_Start_IT+0xd0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00e      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1b      	ldr	r2, [pc, #108]	; (8006848 <HAL_TIM_Base_Start_IT+0xd4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d009      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a19      	ldr	r2, [pc, #100]	; (800684c <HAL_TIM_Base_Start_IT+0xd8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d004      	beq.n	80067f4 <HAL_TIM_Base_Start_IT+0x80>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a18      	ldr	r2, [pc, #96]	; (8006850 <HAL_TIM_Base_Start_IT+0xdc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d111      	bne.n	8006818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b06      	cmp	r3, #6
 8006804:	d010      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006816:	e007      	b.n	8006828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	40010000 	.word	0x40010000
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40010400 	.word	0x40010400
 800684c:	40014000 	.word	0x40014000
 8006850:	40001800 	.word	0x40001800

08006854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e041      	b.n	80068ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f839 	bl	80068f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	4619      	mov	r1, r3
 8006892:	4610      	mov	r0, r2
 8006894:	f000 fe1e 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d109      	bne.n	800692c <HAL_TIM_PWM_Start+0x24>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e022      	b.n	8006972 <HAL_TIM_PWM_Start+0x6a>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b04      	cmp	r3, #4
 8006930:	d109      	bne.n	8006946 <HAL_TIM_PWM_Start+0x3e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	e015      	b.n	8006972 <HAL_TIM_PWM_Start+0x6a>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d109      	bne.n	8006960 <HAL_TIM_PWM_Start+0x58>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	bf14      	ite	ne
 8006958:	2301      	movne	r3, #1
 800695a:	2300      	moveq	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	e008      	b.n	8006972 <HAL_TIM_PWM_Start+0x6a>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e07c      	b.n	8006a74 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_TIM_PWM_Start+0x82>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006988:	e013      	b.n	80069b2 <HAL_TIM_PWM_Start+0xaa>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b04      	cmp	r3, #4
 800698e:	d104      	bne.n	800699a <HAL_TIM_PWM_Start+0x92>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006998:	e00b      	b.n	80069b2 <HAL_TIM_PWM_Start+0xaa>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d104      	bne.n	80069aa <HAL_TIM_PWM_Start+0xa2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a8:	e003      	b.n	80069b2 <HAL_TIM_PWM_Start+0xaa>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 f99e 	bl	8007cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a2d      	ldr	r2, [pc, #180]	; (8006a7c <HAL_TIM_PWM_Start+0x174>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <HAL_TIM_PWM_Start+0xcc>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a2c      	ldr	r2, [pc, #176]	; (8006a80 <HAL_TIM_PWM_Start+0x178>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_PWM_Start+0xd0>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <HAL_TIM_PWM_Start+0xd2>
 80069d8:	2300      	movs	r3, #0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a22      	ldr	r2, [pc, #136]	; (8006a7c <HAL_TIM_PWM_Start+0x174>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d022      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x136>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a00:	d01d      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x136>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <HAL_TIM_PWM_Start+0x17c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d018      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x136>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1d      	ldr	r2, [pc, #116]	; (8006a88 <HAL_TIM_PWM_Start+0x180>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d013      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x136>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <HAL_TIM_PWM_Start+0x184>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00e      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x136>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <HAL_TIM_PWM_Start+0x178>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x136>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a18      	ldr	r2, [pc, #96]	; (8006a90 <HAL_TIM_PWM_Start+0x188>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d004      	beq.n	8006a3e <HAL_TIM_PWM_Start+0x136>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <HAL_TIM_PWM_Start+0x18c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d111      	bne.n	8006a62 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2b06      	cmp	r3, #6
 8006a4e:	d010      	beq.n	8006a72 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a60:	e007      	b.n	8006a72 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40010000 	.word	0x40010000
 8006a80:	40010400 	.word	0x40010400
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40014000 	.word	0x40014000
 8006a94:	40001800 	.word	0x40001800

08006a98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e041      	b.n	8006b2e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d106      	bne.n	8006ac4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f839 	bl	8006b36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	f000 fcfc 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b086      	sub	sp, #24
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e097      	b.n	8006c8e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d106      	bne.n	8006b78 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fd f83c 	bl	8003bf0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8e:	f023 0307 	bic.w	r3, r3, #7
 8006b92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 fc98 	bl	80074d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bcc:	f023 0303 	bic.w	r3, r3, #3
 8006bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	021b      	lsls	r3, r3, #8
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006bea:	f023 030c 	bic.w	r3, r3, #12
 8006bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68da      	ldr	r2, [r3, #12]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	4313      	orrs	r3, r2
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	011a      	lsls	r2, r3, #4
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6a1b      	ldr	r3, [r3, #32]
 8006c18:	031b      	lsls	r3, r3, #12
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cb6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cbe:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d110      	bne.n	8006ce8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d102      	bne.n	8006cd2 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ccc:	7b7b      	ldrb	r3, [r7, #13]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d001      	beq.n	8006cd6 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e069      	b.n	8006daa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2202      	movs	r2, #2
 8006cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce6:	e031      	b.n	8006d4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d110      	bne.n	8006d10 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d102      	bne.n	8006cfa <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cf4:	7b3b      	ldrb	r3, [r7, #12]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d001      	beq.n	8006cfe <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e055      	b.n	8006daa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d0e:	e01d      	b.n	8006d4c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d108      	bne.n	8006d28 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d105      	bne.n	8006d28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d1c:	7b7b      	ldrb	r3, [r7, #13]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d102      	bne.n	8006d28 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d22:	7b3b      	ldrb	r3, [r7, #12]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d001      	beq.n	8006d2c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e03e      	b.n	8006daa <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_TIM_Encoder_Start+0xc4>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b04      	cmp	r3, #4
 8006d56:	d008      	beq.n	8006d6a <HAL_TIM_Encoder_Start+0xd4>
 8006d58:	e00f      	b.n	8006d7a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	2100      	movs	r1, #0
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 ffca 	bl	8007cfc <TIM_CCxChannelCmd>
      break;
 8006d68:	e016      	b.n	8006d98 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	2104      	movs	r1, #4
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 ffc2 	bl	8007cfc <TIM_CCxChannelCmd>
      break;
 8006d78:	e00e      	b.n	8006d98 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2100      	movs	r1, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 ffba 	bl	8007cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2104      	movs	r1, #4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 ffb3 	bl	8007cfc <TIM_CCxChannelCmd>
      break;
 8006d96:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b082      	sub	sp, #8
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d122      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d11b      	bne.n	8006e0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f06f 0202 	mvn.w	r2, #2
 8006dde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fb f8a7 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8006dfa:	e005      	b.n	8006e08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fb4b 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fb52 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d122      	bne.n	8006e62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d11b      	bne.n	8006e62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f06f 0204 	mvn.w	r2, #4
 8006e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fb f87d 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8006e4e:	e005      	b.n	8006e5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fb21 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fb28 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f003 0308 	and.w	r3, r3, #8
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d122      	bne.n	8006eb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	f003 0308 	and.w	r3, r3, #8
 8006e7a:	2b08      	cmp	r3, #8
 8006e7c:	d11b      	bne.n	8006eb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f06f 0208 	mvn.w	r2, #8
 8006e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fb f853 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8006ea2:	e005      	b.n	8006eb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 faf7 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fafe 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d122      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0310 	and.w	r3, r3, #16
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d11b      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f06f 0210 	mvn.w	r2, #16
 8006eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2208      	movs	r2, #8
 8006ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7fb f829 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8006ef6:	e005      	b.n	8006f04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 facd 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fad4 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d10e      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d107      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f06f 0201 	mvn.w	r2, #1
 8006f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7fc fcef 	bl	8003914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f40:	2b80      	cmp	r3, #128	; 0x80
 8006f42:	d10e      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4e:	2b80      	cmp	r3, #128	; 0x80
 8006f50:	d107      	bne.n	8006f62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 ffcb 	bl	8007ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6c:	2b40      	cmp	r3, #64	; 0x40
 8006f6e:	d10e      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7a:	2b40      	cmp	r3, #64	; 0x40
 8006f7c:	d107      	bne.n	8006f8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fa99 	bl	80074c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d10e      	bne.n	8006fba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d107      	bne.n	8006fba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f06f 0220 	mvn.w	r2, #32
 8006fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 ff95 	bl	8007ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e088      	b.n	80070f2 <HAL_TIM_IC_ConfigChannel+0x130>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d11b      	bne.n	8007026 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6819      	ldr	r1, [r3, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f000 fcb9 	bl	8007974 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 020c 	bic.w	r2, r2, #12
 8007010:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6999      	ldr	r1, [r3, #24]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	619a      	str	r2, [r3, #24]
 8007024:	e060      	b.n	80070e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b04      	cmp	r3, #4
 800702a:	d11c      	bne.n	8007066 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	6819      	ldr	r1, [r3, #0]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f000 fd3d 	bl	8007aba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800704e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6999      	ldr	r1, [r3, #24]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	021a      	lsls	r2, r3, #8
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	430a      	orrs	r2, r1
 8007062:	619a      	str	r2, [r3, #24]
 8007064:	e040      	b.n	80070e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d11b      	bne.n	80070a4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	f000 fd8a 	bl	8007b94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69da      	ldr	r2, [r3, #28]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 020c 	bic.w	r2, r2, #12
 800708e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69d9      	ldr	r1, [r3, #28]
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	61da      	str	r2, [r3, #28]
 80070a2:	e021      	b.n	80070e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b0c      	cmp	r3, #12
 80070a8:	d11c      	bne.n	80070e4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6819      	ldr	r1, [r3, #0]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f000 fda7 	bl	8007c0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	69d9      	ldr	r1, [r3, #28]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	021a      	lsls	r2, r3, #8
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	61da      	str	r2, [r3, #28]
 80070e2:	e001      	b.n	80070e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007116:	2302      	movs	r3, #2
 8007118:	e0ae      	b.n	8007278 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	f200 809f 	bhi.w	8007268 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007165 	.word	0x08007165
 8007134:	08007269 	.word	0x08007269
 8007138:	08007269 	.word	0x08007269
 800713c:	08007269 	.word	0x08007269
 8007140:	080071a5 	.word	0x080071a5
 8007144:	08007269 	.word	0x08007269
 8007148:	08007269 	.word	0x08007269
 800714c:	08007269 	.word	0x08007269
 8007150:	080071e7 	.word	0x080071e7
 8007154:	08007269 	.word	0x08007269
 8007158:	08007269 	.word	0x08007269
 800715c:	08007269 	.word	0x08007269
 8007160:	08007227 	.word	0x08007227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fa52 	bl	8007614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0208 	orr.w	r2, r2, #8
 800717e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0204 	bic.w	r2, r2, #4
 800718e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6999      	ldr	r1, [r3, #24]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	619a      	str	r2, [r3, #24]
      break;
 80071a2:	e064      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 faa2 	bl	80076f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6999      	ldr	r1, [r3, #24]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	021a      	lsls	r2, r3, #8
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	619a      	str	r2, [r3, #24]
      break;
 80071e4:	e043      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 faf7 	bl	80077e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0208 	orr.w	r2, r2, #8
 8007200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69da      	ldr	r2, [r3, #28]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0204 	bic.w	r2, r2, #4
 8007210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69d9      	ldr	r1, [r3, #28]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	61da      	str	r2, [r3, #28]
      break;
 8007224:	e023      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fb4b 	bl	80078c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69da      	ldr	r2, [r3, #28]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69d9      	ldr	r1, [r3, #28]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	021a      	lsls	r2, r3, #8
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	61da      	str	r2, [r3, #28]
      break;
 8007266:	e002      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
      break;
 800726c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_TIM_ConfigClockSource+0x1c>
 8007298:	2302      	movs	r3, #2
 800729a:	e0b4      	b.n	8007406 <HAL_TIM_ConfigClockSource+0x186>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d4:	d03e      	beq.n	8007354 <HAL_TIM_ConfigClockSource+0xd4>
 80072d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072da:	f200 8087 	bhi.w	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e2:	f000 8086 	beq.w	80073f2 <HAL_TIM_ConfigClockSource+0x172>
 80072e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ea:	d87f      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b70      	cmp	r3, #112	; 0x70
 80072ee:	d01a      	beq.n	8007326 <HAL_TIM_ConfigClockSource+0xa6>
 80072f0:	2b70      	cmp	r3, #112	; 0x70
 80072f2:	d87b      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b60      	cmp	r3, #96	; 0x60
 80072f6:	d050      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x11a>
 80072f8:	2b60      	cmp	r3, #96	; 0x60
 80072fa:	d877      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b50      	cmp	r3, #80	; 0x50
 80072fe:	d03c      	beq.n	800737a <HAL_TIM_ConfigClockSource+0xfa>
 8007300:	2b50      	cmp	r3, #80	; 0x50
 8007302:	d873      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d058      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x13a>
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d86f      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d064      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007310:	2b30      	cmp	r3, #48	; 0x30
 8007312:	d86b      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d060      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	2b20      	cmp	r3, #32
 800731a:	d867      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05c      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	2b10      	cmp	r3, #16
 8007322:	d05a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007324:	e062      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6899      	ldr	r1, [r3, #8]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f000 fcc1 	bl	8007cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	609a      	str	r2, [r3, #8]
      break;
 8007352:	e04f      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f000 fcaa 	bl	8007cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007376:	609a      	str	r2, [r3, #8]
      break;
 8007378:	e03c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	461a      	mov	r2, r3
 8007388:	f000 fb68 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2150      	movs	r1, #80	; 0x50
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fc77 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007398:	e02c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f000 fbc4 	bl	8007b34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2160      	movs	r1, #96	; 0x60
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fc67 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80073b8:	e01c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f000 fb48 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2140      	movs	r1, #64	; 0x40
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fc57 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80073d8:	e00c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f000 fc4e 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80073ea:	e003      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	e000      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b0c      	cmp	r3, #12
 8007422:	d831      	bhi.n	8007488 <HAL_TIM_ReadCapturedValue+0x78>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007461 	.word	0x08007461
 8007430:	08007489 	.word	0x08007489
 8007434:	08007489 	.word	0x08007489
 8007438:	08007489 	.word	0x08007489
 800743c:	0800746b 	.word	0x0800746b
 8007440:	08007489 	.word	0x08007489
 8007444:	08007489 	.word	0x08007489
 8007448:	08007489 	.word	0x08007489
 800744c:	08007475 	.word	0x08007475
 8007450:	08007489 	.word	0x08007489
 8007454:	08007489 	.word	0x08007489
 8007458:	08007489 	.word	0x08007489
 800745c:	0800747f 	.word	0x0800747f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007466:	60fb      	str	r3, [r7, #12]

      break;
 8007468:	e00f      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	60fb      	str	r3, [r7, #12]

      break;
 8007472:	e00a      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	60fb      	str	r3, [r7, #12]

      break;
 800747c:	e005      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	60fb      	str	r3, [r7, #12]

      break;
 8007486:	e000      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007488:	bf00      	nop
  }

  return tmpreg;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a40      	ldr	r2, [pc, #256]	; (80075e8 <TIM_Base_SetConfig+0x114>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f2:	d00f      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a3d      	ldr	r2, [pc, #244]	; (80075ec <TIM_Base_SetConfig+0x118>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00b      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a3c      	ldr	r2, [pc, #240]	; (80075f0 <TIM_Base_SetConfig+0x11c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d007      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a3b      	ldr	r2, [pc, #236]	; (80075f4 <TIM_Base_SetConfig+0x120>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a3a      	ldr	r2, [pc, #232]	; (80075f8 <TIM_Base_SetConfig+0x124>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d108      	bne.n	8007526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2f      	ldr	r2, [pc, #188]	; (80075e8 <TIM_Base_SetConfig+0x114>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d02b      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007534:	d027      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2c      	ldr	r2, [pc, #176]	; (80075ec <TIM_Base_SetConfig+0x118>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d023      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2b      	ldr	r2, [pc, #172]	; (80075f0 <TIM_Base_SetConfig+0x11c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01f      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2a      	ldr	r2, [pc, #168]	; (80075f4 <TIM_Base_SetConfig+0x120>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d01b      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <TIM_Base_SetConfig+0x124>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d017      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a28      	ldr	r2, [pc, #160]	; (80075fc <TIM_Base_SetConfig+0x128>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a27      	ldr	r2, [pc, #156]	; (8007600 <TIM_Base_SetConfig+0x12c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00f      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a26      	ldr	r2, [pc, #152]	; (8007604 <TIM_Base_SetConfig+0x130>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00b      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a25      	ldr	r2, [pc, #148]	; (8007608 <TIM_Base_SetConfig+0x134>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d007      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a24      	ldr	r2, [pc, #144]	; (800760c <TIM_Base_SetConfig+0x138>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d003      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a23      	ldr	r2, [pc, #140]	; (8007610 <TIM_Base_SetConfig+0x13c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d108      	bne.n	8007598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <TIM_Base_SetConfig+0x114>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_Base_SetConfig+0xf8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <TIM_Base_SetConfig+0x124>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d103      	bne.n	80075d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	615a      	str	r2, [r3, #20]
}
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40010000 	.word	0x40010000
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800
 80075f4:	40000c00 	.word	0x40000c00
 80075f8:	40010400 	.word	0x40010400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800
 8007608:	40001800 	.word	0x40001800
 800760c:	40001c00 	.word	0x40001c00
 8007610:	40002000 	.word	0x40002000

08007614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f023 0201 	bic.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0302 	bic.w	r3, r3, #2
 800765c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a20      	ldr	r2, [pc, #128]	; (80076ec <TIM_OC1_SetConfig+0xd8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC1_SetConfig+0x64>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <TIM_OC1_SetConfig+0xdc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d10c      	bne.n	8007692 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0308 	bic.w	r3, r3, #8
 800767e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 0304 	bic.w	r3, r3, #4
 8007690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a15      	ldr	r2, [pc, #84]	; (80076ec <TIM_OC1_SetConfig+0xd8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_OC1_SetConfig+0x8e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a14      	ldr	r2, [pc, #80]	; (80076f0 <TIM_OC1_SetConfig+0xdc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d111      	bne.n	80076c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40010400 	.word	0x40010400

080076f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f023 0210 	bic.w	r2, r3, #16
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800772a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f023 0320 	bic.w	r3, r3, #32
 800773e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a22      	ldr	r2, [pc, #136]	; (80077d8 <TIM_OC2_SetConfig+0xe4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d003      	beq.n	800775c <TIM_OC2_SetConfig+0x68>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <TIM_OC2_SetConfig+0xe8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10d      	bne.n	8007778 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <TIM_OC2_SetConfig+0xe4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC2_SetConfig+0x94>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a16      	ldr	r2, [pc, #88]	; (80077dc <TIM_OC2_SetConfig+0xe8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d113      	bne.n	80077b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800778e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40010400 	.word	0x40010400

080077e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a21      	ldr	r2, [pc, #132]	; (80078c0 <TIM_OC3_SetConfig+0xe0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d003      	beq.n	8007846 <TIM_OC3_SetConfig+0x66>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a20      	ldr	r2, [pc, #128]	; (80078c4 <TIM_OC3_SetConfig+0xe4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d10d      	bne.n	8007862 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800784c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a16      	ldr	r2, [pc, #88]	; (80078c0 <TIM_OC3_SetConfig+0xe0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d003      	beq.n	8007872 <TIM_OC3_SetConfig+0x92>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <TIM_OC3_SetConfig+0xe4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d113      	bne.n	800789a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400

080078c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	031b      	lsls	r3, r3, #12
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a12      	ldr	r2, [pc, #72]	; (800796c <TIM_OC4_SetConfig+0xa4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_OC4_SetConfig+0x68>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a11      	ldr	r2, [pc, #68]	; (8007970 <TIM_OC4_SetConfig+0xa8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d109      	bne.n	8007944 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	019b      	lsls	r3, r3, #6
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40010000 	.word	0x40010000
 8007970:	40010400 	.word	0x40010400

08007974 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a28      	ldr	r2, [pc, #160]	; (8007a40 <TIM_TI1_SetConfig+0xcc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01b      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a8:	d017      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a25      	ldr	r2, [pc, #148]	; (8007a44 <TIM_TI1_SetConfig+0xd0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a24      	ldr	r2, [pc, #144]	; (8007a48 <TIM_TI1_SetConfig+0xd4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a23      	ldr	r2, [pc, #140]	; (8007a4c <TIM_TI1_SetConfig+0xd8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00b      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4a22      	ldr	r2, [pc, #136]	; (8007a50 <TIM_TI1_SetConfig+0xdc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4a21      	ldr	r2, [pc, #132]	; (8007a54 <TIM_TI1_SetConfig+0xe0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4a20      	ldr	r2, [pc, #128]	; (8007a58 <TIM_TI1_SetConfig+0xe4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d101      	bne.n	80079de <TIM_TI1_SetConfig+0x6a>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <TIM_TI1_SetConfig+0x6c>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e003      	b.n	80079fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f023 030a 	bic.w	r3, r3, #10
 8007a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f003 030a 	and.w	r3, r3, #10
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40001800 	.word	0x40001800

08007a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f023 0201 	bic.w	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f023 030a 	bic.w	r3, r3, #10
 8007a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b087      	sub	sp, #28
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f023 0210 	bic.w	r2, r3, #16
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	031b      	lsls	r3, r3, #12
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	f023 0210 	bic.w	r2, r3, #16
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	031b      	lsls	r3, r3, #12
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f023 0303 	bic.w	r3, r3, #3
 8007bc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007be4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	031b      	lsls	r3, r3, #12
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	031b      	lsls	r3, r3, #12
 8007c64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f043 0307 	orr.w	r3, r3, #7
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	609a      	str	r2, [r3, #8]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	021a      	lsls	r2, r3, #8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	2201      	movs	r2, #1
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	401a      	ands	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1a      	ldr	r2, [r3, #32]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 031f 	and.w	r3, r3, #31
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	fa01 f303 	lsl.w	r3, r1, r3
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
	...

08007d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e05a      	b.n	8007e16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dac:	d01d      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1d      	ldr	r2, [pc, #116]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d10c      	bne.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40001800 	.word	0x40001800

08007e40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e03d      	b.n	8007ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e03f      	b.n	8007f9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d106      	bne.n	8007f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fb ff5a 	bl	8003dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2224      	movs	r2, #36	; 0x24
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fddb 	bl	8008b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695a      	ldr	r2, [r3, #20]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b08a      	sub	sp, #40	; 0x28
 8007faa:	af02      	add	r7, sp, #8
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	603b      	str	r3, [r7, #0]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d17c      	bne.n	80080c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d002      	beq.n	8007fd2 <HAL_UART_Transmit+0x2c>
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e075      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_UART_Transmit+0x3e>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e06e      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2221      	movs	r2, #33	; 0x21
 8007ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ffa:	f7fc f87f 	bl	80040fc <HAL_GetTick>
 8007ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	88fa      	ldrh	r2, [r7, #6]
 8008004:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008014:	d108      	bne.n	8008028 <HAL_UART_Transmit+0x82>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d104      	bne.n	8008028 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e003      	b.n	8008030 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008038:	e02a      	b.n	8008090 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	2180      	movs	r1, #128	; 0x80
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fb1f 	bl	8008688 <UART_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e036      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	3302      	adds	r3, #2
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	e007      	b.n	8008082 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	3301      	adds	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1cf      	bne.n	800803a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2200      	movs	r2, #0
 80080a2:	2140      	movs	r1, #64	; 0x40
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 faef 	bl	8008688 <UART_WaitOnFlagUntilTimeout>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e006      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2220      	movs	r2, #32
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3720      	adds	r7, #32
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	4613      	mov	r3, r2
 80080d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d11d      	bne.n	8008120 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_UART_Receive_IT+0x26>
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e016      	b.n	8008122 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_UART_Receive_IT+0x38>
 80080fe:	2302      	movs	r3, #2
 8008100:	e00f      	b.n	8008122 <HAL_UART_Receive_IT+0x58>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008110:	88fb      	ldrh	r3, [r7, #6]
 8008112:	461a      	mov	r2, r3
 8008114:	68b9      	ldr	r1, [r7, #8]
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 fb24 	bl	8008764 <UART_Start_Receive_IT>
 800811c:	4603      	mov	r3, r0
 800811e:	e000      	b.n	8008122 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008120:	2302      	movs	r3, #2
  }
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b0ba      	sub	sp, #232	; 0xe8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	695b      	ldr	r3, [r3, #20]
 800814e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008152:	2300      	movs	r3, #0
 8008154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008158:	2300      	movs	r3, #0
 800815a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800815e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008162:	f003 030f 	and.w	r3, r3, #15
 8008166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800816a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10f      	bne.n	8008192 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008176:	f003 0320 	and.w	r3, r3, #32
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <HAL_UART_IRQHandler+0x66>
 800817e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fc03 	bl	8008996 <UART_Receive_IT>
      return;
 8008190:	e256      	b.n	8008640 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 80de 	beq.w	8008358 <HAL_UART_IRQHandler+0x22c>
 800819c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80d1 	beq.w	8008358 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <HAL_UART_IRQHandler+0xae>
 80081c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	f043 0201 	orr.w	r2, r3, #1
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081de:	f003 0304 	and.w	r3, r3, #4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00b      	beq.n	80081fe <HAL_UART_IRQHandler+0xd2>
 80081e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	f043 0202 	orr.w	r2, r3, #2
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <HAL_UART_IRQHandler+0xf6>
 800820a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f043 0204 	orr.w	r2, r3, #4
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	f003 0308 	and.w	r3, r3, #8
 800822a:	2b00      	cmp	r3, #0
 800822c:	d011      	beq.n	8008252 <HAL_UART_IRQHandler+0x126>
 800822e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800823a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824a:	f043 0208 	orr.w	r2, r3, #8
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 81ed 	beq.w	8008636 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800825c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008260:	f003 0320 	and.w	r3, r3, #32
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <HAL_UART_IRQHandler+0x14e>
 8008268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fb8e 	bl	8008996 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	695b      	ldr	r3, [r3, #20]
 8008280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008284:	2b40      	cmp	r3, #64	; 0x40
 8008286:	bf0c      	ite	eq
 8008288:	2301      	moveq	r3, #1
 800828a:	2300      	movne	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	f003 0308 	and.w	r3, r3, #8
 800829a:	2b00      	cmp	r3, #0
 800829c:	d103      	bne.n	80082a6 <HAL_UART_IRQHandler+0x17a>
 800829e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d04f      	beq.n	8008346 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa96 	bl	80087d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b6:	2b40      	cmp	r3, #64	; 0x40
 80082b8:	d141      	bne.n	800833e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3314      	adds	r3, #20
 80082c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3314      	adds	r3, #20
 80082e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1d9      	bne.n	80082ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830a:	2b00      	cmp	r3, #0
 800830c:	d013      	beq.n	8008336 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008312:	4a7d      	ldr	r2, [pc, #500]	; (8008508 <HAL_UART_IRQHandler+0x3dc>)
 8008314:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	4618      	mov	r0, r3
 800831c:	f7fc fbb2 	bl	8004a84 <HAL_DMA_Abort_IT>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d016      	beq.n	8008354 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008334:	e00e      	b.n	8008354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f990 	bl	800865c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800833c:	e00a      	b.n	8008354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f98c 	bl	800865c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	e006      	b.n	8008354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f988 	bl	800865c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008352:	e170      	b.n	8008636 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008354:	bf00      	nop
    return;
 8008356:	e16e      	b.n	8008636 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	2b01      	cmp	r3, #1
 800835e:	f040 814a 	bne.w	80085f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008366:	f003 0310 	and.w	r3, r3, #16
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8143 	beq.w	80085f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008374:	f003 0310 	and.w	r3, r3, #16
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 813c 	beq.w	80085f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60bb      	str	r3, [r7, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	60bb      	str	r3, [r7, #8]
 8008392:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	f040 80b4 	bne.w	800850c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8140 	beq.w	800863a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083c2:	429a      	cmp	r2, r3
 80083c4:	f080 8139 	bcs.w	800863a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083da:	f000 8088 	beq.w	80084ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	330c      	adds	r3, #12
 80083e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800840a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800840e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008416:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1d9      	bne.n	80083de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	3314      	adds	r3, #20
 8008430:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800843a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800843c:	f023 0301 	bic.w	r3, r3, #1
 8008440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3314      	adds	r3, #20
 800844a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800844e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008452:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008456:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e1      	bne.n	800842a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3314      	adds	r3, #20
 800846c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800847c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3314      	adds	r3, #20
 8008486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800848a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800848c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008490:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e3      	bne.n	8008466 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	330c      	adds	r3, #12
 80084b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084be:	f023 0310 	bic.w	r3, r3, #16
 80084c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80084d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e3      	bne.n	80084ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fc fa5b 	bl	80049a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8b6 	bl	8008670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008504:	e099      	b.n	800863a <HAL_UART_IRQHandler+0x50e>
 8008506:	bf00      	nop
 8008508:	0800889f 	.word	0x0800889f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008514:	b29b      	uxth	r3, r3
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 808b 	beq.w	800863e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 8086 	beq.w	800863e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	330c      	adds	r3, #12
 8008538:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	330c      	adds	r3, #12
 8008552:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008556:	647a      	str	r2, [r7, #68]	; 0x44
 8008558:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800855c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e3      	bne.n	8008532 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3314      	adds	r3, #20
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	623b      	str	r3, [r7, #32]
   return(result);
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	f023 0301 	bic.w	r3, r3, #1
 8008580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3314      	adds	r3, #20
 800858a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800858e:	633a      	str	r2, [r7, #48]	; 0x30
 8008590:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e3      	bne.n	800856a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	330c      	adds	r3, #12
 80085b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0310 	bic.w	r3, r3, #16
 80085c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085d4:	61fa      	str	r2, [r7, #28]
 80085d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	69b9      	ldr	r1, [r7, #24]
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	617b      	str	r3, [r7, #20]
   return(result);
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e3      	bne.n	80085b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f83e 	bl	8008670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085f4:	e023      	b.n	800863e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <HAL_UART_IRQHandler+0x4ea>
 8008602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f959 	bl	80088c6 <UART_Transmit_IT>
    return;
 8008614:	e014      	b.n	8008640 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00e      	beq.n	8008640 <HAL_UART_IRQHandler+0x514>
 8008622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d008      	beq.n	8008640 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f999 	bl	8008966 <UART_EndTransmit_IT>
    return;
 8008634:	e004      	b.n	8008640 <HAL_UART_IRQHandler+0x514>
    return;
 8008636:	bf00      	nop
 8008638:	e002      	b.n	8008640 <HAL_UART_IRQHandler+0x514>
      return;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <HAL_UART_IRQHandler+0x514>
      return;
 800863e:	bf00      	nop
  }
}
 8008640:	37e8      	adds	r7, #232	; 0xe8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop

08008648 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b090      	sub	sp, #64	; 0x40
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	4613      	mov	r3, r2
 8008696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008698:	e050      	b.n	800873c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800869a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086a0:	d04c      	beq.n	800873c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80086a8:	f7fb fd28 	bl	80040fc <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d241      	bcs.n	800873c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	330c      	adds	r3, #12
 80086d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086d8:	637a      	str	r2, [r7, #52]	; 0x34
 80086da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e5      	bne.n	80086b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3314      	adds	r3, #20
 80086f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	613b      	str	r3, [r7, #16]
   return(result);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	f023 0301 	bic.w	r3, r3, #1
 8008702:	63bb      	str	r3, [r7, #56]	; 0x38
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3314      	adds	r3, #20
 800870a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800870c:	623a      	str	r2, [r7, #32]
 800870e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	69f9      	ldr	r1, [r7, #28]
 8008712:	6a3a      	ldr	r2, [r7, #32]
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	61bb      	str	r3, [r7, #24]
   return(result);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e5      	bne.n	80086ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e00f      	b.n	800875c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	4013      	ands	r3, r2
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	429a      	cmp	r2, r3
 800874a:	bf0c      	ite	eq
 800874c:	2301      	moveq	r3, #1
 800874e:	2300      	movne	r3, #0
 8008750:	b2db      	uxtb	r3, r3
 8008752:	461a      	mov	r2, r3
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	429a      	cmp	r2, r3
 8008758:	d09f      	beq.n	800869a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3740      	adds	r7, #64	; 0x40
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	4613      	mov	r3, r2
 8008770:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	88fa      	ldrh	r2, [r7, #6]
 800877c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	88fa      	ldrh	r2, [r7, #6]
 8008782:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2222      	movs	r2, #34	; 0x22
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68da      	ldr	r2, [r3, #12]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695a      	ldr	r2, [r3, #20]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f042 0201 	orr.w	r2, r2, #1
 80087b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0220 	orr.w	r2, r2, #32
 80087c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b095      	sub	sp, #84	; 0x54
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	330c      	adds	r3, #12
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	330c      	adds	r3, #12
 80087fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008800:	643a      	str	r2, [r7, #64]	; 0x40
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e5      	bne.n	80087e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3314      	adds	r3, #20
 800881a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	61fb      	str	r3, [r7, #28]
   return(result);
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	f023 0301 	bic.w	r3, r3, #1
 800882a:	64bb      	str	r3, [r7, #72]	; 0x48
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3314      	adds	r3, #20
 8008832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800883a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e5      	bne.n	8008814 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	2b01      	cmp	r3, #1
 800884e:	d119      	bne.n	8008884 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	330c      	adds	r3, #12
 8008856:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f023 0310 	bic.w	r3, r3, #16
 8008866:	647b      	str	r3, [r7, #68]	; 0x44
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008870:	61ba      	str	r2, [r7, #24]
 8008872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008874:	6979      	ldr	r1, [r7, #20]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	e841 2300 	strex	r3, r2, [r1]
 800887c:	613b      	str	r3, [r7, #16]
   return(result);
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e5      	bne.n	8008850 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008892:	bf00      	nop
 8008894:	3754      	adds	r7, #84	; 0x54
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f7ff fecf 	bl	800865c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b085      	sub	sp, #20
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b21      	cmp	r3, #33	; 0x21
 80088d8:	d13e      	bne.n	8008958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088e2:	d114      	bne.n	800890e <UART_Transmit_IT+0x48>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d110      	bne.n	800890e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	1c9a      	adds	r2, r3, #2
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	621a      	str	r2, [r3, #32]
 800890c:	e008      	b.n	8008920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	1c59      	adds	r1, r3, #1
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	6211      	str	r1, [r2, #32]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29b      	uxth	r3, r3
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	4619      	mov	r1, r3
 800892e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008930:	2b00      	cmp	r3, #0
 8008932:	d10f      	bne.n	8008954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	e000      	b.n	800895a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008958:	2302      	movs	r3, #2
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2220      	movs	r2, #32
 8008982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fe5e 	bl	8008648 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b08c      	sub	sp, #48	; 0x30
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b22      	cmp	r3, #34	; 0x22
 80089a8:	f040 80ab 	bne.w	8008b02 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089b4:	d117      	bne.n	80089e6 <UART_Receive_IT+0x50>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d113      	bne.n	80089e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	1c9a      	adds	r2, r3, #2
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	629a      	str	r2, [r3, #40]	; 0x28
 80089e4:	e026      	b.n	8008a34 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f8:	d007      	beq.n	8008a0a <UART_Receive_IT+0x74>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10a      	bne.n	8008a18 <UART_Receive_IT+0x82>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	e008      	b.n	8008a2a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	1c5a      	adds	r2, r3, #1
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	4619      	mov	r1, r3
 8008a42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d15a      	bne.n	8008afe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0220 	bic.w	r2, r2, #32
 8008a56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695a      	ldr	r2, [r3, #20]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0201 	bic.w	r2, r2, #1
 8008a76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d135      	bne.n	8008af4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f023 0310 	bic.w	r3, r3, #16
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	623a      	str	r2, [r7, #32]
 8008ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	69f9      	ldr	r1, [r7, #28]
 8008ab4:	6a3a      	ldr	r2, [r7, #32]
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	61bb      	str	r3, [r7, #24]
   return(result);
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d10a      	bne.n	8008ae6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff fdbf 	bl	8008670 <HAL_UARTEx_RxEventCallback>
 8008af2:	e002      	b.n	8008afa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7f9 fab5 	bl	8002064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	e002      	b.n	8008b04 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e000      	b.n	8008b04 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b02:	2302      	movs	r3, #2
  }
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3730      	adds	r7, #48	; 0x30
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b10:	b09f      	sub	sp, #124	; 0x7c
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b22:	68d9      	ldr	r1, [r3, #12]
 8008b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	ea40 0301 	orr.w	r3, r0, r1
 8008b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b40:	69db      	ldr	r3, [r3, #28]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b50:	f021 010c 	bic.w	r1, r1, #12
 8008b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b5a:	430b      	orrs	r3, r1
 8008b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6a:	6999      	ldr	r1, [r3, #24]
 8008b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	ea40 0301 	orr.w	r3, r0, r1
 8008b74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4bc5      	ldr	r3, [pc, #788]	; (8008e90 <UART_SetConfig+0x384>)
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d004      	beq.n	8008b8a <UART_SetConfig+0x7e>
 8008b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4bc3      	ldr	r3, [pc, #780]	; (8008e94 <UART_SetConfig+0x388>)
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d103      	bne.n	8008b92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b8a:	f7fd fd5d 	bl	8006648 <HAL_RCC_GetPCLK2Freq>
 8008b8e:	6778      	str	r0, [r7, #116]	; 0x74
 8008b90:	e002      	b.n	8008b98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b92:	f7fd fd45 	bl	8006620 <HAL_RCC_GetPCLK1Freq>
 8008b96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ba0:	f040 80b6 	bne.w	8008d10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba6:	461c      	mov	r4, r3
 8008ba8:	f04f 0500 	mov.w	r5, #0
 8008bac:	4622      	mov	r2, r4
 8008bae:	462b      	mov	r3, r5
 8008bb0:	1891      	adds	r1, r2, r2
 8008bb2:	6439      	str	r1, [r7, #64]	; 0x40
 8008bb4:	415b      	adcs	r3, r3
 8008bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8008bb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bbc:	1912      	adds	r2, r2, r4
 8008bbe:	eb45 0303 	adc.w	r3, r5, r3
 8008bc2:	f04f 0000 	mov.w	r0, #0
 8008bc6:	f04f 0100 	mov.w	r1, #0
 8008bca:	00d9      	lsls	r1, r3, #3
 8008bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bd0:	00d0      	lsls	r0, r2, #3
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	1911      	adds	r1, r2, r4
 8008bd8:	6639      	str	r1, [r7, #96]	; 0x60
 8008bda:	416b      	adcs	r3, r5
 8008bdc:	667b      	str	r3, [r7, #100]	; 0x64
 8008bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	1891      	adds	r1, r2, r2
 8008bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bec:	415b      	adcs	r3, r3
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008bf8:	f7f8 f94c 	bl	8000e94 <__aeabi_uldivmod>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4ba5      	ldr	r3, [pc, #660]	; (8008e98 <UART_SetConfig+0x38c>)
 8008c02:	fba3 2302 	umull	r2, r3, r3, r2
 8008c06:	095b      	lsrs	r3, r3, #5
 8008c08:	011e      	lsls	r6, r3, #4
 8008c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c0c:	461c      	mov	r4, r3
 8008c0e:	f04f 0500 	mov.w	r5, #0
 8008c12:	4622      	mov	r2, r4
 8008c14:	462b      	mov	r3, r5
 8008c16:	1891      	adds	r1, r2, r2
 8008c18:	6339      	str	r1, [r7, #48]	; 0x30
 8008c1a:	415b      	adcs	r3, r3
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c22:	1912      	adds	r2, r2, r4
 8008c24:	eb45 0303 	adc.w	r3, r5, r3
 8008c28:	f04f 0000 	mov.w	r0, #0
 8008c2c:	f04f 0100 	mov.w	r1, #0
 8008c30:	00d9      	lsls	r1, r3, #3
 8008c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c36:	00d0      	lsls	r0, r2, #3
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	1911      	adds	r1, r2, r4
 8008c3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c40:	416b      	adcs	r3, r5
 8008c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	f04f 0300 	mov.w	r3, #0
 8008c4e:	1891      	adds	r1, r2, r2
 8008c50:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c52:	415b      	adcs	r3, r3
 8008c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c5e:	f7f8 f919 	bl	8000e94 <__aeabi_uldivmod>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4b8c      	ldr	r3, [pc, #560]	; (8008e98 <UART_SetConfig+0x38c>)
 8008c68:	fba3 1302 	umull	r1, r3, r3, r2
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	2164      	movs	r1, #100	; 0x64
 8008c70:	fb01 f303 	mul.w	r3, r1, r3
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	3332      	adds	r3, #50	; 0x32
 8008c7a:	4a87      	ldr	r2, [pc, #540]	; (8008e98 <UART_SetConfig+0x38c>)
 8008c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c80:	095b      	lsrs	r3, r3, #5
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c88:	441e      	add	r6, r3
 8008c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f04f 0100 	mov.w	r1, #0
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	1894      	adds	r4, r2, r2
 8008c98:	623c      	str	r4, [r7, #32]
 8008c9a:	415b      	adcs	r3, r3
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ca2:	1812      	adds	r2, r2, r0
 8008ca4:	eb41 0303 	adc.w	r3, r1, r3
 8008ca8:	f04f 0400 	mov.w	r4, #0
 8008cac:	f04f 0500 	mov.w	r5, #0
 8008cb0:	00dd      	lsls	r5, r3, #3
 8008cb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008cb6:	00d4      	lsls	r4, r2, #3
 8008cb8:	4622      	mov	r2, r4
 8008cba:	462b      	mov	r3, r5
 8008cbc:	1814      	adds	r4, r2, r0
 8008cbe:	653c      	str	r4, [r7, #80]	; 0x50
 8008cc0:	414b      	adcs	r3, r1
 8008cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8008cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f04f 0300 	mov.w	r3, #0
 8008cce:	1891      	adds	r1, r2, r2
 8008cd0:	61b9      	str	r1, [r7, #24]
 8008cd2:	415b      	adcs	r3, r3
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008cde:	f7f8 f8d9 	bl	8000e94 <__aeabi_uldivmod>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4b6c      	ldr	r3, [pc, #432]	; (8008e98 <UART_SetConfig+0x38c>)
 8008ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8008cec:	095b      	lsrs	r3, r3, #5
 8008cee:	2164      	movs	r1, #100	; 0x64
 8008cf0:	fb01 f303 	mul.w	r3, r1, r3
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	3332      	adds	r3, #50	; 0x32
 8008cfa:	4a67      	ldr	r2, [pc, #412]	; (8008e98 <UART_SetConfig+0x38c>)
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	095b      	lsrs	r3, r3, #5
 8008d02:	f003 0207 	and.w	r2, r3, #7
 8008d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4432      	add	r2, r6
 8008d0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d0e:	e0b9      	b.n	8008e84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d12:	461c      	mov	r4, r3
 8008d14:	f04f 0500 	mov.w	r5, #0
 8008d18:	4622      	mov	r2, r4
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	1891      	adds	r1, r2, r2
 8008d1e:	6139      	str	r1, [r7, #16]
 8008d20:	415b      	adcs	r3, r3
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d28:	1912      	adds	r2, r2, r4
 8008d2a:	eb45 0303 	adc.w	r3, r5, r3
 8008d2e:	f04f 0000 	mov.w	r0, #0
 8008d32:	f04f 0100 	mov.w	r1, #0
 8008d36:	00d9      	lsls	r1, r3, #3
 8008d38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d3c:	00d0      	lsls	r0, r2, #3
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	eb12 0804 	adds.w	r8, r2, r4
 8008d46:	eb43 0905 	adc.w	r9, r3, r5
 8008d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f04f 0100 	mov.w	r1, #0
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	f04f 0300 	mov.w	r3, #0
 8008d5c:	008b      	lsls	r3, r1, #2
 8008d5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d62:	0082      	lsls	r2, r0, #2
 8008d64:	4640      	mov	r0, r8
 8008d66:	4649      	mov	r1, r9
 8008d68:	f7f8 f894 	bl	8000e94 <__aeabi_uldivmod>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4b49      	ldr	r3, [pc, #292]	; (8008e98 <UART_SetConfig+0x38c>)
 8008d72:	fba3 2302 	umull	r2, r3, r3, r2
 8008d76:	095b      	lsrs	r3, r3, #5
 8008d78:	011e      	lsls	r6, r3, #4
 8008d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f04f 0100 	mov.w	r1, #0
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	1894      	adds	r4, r2, r2
 8008d88:	60bc      	str	r4, [r7, #8]
 8008d8a:	415b      	adcs	r3, r3
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d92:	1812      	adds	r2, r2, r0
 8008d94:	eb41 0303 	adc.w	r3, r1, r3
 8008d98:	f04f 0400 	mov.w	r4, #0
 8008d9c:	f04f 0500 	mov.w	r5, #0
 8008da0:	00dd      	lsls	r5, r3, #3
 8008da2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008da6:	00d4      	lsls	r4, r2, #3
 8008da8:	4622      	mov	r2, r4
 8008daa:	462b      	mov	r3, r5
 8008dac:	1814      	adds	r4, r2, r0
 8008dae:	64bc      	str	r4, [r7, #72]	; 0x48
 8008db0:	414b      	adcs	r3, r1
 8008db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f04f 0100 	mov.w	r1, #0
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	008b      	lsls	r3, r1, #2
 8008dc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dcc:	0082      	lsls	r2, r0, #2
 8008dce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008dd2:	f7f8 f85f 	bl	8000e94 <__aeabi_uldivmod>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4b2f      	ldr	r3, [pc, #188]	; (8008e98 <UART_SetConfig+0x38c>)
 8008ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	2164      	movs	r1, #100	; 0x64
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	3332      	adds	r3, #50	; 0x32
 8008dee:	4a2a      	ldr	r2, [pc, #168]	; (8008e98 <UART_SetConfig+0x38c>)
 8008df0:	fba2 2303 	umull	r2, r3, r2, r3
 8008df4:	095b      	lsrs	r3, r3, #5
 8008df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dfa:	441e      	add	r6, r3
 8008dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f04f 0100 	mov.w	r1, #0
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	1894      	adds	r4, r2, r2
 8008e0a:	603c      	str	r4, [r7, #0]
 8008e0c:	415b      	adcs	r3, r3
 8008e0e:	607b      	str	r3, [r7, #4]
 8008e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e14:	1812      	adds	r2, r2, r0
 8008e16:	eb41 0303 	adc.w	r3, r1, r3
 8008e1a:	f04f 0400 	mov.w	r4, #0
 8008e1e:	f04f 0500 	mov.w	r5, #0
 8008e22:	00dd      	lsls	r5, r3, #3
 8008e24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e28:	00d4      	lsls	r4, r2, #3
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	eb12 0a00 	adds.w	sl, r2, r0
 8008e32:	eb43 0b01 	adc.w	fp, r3, r1
 8008e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f04f 0100 	mov.w	r1, #0
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	008b      	lsls	r3, r1, #2
 8008e4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e4e:	0082      	lsls	r2, r0, #2
 8008e50:	4650      	mov	r0, sl
 8008e52:	4659      	mov	r1, fp
 8008e54:	f7f8 f81e 	bl	8000e94 <__aeabi_uldivmod>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <UART_SetConfig+0x38c>)
 8008e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008e62:	095b      	lsrs	r3, r3, #5
 8008e64:	2164      	movs	r1, #100	; 0x64
 8008e66:	fb01 f303 	mul.w	r3, r1, r3
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	011b      	lsls	r3, r3, #4
 8008e6e:	3332      	adds	r3, #50	; 0x32
 8008e70:	4a09      	ldr	r2, [pc, #36]	; (8008e98 <UART_SetConfig+0x38c>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	095b      	lsrs	r3, r3, #5
 8008e78:	f003 020f 	and.w	r2, r3, #15
 8008e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4432      	add	r2, r6
 8008e82:	609a      	str	r2, [r3, #8]
}
 8008e84:	bf00      	nop
 8008e86:	377c      	adds	r7, #124	; 0x7c
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8e:	bf00      	nop
 8008e90:	40011000 	.word	0x40011000
 8008e94:	40011400 	.word	0x40011400
 8008e98:	51eb851f 	.word	0x51eb851f

08008e9c <__NVIC_SetPriority>:
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db0a      	blt.n	8008ec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	490c      	ldr	r1, [pc, #48]	; (8008ee8 <__NVIC_SetPriority+0x4c>)
 8008eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eba:	0112      	lsls	r2, r2, #4
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	440b      	add	r3, r1
 8008ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008ec4:	e00a      	b.n	8008edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	4908      	ldr	r1, [pc, #32]	; (8008eec <__NVIC_SetPriority+0x50>)
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	3b04      	subs	r3, #4
 8008ed4:	0112      	lsls	r2, r2, #4
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	440b      	add	r3, r1
 8008eda:	761a      	strb	r2, [r3, #24]
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	e000e100 	.word	0xe000e100
 8008eec:	e000ed00 	.word	0xe000ed00

08008ef0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <SysTick_Handler+0x1c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ef8:	f001 fd28 	bl	800a94c <xTaskGetSchedulerState>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d001      	beq.n	8008f06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008f02:	f002 fb11 	bl	800b528 <xPortSysTickHandler>
  }
}
 8008f06:	bf00      	nop
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	e000e010 	.word	0xe000e010

08008f10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008f14:	2100      	movs	r1, #0
 8008f16:	f06f 0004 	mvn.w	r0, #4
 8008f1a:	f7ff ffbf 	bl	8008e9c <__NVIC_SetPriority>
#endif
}
 8008f1e:	bf00      	nop
 8008f20:	bd80      	pop	{r7, pc}
	...

08008f24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f2a:	f3ef 8305 	mrs	r3, IPSR
 8008f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008f36:	f06f 0305 	mvn.w	r3, #5
 8008f3a:	607b      	str	r3, [r7, #4]
 8008f3c:	e00c      	b.n	8008f58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <osKernelInitialize+0x44>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f46:	4b08      	ldr	r3, [pc, #32]	; (8008f68 <osKernelInitialize+0x44>)
 8008f48:	2201      	movs	r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	607b      	str	r3, [r7, #4]
 8008f50:	e002      	b.n	8008f58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f58:	687b      	ldr	r3, [r7, #4]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	2000009c 	.word	0x2000009c

08008f6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f72:	f3ef 8305 	mrs	r3, IPSR
 8008f76:	603b      	str	r3, [r7, #0]
  return(result);
 8008f78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f7e:	f06f 0305 	mvn.w	r3, #5
 8008f82:	607b      	str	r3, [r7, #4]
 8008f84:	e010      	b.n	8008fa8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <osKernelStart+0x48>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d109      	bne.n	8008fa2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f8e:	f7ff ffbf 	bl	8008f10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f92:	4b08      	ldr	r3, [pc, #32]	; (8008fb4 <osKernelStart+0x48>)
 8008f94:	2202      	movs	r2, #2
 8008f96:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f98:	f001 f87c 	bl	800a094 <vTaskStartScheduler>
      stat = osOK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	607b      	str	r3, [r7, #4]
 8008fa0:	e002      	b.n	8008fa8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008fa8:	687b      	ldr	r3, [r7, #4]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2000009c 	.word	0x2000009c

08008fb8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08e      	sub	sp, #56	; 0x38
 8008fbc:	af04      	add	r7, sp, #16
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc8:	f3ef 8305 	mrs	r3, IPSR
 8008fcc:	617b      	str	r3, [r7, #20]
  return(result);
 8008fce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d17e      	bne.n	80090d2 <osThreadNew+0x11a>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d07b      	beq.n	80090d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fda:	2380      	movs	r3, #128	; 0x80
 8008fdc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fde:	2318      	movs	r3, #24
 8008fe0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d045      	beq.n	800907e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <osThreadNew+0x48>
        name = attr->name;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d008      	beq.n	8009026 <osThreadNew+0x6e>
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	2b38      	cmp	r3, #56	; 0x38
 8009018:	d805      	bhi.n	8009026 <osThreadNew+0x6e>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <osThreadNew+0x72>
        return (NULL);
 8009026:	2300      	movs	r3, #0
 8009028:	e054      	b.n	80090d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	695b      	ldr	r3, [r3, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	089b      	lsrs	r3, r3, #2
 8009038:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00e      	beq.n	8009060 <osThreadNew+0xa8>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	2bbb      	cmp	r3, #187	; 0xbb
 8009048:	d90a      	bls.n	8009060 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800904e:	2b00      	cmp	r3, #0
 8009050:	d006      	beq.n	8009060 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <osThreadNew+0xa8>
        mem = 1;
 800905a:	2301      	movs	r3, #1
 800905c:	61bb      	str	r3, [r7, #24]
 800905e:	e010      	b.n	8009082 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10c      	bne.n	8009082 <osThreadNew+0xca>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d108      	bne.n	8009082 <osThreadNew+0xca>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d104      	bne.n	8009082 <osThreadNew+0xca>
          mem = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	61bb      	str	r3, [r7, #24]
 800907c:	e001      	b.n	8009082 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d110      	bne.n	80090aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009090:	9202      	str	r2, [sp, #8]
 8009092:	9301      	str	r3, [sp, #4]
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6a3a      	ldr	r2, [r7, #32]
 800909c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f000 fe0c 	bl	8009cbc <xTaskCreateStatic>
 80090a4:	4603      	mov	r3, r0
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e013      	b.n	80090d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d110      	bne.n	80090d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fe57 	bl	8009d76 <xTaskCreate>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d001      	beq.n	80090d2 <osThreadNew+0x11a>
            hTask = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80090d2:	693b      	ldr	r3, [r7, #16]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3728      	adds	r7, #40	; 0x28
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e4:	f3ef 8305 	mrs	r3, IPSR
 80090e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80090ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d003      	beq.n	80090f8 <osDelay+0x1c>
    stat = osErrorISR;
 80090f0:	f06f 0305 	mvn.w	r3, #5
 80090f4:	60fb      	str	r3, [r7, #12]
 80090f6:	e007      	b.n	8009108 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 ff92 	bl	800a02c <vTaskDelay>
    }
  }

  return (stat);
 8009108:	68fb      	ldr	r3, [r7, #12]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a07      	ldr	r2, [pc, #28]	; (8009140 <vApplicationGetIdleTaskMemory+0x2c>)
 8009124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	4a06      	ldr	r2, [pc, #24]	; (8009144 <vApplicationGetIdleTaskMemory+0x30>)
 800912a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2280      	movs	r2, #128	; 0x80
 8009130:	601a      	str	r2, [r3, #0]
}
 8009132:	bf00      	nop
 8009134:	3714      	adds	r7, #20
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	200000a0 	.word	0x200000a0
 8009144:	2000015c 	.word	0x2000015c

08009148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a07      	ldr	r2, [pc, #28]	; (8009174 <vApplicationGetTimerTaskMemory+0x2c>)
 8009158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	4a06      	ldr	r2, [pc, #24]	; (8009178 <vApplicationGetTimerTaskMemory+0x30>)
 800915e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009166:	601a      	str	r2, [r3, #0]
}
 8009168:	bf00      	nop
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	2000035c 	.word	0x2000035c
 8009178:	20000418 	.word	0x20000418

0800917c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f103 0208 	add.w	r2, r3, #8
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f103 0208 	add.w	r2, r3, #8
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f103 0208 	add.w	r2, r3, #8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091ca:	bf00      	nop
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091d6:	b480      	push	{r7}
 80091d8:	b085      	sub	sp, #20
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	601a      	str	r2, [r3, #0]
}
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr

0800921e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800921e:	b480      	push	{r7}
 8009220:	b085      	sub	sp, #20
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
 8009226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009234:	d103      	bne.n	800923e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e00c      	b.n	8009258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3308      	adds	r3, #8
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e002      	b.n	800924c <vListInsert+0x2e>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	60fb      	str	r3, [r7, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68ba      	ldr	r2, [r7, #8]
 8009254:	429a      	cmp	r2, r3
 8009256:	d2f6      	bcs.n	8009246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	683a      	ldr	r2, [r7, #0]
 8009272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	601a      	str	r2, [r3, #0]
}
 8009284:	bf00      	nop
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6892      	ldr	r2, [r2, #8]
 80092a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6852      	ldr	r2, [r2, #4]
 80092b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d103      	bne.n	80092c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	1e5a      	subs	r2, r3, #1
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800930a:	bf00      	nop
 800930c:	e7fe      	b.n	800930c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800930e:	f002 f879 	bl	800b404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800931e:	fb01 f303 	mul.w	r3, r1, r3
 8009322:	441a      	add	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933e:	3b01      	subs	r3, #1
 8009340:	68f9      	ldr	r1, [r7, #12]
 8009342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009344:	fb01 f303 	mul.w	r3, r1, r3
 8009348:	441a      	add	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	22ff      	movs	r2, #255	; 0xff
 8009352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	22ff      	movs	r2, #255	; 0xff
 800935a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d114      	bne.n	800938e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01a      	beq.n	80093a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3310      	adds	r3, #16
 8009370:	4618      	mov	r0, r3
 8009372:	f001 f929 	bl	800a5c8 <xTaskRemoveFromEventList>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d012      	beq.n	80093a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800937c:	4b0c      	ldr	r3, [pc, #48]	; (80093b0 <xQueueGenericReset+0xcc>)
 800937e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	e009      	b.n	80093a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3310      	adds	r3, #16
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff fef2 	bl	800917c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3324      	adds	r3, #36	; 0x24
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff feed 	bl	800917c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80093a2:	f002 f85f 	bl	800b464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80093a6:	2301      	movs	r3, #1
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	e000ed04 	.word	0xe000ed04

080093b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08e      	sub	sp, #56	; 0x38
 80093b8:	af02      	add	r7, sp, #8
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10a      	bne.n	80093fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <xQueueGenericCreateStatic+0x52>
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <xQueueGenericCreateStatic+0x56>
 8009406:	2301      	movs	r3, #1
 8009408:	e000      	b.n	800940c <xQueueGenericCreateStatic+0x58>
 800940a:	2300      	movs	r3, #0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	623b      	str	r3, [r7, #32]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <xQueueGenericCreateStatic+0x7e>
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <xQueueGenericCreateStatic+0x82>
 8009432:	2301      	movs	r3, #1
 8009434:	e000      	b.n	8009438 <xQueueGenericCreateStatic+0x84>
 8009436:	2300      	movs	r3, #0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	61fb      	str	r3, [r7, #28]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009452:	2350      	movs	r3, #80	; 0x50
 8009454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b50      	cmp	r3, #80	; 0x50
 800945a:	d00a      	beq.n	8009472 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800945c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009460:	f383 8811 	msr	BASEPRI, r3
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	61bb      	str	r3, [r7, #24]
}
 800946e:	bf00      	nop
 8009470:	e7fe      	b.n	8009470 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009472:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00d      	beq.n	800949a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800947e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009486:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	4613      	mov	r3, r2
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	68b9      	ldr	r1, [r7, #8]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f805 	bl	80094a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800949a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800949c:	4618      	mov	r0, r3
 800949e:	3730      	adds	r7, #48	; 0x30
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d103      	bne.n	80094c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	e002      	b.n	80094c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094d2:	2101      	movs	r1, #1
 80094d4:	69b8      	ldr	r0, [r7, #24]
 80094d6:	f7ff ff05 	bl	80092e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08e      	sub	sp, #56	; 0x38
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094fa:	2300      	movs	r3, #0
 80094fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <xQueueGenericSend+0x32>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d103      	bne.n	800952c <xQueueGenericSend+0x40>
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <xQueueGenericSend+0x44>
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <xQueueGenericSend+0x46>
 8009530:	2300      	movs	r3, #0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <xQueueGenericSend+0x60>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	2b02      	cmp	r3, #2
 8009550:	d103      	bne.n	800955a <xQueueGenericSend+0x6e>
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009556:	2b01      	cmp	r3, #1
 8009558:	d101      	bne.n	800955e <xQueueGenericSend+0x72>
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <xQueueGenericSend+0x74>
 800955e:	2300      	movs	r3, #0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xQueueGenericSend+0x8e>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	623b      	str	r3, [r7, #32]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800957a:	f001 f9e7 	bl	800a94c <xTaskGetSchedulerState>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <xQueueGenericSend+0x9e>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <xQueueGenericSend+0xa2>
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <xQueueGenericSend+0xa4>
 800958e:	2300      	movs	r3, #0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10a      	bne.n	80095aa <xQueueGenericSend+0xbe>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	61fb      	str	r3, [r7, #28]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095aa:	f001 ff2b 	bl	800b404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d302      	bcc.n	80095c0 <xQueueGenericSend+0xd4>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d129      	bne.n	8009614 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095c6:	f000 fa0b 	bl	80099e0 <prvCopyDataToQueue>
 80095ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d010      	beq.n	80095f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d6:	3324      	adds	r3, #36	; 0x24
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fff5 	bl	800a5c8 <xTaskRemoveFromEventList>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d013      	beq.n	800960c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095e4:	4b3f      	ldr	r3, [pc, #252]	; (80096e4 <xQueueGenericSend+0x1f8>)
 80095e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	e00a      	b.n	800960c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d007      	beq.n	800960c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095fc:	4b39      	ldr	r3, [pc, #228]	; (80096e4 <xQueueGenericSend+0x1f8>)
 80095fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800960c:	f001 ff2a 	bl	800b464 <vPortExitCritical>
				return pdPASS;
 8009610:	2301      	movs	r3, #1
 8009612:	e063      	b.n	80096dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d103      	bne.n	8009622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800961a:	f001 ff23 	bl	800b464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800961e:	2300      	movs	r3, #0
 8009620:	e05c      	b.n	80096dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009628:	f107 0314 	add.w	r3, r7, #20
 800962c:	4618      	mov	r0, r3
 800962e:	f001 f82f 	bl	800a690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009632:	2301      	movs	r3, #1
 8009634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009636:	f001 ff15 	bl	800b464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800963a:	f000 fd9b 	bl	800a174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800963e:	f001 fee1 	bl	800b404 <vPortEnterCritical>
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009648:	b25b      	sxtb	r3, r3
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800964e:	d103      	bne.n	8009658 <xQueueGenericSend+0x16c>
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800965e:	b25b      	sxtb	r3, r3
 8009660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009664:	d103      	bne.n	800966e <xQueueGenericSend+0x182>
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800966e:	f001 fef9 	bl	800b464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009672:	1d3a      	adds	r2, r7, #4
 8009674:	f107 0314 	add.w	r3, r7, #20
 8009678:	4611      	mov	r1, r2
 800967a:	4618      	mov	r0, r3
 800967c:	f001 f81e 	bl	800a6bc <xTaskCheckForTimeOut>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d124      	bne.n	80096d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009688:	f000 faa2 	bl	8009bd0 <prvIsQueueFull>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d018      	beq.n	80096c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	3310      	adds	r3, #16
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f000 ff44 	bl	800a528 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80096a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096a2:	f000 fa2d 	bl	8009b00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80096a6:	f000 fd73 	bl	800a190 <xTaskResumeAll>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f47f af7c 	bne.w	80095aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80096b2:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <xQueueGenericSend+0x1f8>)
 80096b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	e772      	b.n	80095aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096c6:	f000 fa1b 	bl	8009b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096ca:	f000 fd61 	bl	800a190 <xTaskResumeAll>
 80096ce:	e76c      	b.n	80095aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d2:	f000 fa15 	bl	8009b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096d6:	f000 fd5b 	bl	800a190 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3738      	adds	r7, #56	; 0x38
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b090      	sub	sp, #64	; 0x40
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <xQueueGenericSendFromISR+0x3c>
 800971c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009720:	2b00      	cmp	r3, #0
 8009722:	d101      	bne.n	8009728 <xQueueGenericSendFromISR+0x40>
 8009724:	2301      	movs	r3, #1
 8009726:	e000      	b.n	800972a <xQueueGenericSendFromISR+0x42>
 8009728:	2300      	movs	r3, #0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d103      	bne.n	8009752 <xQueueGenericSendFromISR+0x6a>
 800974a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <xQueueGenericSendFromISR+0x6e>
 8009752:	2301      	movs	r3, #1
 8009754:	e000      	b.n	8009758 <xQueueGenericSendFromISR+0x70>
 8009756:	2300      	movs	r3, #0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10a      	bne.n	8009772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	623b      	str	r3, [r7, #32]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009772:	f001 ff29 	bl	800b5c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009776:	f3ef 8211 	mrs	r2, BASEPRI
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61fa      	str	r2, [r7, #28]
 800978c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800978e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800979a:	429a      	cmp	r2, r3
 800979c:	d302      	bcc.n	80097a4 <xQueueGenericSendFromISR+0xbc>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d12f      	bne.n	8009804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	68b9      	ldr	r1, [r7, #8]
 80097b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ba:	f000 f911 	bl	80099e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c6:	d112      	bne.n	80097ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d016      	beq.n	80097fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d2:	3324      	adds	r3, #36	; 0x24
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fef7 	bl	800a5c8 <xTaskRemoveFromEventList>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00e      	beq.n	80097fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00b      	beq.n	80097fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	e007      	b.n	80097fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097f2:	3301      	adds	r3, #1
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	b25a      	sxtb	r2, r3
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097fe:	2301      	movs	r3, #1
 8009800:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009802:	e001      	b.n	8009808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009804:	2300      	movs	r3, #0
 8009806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009816:	4618      	mov	r0, r3
 8009818:	3740      	adds	r7, #64	; 0x40
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08c      	sub	sp, #48	; 0x30
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800982c:	2300      	movs	r3, #0
 800982e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10a      	bne.n	8009850 <xQueueReceive+0x30>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	623b      	str	r3, [r7, #32]
}
 800984c:	bf00      	nop
 800984e:	e7fe      	b.n	800984e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d103      	bne.n	800985e <xQueueReceive+0x3e>
 8009856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <xQueueReceive+0x42>
 800985e:	2301      	movs	r3, #1
 8009860:	e000      	b.n	8009864 <xQueueReceive+0x44>
 8009862:	2300      	movs	r3, #0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <xQueueReceive+0x5e>
	__asm volatile
 8009868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986c:	f383 8811 	msr	BASEPRI, r3
 8009870:	f3bf 8f6f 	isb	sy
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	61fb      	str	r3, [r7, #28]
}
 800987a:	bf00      	nop
 800987c:	e7fe      	b.n	800987c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800987e:	f001 f865 	bl	800a94c <xTaskGetSchedulerState>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <xQueueReceive+0x6e>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <xQueueReceive+0x72>
 800988e:	2301      	movs	r3, #1
 8009890:	e000      	b.n	8009894 <xQueueReceive+0x74>
 8009892:	2300      	movs	r3, #0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d10a      	bne.n	80098ae <xQueueReceive+0x8e>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	61bb      	str	r3, [r7, #24]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098ae:	f001 fda9 	bl	800b404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01f      	beq.n	80098fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098be:	68b9      	ldr	r1, [r7, #8]
 80098c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098c2:	f000 f8f7 	bl	8009ab4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	1e5a      	subs	r2, r3, #1
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00f      	beq.n	80098f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	3310      	adds	r3, #16
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fe74 	bl	800a5c8 <xTaskRemoveFromEventList>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098e6:	4b3d      	ldr	r3, [pc, #244]	; (80099dc <xQueueReceive+0x1bc>)
 80098e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098f6:	f001 fdb5 	bl	800b464 <vPortExitCritical>
				return pdPASS;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e069      	b.n	80099d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d103      	bne.n	800990c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009904:	f001 fdae 	bl	800b464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009908:	2300      	movs	r3, #0
 800990a:	e062      	b.n	80099d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009912:	f107 0310 	add.w	r3, r7, #16
 8009916:	4618      	mov	r0, r3
 8009918:	f000 feba 	bl	800a690 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800991c:	2301      	movs	r3, #1
 800991e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009920:	f001 fda0 	bl	800b464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009924:	f000 fc26 	bl	800a174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009928:	f001 fd6c 	bl	800b404 <vPortEnterCritical>
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009932:	b25b      	sxtb	r3, r3
 8009934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009938:	d103      	bne.n	8009942 <xQueueReceive+0x122>
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009948:	b25b      	sxtb	r3, r3
 800994a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800994e:	d103      	bne.n	8009958 <xQueueReceive+0x138>
 8009950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009958:	f001 fd84 	bl	800b464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800995c:	1d3a      	adds	r2, r7, #4
 800995e:	f107 0310 	add.w	r3, r7, #16
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f000 fea9 	bl	800a6bc <xTaskCheckForTimeOut>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d123      	bne.n	80099b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009972:	f000 f917 	bl	8009ba4 <prvIsQueueEmpty>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d017      	beq.n	80099ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	3324      	adds	r3, #36	; 0x24
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	4611      	mov	r1, r2
 8009984:	4618      	mov	r0, r3
 8009986:	f000 fdcf 	bl	800a528 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800998a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800998c:	f000 f8b8 	bl	8009b00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009990:	f000 fbfe 	bl	800a190 <xTaskResumeAll>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d189      	bne.n	80098ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800999a:	4b10      	ldr	r3, [pc, #64]	; (80099dc <xQueueReceive+0x1bc>)
 800999c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	e780      	b.n	80098ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ae:	f000 f8a7 	bl	8009b00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099b2:	f000 fbed 	bl	800a190 <xTaskResumeAll>
 80099b6:	e77a      	b.n	80098ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ba:	f000 f8a1 	bl	8009b00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099be:	f000 fbe7 	bl	800a190 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c4:	f000 f8ee 	bl	8009ba4 <prvIsQueueEmpty>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f43f af6f 	beq.w	80098ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3730      	adds	r7, #48	; 0x30
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10d      	bne.n	8009a1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d14d      	bne.n	8009aa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 ffbc 	bl	800a988 <xTaskPriorityDisinherit>
 8009a10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	609a      	str	r2, [r3, #8]
 8009a18:	e043      	b.n	8009aa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d119      	bne.n	8009a54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6858      	ldr	r0, [r3, #4]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	461a      	mov	r2, r3
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	f004 ff08 	bl	800e840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	441a      	add	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d32b      	bcc.n	8009aa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	e026      	b.n	8009aa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68d8      	ldr	r0, [r3, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	f004 feee 	bl	800e840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6c:	425b      	negs	r3, r3
 8009a6e:	441a      	add	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d207      	bcs.n	8009a90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a88:	425b      	negs	r3, r3
 8009a8a:	441a      	add	r2, r3
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d105      	bne.n	8009aa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009aaa:	697b      	ldr	r3, [r7, #20]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d018      	beq.n	8009af8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68da      	ldr	r2, [r3, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	441a      	add	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d303      	bcc.n	8009ae8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	68d9      	ldr	r1, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	461a      	mov	r2, r3
 8009af2:	6838      	ldr	r0, [r7, #0]
 8009af4:	f004 fea4 	bl	800e840 <memcpy>
	}
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b08:	f001 fc7c 	bl	800b404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b14:	e011      	b.n	8009b3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d012      	beq.n	8009b44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3324      	adds	r3, #36	; 0x24
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 fd50 	bl	800a5c8 <xTaskRemoveFromEventList>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b2e:	f000 fe27 	bl	800a780 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b32:	7bfb      	ldrb	r3, [r7, #15]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dce9      	bgt.n	8009b16 <prvUnlockQueue+0x16>
 8009b42:	e000      	b.n	8009b46 <prvUnlockQueue+0x46>
					break;
 8009b44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	22ff      	movs	r2, #255	; 0xff
 8009b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b4e:	f001 fc89 	bl	800b464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b52:	f001 fc57 	bl	800b404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b5e:	e011      	b.n	8009b84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d012      	beq.n	8009b8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3310      	adds	r3, #16
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 fd2b 	bl	800a5c8 <xTaskRemoveFromEventList>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b78:	f000 fe02 	bl	800a780 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dce9      	bgt.n	8009b60 <prvUnlockQueue+0x60>
 8009b8c:	e000      	b.n	8009b90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	22ff      	movs	r2, #255	; 0xff
 8009b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b98:	f001 fc64 	bl	800b464 <vPortExitCritical>
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bac:	f001 fc2a 	bl	800b404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d102      	bne.n	8009bbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	e001      	b.n	8009bc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bc2:	f001 fc4f 	bl	800b464 <vPortExitCritical>

	return xReturn;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bd8:	f001 fc14 	bl	800b404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d102      	bne.n	8009bee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009be8:	2301      	movs	r3, #1
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e001      	b.n	8009bf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bf2:	f001 fc37 	bl	800b464 <vPortExitCritical>

	return xReturn;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
 8009c0e:	e014      	b.n	8009c3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c10:	4a0f      	ldr	r2, [pc, #60]	; (8009c50 <vQueueAddToRegistry+0x50>)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c1c:	490c      	ldr	r1, [pc, #48]	; (8009c50 <vQueueAddToRegistry+0x50>)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c26:	4a0a      	ldr	r2, [pc, #40]	; (8009c50 <vQueueAddToRegistry+0x50>)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c32:	e006      	b.n	8009c42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	d9e7      	bls.n	8009c10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	3714      	adds	r7, #20
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	20004dd4 	.word	0x20004dd4

08009c54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c64:	f001 fbce 	bl	800b404 <vPortEnterCritical>
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c6e:	b25b      	sxtb	r3, r3
 8009c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c74:	d103      	bne.n	8009c7e <vQueueWaitForMessageRestricted+0x2a>
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c84:	b25b      	sxtb	r3, r3
 8009c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c8a:	d103      	bne.n	8009c94 <vQueueWaitForMessageRestricted+0x40>
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c94:	f001 fbe6 	bl	800b464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d106      	bne.n	8009cae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	3324      	adds	r3, #36	; 0x24
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fc61 	bl	800a570 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cae:	6978      	ldr	r0, [r7, #20]
 8009cb0:	f7ff ff26 	bl	8009b00 <prvUnlockQueue>
	}
 8009cb4:	bf00      	nop
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08e      	sub	sp, #56	; 0x38
 8009cc0:	af04      	add	r7, sp, #16
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10a      	bne.n	8009ce6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	623b      	str	r3, [r7, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	e7fe      	b.n	8009ce4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <xTaskCreateStatic+0x46>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	61fb      	str	r3, [r7, #28]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d02:	23bc      	movs	r3, #188	; 0xbc
 8009d04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2bbc      	cmp	r3, #188	; 0xbc
 8009d0a:	d00a      	beq.n	8009d22 <xTaskCreateStatic+0x66>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	61bb      	str	r3, [r7, #24]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d01e      	beq.n	8009d68 <xTaskCreateStatic+0xac>
 8009d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d01b      	beq.n	8009d68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d42:	2300      	movs	r3, #0
 8009d44:	9303      	str	r3, [sp, #12]
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	9302      	str	r3, [sp, #8]
 8009d4a:	f107 0314 	add.w	r3, r7, #20
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	68b9      	ldr	r1, [r7, #8]
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 f850 	bl	8009e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d62:	f000 f8f3 	bl	8009f4c <prvAddNewTaskToReadyList>
 8009d66:	e001      	b.n	8009d6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d6c:	697b      	ldr	r3, [r7, #20]
	}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3728      	adds	r7, #40	; 0x28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b08c      	sub	sp, #48	; 0x30
 8009d7a:	af04      	add	r7, sp, #16
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	603b      	str	r3, [r7, #0]
 8009d82:	4613      	mov	r3, r2
 8009d84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 fc5c 	bl	800b648 <pvPortMalloc>
 8009d90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00e      	beq.n	8009db6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d98:	20bc      	movs	r0, #188	; 0xbc
 8009d9a:	f001 fc55 	bl	800b648 <pvPortMalloc>
 8009d9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d003      	beq.n	8009dae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	631a      	str	r2, [r3, #48]	; 0x30
 8009dac:	e005      	b.n	8009dba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009dae:	6978      	ldr	r0, [r7, #20]
 8009db0:	f001 fd16 	bl	800b7e0 <vPortFree>
 8009db4:	e001      	b.n	8009dba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009db6:	2300      	movs	r3, #0
 8009db8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d017      	beq.n	8009df0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009dc8:	88fa      	ldrh	r2, [r7, #6]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9303      	str	r3, [sp, #12]
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	9302      	str	r3, [sp, #8]
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 f80e 	bl	8009e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009de4:	69f8      	ldr	r0, [r7, #28]
 8009de6:	f000 f8b1 	bl	8009f4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dea:	2301      	movs	r3, #1
 8009dec:	61bb      	str	r3, [r7, #24]
 8009dee:	e002      	b.n	8009df6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009df4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009df6:	69bb      	ldr	r3, [r7, #24]
	}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3720      	adds	r7, #32
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	461a      	mov	r2, r3
 8009e18:	21a5      	movs	r1, #165	; 0xa5
 8009e1a:	f004 fd1f 	bl	800e85c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	f023 0307 	bic.w	r3, r3, #7
 8009e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	617b      	str	r3, [r7, #20]
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d01f      	beq.n	8009e9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61fb      	str	r3, [r7, #28]
 8009e62:	e012      	b.n	8009e8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e64:	68ba      	ldr	r2, [r7, #8]
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	4413      	add	r3, r2
 8009e6a:	7819      	ldrb	r1, [r3, #0]
 8009e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	4413      	add	r3, r2
 8009e72:	3334      	adds	r3, #52	; 0x34
 8009e74:	460a      	mov	r2, r1
 8009e76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d006      	beq.n	8009e92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	3301      	adds	r3, #1
 8009e88:	61fb      	str	r3, [r7, #28]
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	2b0f      	cmp	r3, #15
 8009e8e:	d9e9      	bls.n	8009e64 <prvInitialiseNewTask+0x64>
 8009e90:	e000      	b.n	8009e94 <prvInitialiseNewTask+0x94>
			{
				break;
 8009e92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e9c:	e003      	b.n	8009ea6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	2b37      	cmp	r3, #55	; 0x37
 8009eaa:	d901      	bls.n	8009eb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009eac:	2337      	movs	r3, #55	; 0x37
 8009eae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff f978 	bl	80091bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	3318      	adds	r3, #24
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff f973 	bl	80091bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	3354      	adds	r3, #84	; 0x54
 8009f00:	2260      	movs	r2, #96	; 0x60
 8009f02:	2100      	movs	r1, #0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f004 fca9 	bl	800e85c <memset>
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	4a0c      	ldr	r2, [pc, #48]	; (8009f40 <prvInitialiseNewTask+0x140>)
 8009f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	4a0c      	ldr	r2, [pc, #48]	; (8009f44 <prvInitialiseNewTask+0x144>)
 8009f14:	65da      	str	r2, [r3, #92]	; 0x5c
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	4a0b      	ldr	r2, [pc, #44]	; (8009f48 <prvInitialiseNewTask+0x148>)
 8009f1a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	68f9      	ldr	r1, [r7, #12]
 8009f20:	69b8      	ldr	r0, [r7, #24]
 8009f22:	f001 f941 	bl	800b1a8 <pxPortInitialiseStack>
 8009f26:	4602      	mov	r2, r0
 8009f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f38:	bf00      	nop
 8009f3a:	3720      	adds	r7, #32
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	08011b44 	.word	0x08011b44
 8009f44:	08011b64 	.word	0x08011b64
 8009f48:	08011b24 	.word	0x08011b24

08009f4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f54:	f001 fa56 	bl	800b404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f58:	4b2d      	ldr	r3, [pc, #180]	; (800a010 <prvAddNewTaskToReadyList+0xc4>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	4a2c      	ldr	r2, [pc, #176]	; (800a010 <prvAddNewTaskToReadyList+0xc4>)
 8009f60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f62:	4b2c      	ldr	r3, [pc, #176]	; (800a014 <prvAddNewTaskToReadyList+0xc8>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f6a:	4a2a      	ldr	r2, [pc, #168]	; (800a014 <prvAddNewTaskToReadyList+0xc8>)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f70:	4b27      	ldr	r3, [pc, #156]	; (800a010 <prvAddNewTaskToReadyList+0xc4>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d110      	bne.n	8009f9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f78:	f000 fc26 	bl	800a7c8 <prvInitialiseTaskLists>
 8009f7c:	e00d      	b.n	8009f9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f7e:	4b26      	ldr	r3, [pc, #152]	; (800a018 <prvAddNewTaskToReadyList+0xcc>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d109      	bne.n	8009f9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f86:	4b23      	ldr	r3, [pc, #140]	; (800a014 <prvAddNewTaskToReadyList+0xc8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d802      	bhi.n	8009f9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f94:	4a1f      	ldr	r2, [pc, #124]	; (800a014 <prvAddNewTaskToReadyList+0xc8>)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f9a:	4b20      	ldr	r3, [pc, #128]	; (800a01c <prvAddNewTaskToReadyList+0xd0>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	4a1e      	ldr	r2, [pc, #120]	; (800a01c <prvAddNewTaskToReadyList+0xd0>)
 8009fa2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009fa4:	4b1d      	ldr	r3, [pc, #116]	; (800a01c <prvAddNewTaskToReadyList+0xd0>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb0:	4b1b      	ldr	r3, [pc, #108]	; (800a020 <prvAddNewTaskToReadyList+0xd4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d903      	bls.n	8009fc0 <prvAddNewTaskToReadyList+0x74>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	4a18      	ldr	r2, [pc, #96]	; (800a020 <prvAddNewTaskToReadyList+0xd4>)
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4a15      	ldr	r2, [pc, #84]	; (800a024 <prvAddNewTaskToReadyList+0xd8>)
 8009fce:	441a      	add	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3304      	adds	r3, #4
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7ff f8fd 	bl	80091d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fdc:	f001 fa42 	bl	800b464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fe0:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <prvAddNewTaskToReadyList+0xcc>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00e      	beq.n	800a006 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <prvAddNewTaskToReadyList+0xc8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d207      	bcs.n	800a006 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ff6:	4b0c      	ldr	r3, [pc, #48]	; (800a028 <prvAddNewTaskToReadyList+0xdc>)
 8009ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ffc:	601a      	str	r2, [r3, #0]
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a006:	bf00      	nop
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20000cec 	.word	0x20000cec
 800a014:	20000818 	.word	0x20000818
 800a018:	20000cf8 	.word	0x20000cf8
 800a01c:	20000d08 	.word	0x20000d08
 800a020:	20000cf4 	.word	0x20000cf4
 800a024:	2000081c 	.word	0x2000081c
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d017      	beq.n	800a06e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a03e:	4b13      	ldr	r3, [pc, #76]	; (800a08c <vTaskDelay+0x60>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00a      	beq.n	800a05c <vTaskDelay+0x30>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	60bb      	str	r3, [r7, #8]
}
 800a058:	bf00      	nop
 800a05a:	e7fe      	b.n	800a05a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a05c:	f000 f88a 	bl	800a174 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a060:	2100      	movs	r1, #0
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fcfe 	bl	800aa64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a068:	f000 f892 	bl	800a190 <xTaskResumeAll>
 800a06c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d107      	bne.n	800a084 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a074:	4b06      	ldr	r3, [pc, #24]	; (800a090 <vTaskDelay+0x64>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	20000d14 	.word	0x20000d14
 800a090:	e000ed04 	.word	0xe000ed04

0800a094 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	; 0x28
 800a098:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0a2:	463a      	mov	r2, r7
 800a0a4:	1d39      	adds	r1, r7, #4
 800a0a6:	f107 0308 	add.w	r3, r7, #8
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff f832 	bl	8009114 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	9202      	str	r2, [sp, #8]
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	4924      	ldr	r1, [pc, #144]	; (800a154 <vTaskStartScheduler+0xc0>)
 800a0c4:	4824      	ldr	r0, [pc, #144]	; (800a158 <vTaskStartScheduler+0xc4>)
 800a0c6:	f7ff fdf9 	bl	8009cbc <xTaskCreateStatic>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4a23      	ldr	r2, [pc, #140]	; (800a15c <vTaskStartScheduler+0xc8>)
 800a0ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0d0:	4b22      	ldr	r3, [pc, #136]	; (800a15c <vTaskStartScheduler+0xc8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	e001      	b.n	800a0e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d102      	bne.n	800a0ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0e8:	f000 fd10 	bl	800ab0c <xTimerCreateTimerTask>
 800a0ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d11b      	bne.n	800a12c <vTaskStartScheduler+0x98>
	__asm volatile
 800a0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f8:	f383 8811 	msr	BASEPRI, r3
 800a0fc:	f3bf 8f6f 	isb	sy
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	613b      	str	r3, [r7, #16]
}
 800a106:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <vTaskStartScheduler+0xcc>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3354      	adds	r3, #84	; 0x54
 800a10e:	4a15      	ldr	r2, [pc, #84]	; (800a164 <vTaskStartScheduler+0xd0>)
 800a110:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <vTaskStartScheduler+0xd4>)
 800a114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a118:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a11a:	4b14      	ldr	r3, [pc, #80]	; (800a16c <vTaskStartScheduler+0xd8>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a120:	4b13      	ldr	r3, [pc, #76]	; (800a170 <vTaskStartScheduler+0xdc>)
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a126:	f001 f8cb 	bl	800b2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a12a:	e00e      	b.n	800a14a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a132:	d10a      	bne.n	800a14a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	60fb      	str	r3, [r7, #12]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <vTaskStartScheduler+0xb4>
}
 800a14a:	bf00      	nop
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	08010fd8 	.word	0x08010fd8
 800a158:	0800a799 	.word	0x0800a799
 800a15c:	20000d10 	.word	0x20000d10
 800a160:	20000818 	.word	0x20000818
 800a164:	20000010 	.word	0x20000010
 800a168:	20000d0c 	.word	0x20000d0c
 800a16c:	20000cf8 	.word	0x20000cf8
 800a170:	20000cf0 	.word	0x20000cf0

0800a174 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a174:	b480      	push	{r7}
 800a176:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a178:	4b04      	ldr	r3, [pc, #16]	; (800a18c <vTaskSuspendAll+0x18>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	3301      	adds	r3, #1
 800a17e:	4a03      	ldr	r2, [pc, #12]	; (800a18c <vTaskSuspendAll+0x18>)
 800a180:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a182:	bf00      	nop
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	20000d14 	.word	0x20000d14

0800a190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a19a:	2300      	movs	r3, #0
 800a19c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a19e:	4b42      	ldr	r3, [pc, #264]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <xTaskResumeAll+0x2c>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	603b      	str	r3, [r7, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	e7fe      	b.n	800a1ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1bc:	f001 f922 	bl	800b404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1c0:	4b39      	ldr	r3, [pc, #228]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	4a38      	ldr	r2, [pc, #224]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ca:	4b37      	ldr	r3, [pc, #220]	; (800a2a8 <xTaskResumeAll+0x118>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d162      	bne.n	800a298 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1d2:	4b36      	ldr	r3, [pc, #216]	; (800a2ac <xTaskResumeAll+0x11c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d05e      	beq.n	800a298 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1da:	e02f      	b.n	800a23c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1dc:	4b34      	ldr	r3, [pc, #208]	; (800a2b0 <xTaskResumeAll+0x120>)
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3318      	adds	r3, #24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7ff f851 	bl	8009290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7ff f84c 	bl	8009290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fc:	4b2d      	ldr	r3, [pc, #180]	; (800a2b4 <xTaskResumeAll+0x124>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d903      	bls.n	800a20c <xTaskResumeAll+0x7c>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a208:	4a2a      	ldr	r2, [pc, #168]	; (800a2b4 <xTaskResumeAll+0x124>)
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4a27      	ldr	r2, [pc, #156]	; (800a2b8 <xTaskResumeAll+0x128>)
 800a21a:	441a      	add	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3304      	adds	r3, #4
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f7fe ffd7 	bl	80091d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22c:	4b23      	ldr	r3, [pc, #140]	; (800a2bc <xTaskResumeAll+0x12c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	429a      	cmp	r2, r3
 800a234:	d302      	bcc.n	800a23c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a236:	4b22      	ldr	r3, [pc, #136]	; (800a2c0 <xTaskResumeAll+0x130>)
 800a238:	2201      	movs	r2, #1
 800a23a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a23c:	4b1c      	ldr	r3, [pc, #112]	; (800a2b0 <xTaskResumeAll+0x120>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1cb      	bne.n	800a1dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a24a:	f000 fb5f 	bl	800a90c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a24e:	4b1d      	ldr	r3, [pc, #116]	; (800a2c4 <xTaskResumeAll+0x134>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d010      	beq.n	800a27c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a25a:	f000 f847 	bl	800a2ec <xTaskIncrementTick>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a264:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <xTaskResumeAll+0x130>)
 800a266:	2201      	movs	r2, #1
 800a268:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f1      	bne.n	800a25a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <xTaskResumeAll+0x134>)
 800a278:	2200      	movs	r2, #0
 800a27a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a27c:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <xTaskResumeAll+0x130>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d009      	beq.n	800a298 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a284:	2301      	movs	r3, #1
 800a286:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a288:	4b0f      	ldr	r3, [pc, #60]	; (800a2c8 <xTaskResumeAll+0x138>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a298:	f001 f8e4 	bl	800b464 <vPortExitCritical>

	return xAlreadyYielded;
 800a29c:	68bb      	ldr	r3, [r7, #8]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	20000d14 	.word	0x20000d14
 800a2ac:	20000cec 	.word	0x20000cec
 800a2b0:	20000cac 	.word	0x20000cac
 800a2b4:	20000cf4 	.word	0x20000cf4
 800a2b8:	2000081c 	.word	0x2000081c
 800a2bc:	20000818 	.word	0x20000818
 800a2c0:	20000d00 	.word	0x20000d00
 800a2c4:	20000cfc 	.word	0x20000cfc
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2d2:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <xTaskGetTickCount+0x1c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2d8:	687b      	ldr	r3, [r7, #4]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	20000cf0 	.word	0x20000cf0

0800a2ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2f6:	4b4f      	ldr	r3, [pc, #316]	; (800a434 <xTaskIncrementTick+0x148>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f040 808f 	bne.w	800a41e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a300:	4b4d      	ldr	r3, [pc, #308]	; (800a438 <xTaskIncrementTick+0x14c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a308:	4a4b      	ldr	r2, [pc, #300]	; (800a438 <xTaskIncrementTick+0x14c>)
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d120      	bne.n	800a356 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a314:	4b49      	ldr	r3, [pc, #292]	; (800a43c <xTaskIncrementTick+0x150>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <xTaskIncrementTick+0x48>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	603b      	str	r3, [r7, #0]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <xTaskIncrementTick+0x46>
 800a334:	4b41      	ldr	r3, [pc, #260]	; (800a43c <xTaskIncrementTick+0x150>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	4b41      	ldr	r3, [pc, #260]	; (800a440 <xTaskIncrementTick+0x154>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a3f      	ldr	r2, [pc, #252]	; (800a43c <xTaskIncrementTick+0x150>)
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	4a3f      	ldr	r2, [pc, #252]	; (800a440 <xTaskIncrementTick+0x154>)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	4b3e      	ldr	r3, [pc, #248]	; (800a444 <xTaskIncrementTick+0x158>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	4a3d      	ldr	r2, [pc, #244]	; (800a444 <xTaskIncrementTick+0x158>)
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	f000 fadb 	bl	800a90c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a356:	4b3c      	ldr	r3, [pc, #240]	; (800a448 <xTaskIncrementTick+0x15c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	693a      	ldr	r2, [r7, #16]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d349      	bcc.n	800a3f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a360:	4b36      	ldr	r3, [pc, #216]	; (800a43c <xTaskIncrementTick+0x150>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d104      	bne.n	800a374 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a36a:	4b37      	ldr	r3, [pc, #220]	; (800a448 <xTaskIncrementTick+0x15c>)
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a370:	601a      	str	r2, [r3, #0]
					break;
 800a372:	e03f      	b.n	800a3f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a374:	4b31      	ldr	r3, [pc, #196]	; (800a43c <xTaskIncrementTick+0x150>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d203      	bcs.n	800a394 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a38c:	4a2e      	ldr	r2, [pc, #184]	; (800a448 <xTaskIncrementTick+0x15c>)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a392:	e02f      	b.n	800a3f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	3304      	adds	r3, #4
 800a398:	4618      	mov	r0, r3
 800a39a:	f7fe ff79 	bl	8009290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d004      	beq.n	800a3b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	3318      	adds	r3, #24
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe ff70 	bl	8009290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b4:	4b25      	ldr	r3, [pc, #148]	; (800a44c <xTaskIncrementTick+0x160>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d903      	bls.n	800a3c4 <xTaskIncrementTick+0xd8>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	4a22      	ldr	r2, [pc, #136]	; (800a44c <xTaskIncrementTick+0x160>)
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	4a1f      	ldr	r2, [pc, #124]	; (800a450 <xTaskIncrementTick+0x164>)
 800a3d2:	441a      	add	r2, r3
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fe fefb 	bl	80091d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	4b1b      	ldr	r3, [pc, #108]	; (800a454 <xTaskIncrementTick+0x168>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d3b8      	bcc.n	800a360 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3f2:	e7b5      	b.n	800a360 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3f4:	4b17      	ldr	r3, [pc, #92]	; (800a454 <xTaskIncrementTick+0x168>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3fa:	4915      	ldr	r1, [pc, #84]	; (800a450 <xTaskIncrementTick+0x164>)
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	440b      	add	r3, r1
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d901      	bls.n	800a410 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a410:	4b11      	ldr	r3, [pc, #68]	; (800a458 <xTaskIncrementTick+0x16c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d007      	beq.n	800a428 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a418:	2301      	movs	r3, #1
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	e004      	b.n	800a428 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <xTaskIncrementTick+0x170>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3301      	adds	r3, #1
 800a424:	4a0d      	ldr	r2, [pc, #52]	; (800a45c <xTaskIncrementTick+0x170>)
 800a426:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a428:	697b      	ldr	r3, [r7, #20]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	20000d14 	.word	0x20000d14
 800a438:	20000cf0 	.word	0x20000cf0
 800a43c:	20000ca4 	.word	0x20000ca4
 800a440:	20000ca8 	.word	0x20000ca8
 800a444:	20000d04 	.word	0x20000d04
 800a448:	20000d0c 	.word	0x20000d0c
 800a44c:	20000cf4 	.word	0x20000cf4
 800a450:	2000081c 	.word	0x2000081c
 800a454:	20000818 	.word	0x20000818
 800a458:	20000d00 	.word	0x20000d00
 800a45c:	20000cfc 	.word	0x20000cfc

0800a460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a466:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <vTaskSwitchContext+0xb0>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a46e:	4b29      	ldr	r3, [pc, #164]	; (800a514 <vTaskSwitchContext+0xb4>)
 800a470:	2201      	movs	r2, #1
 800a472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a474:	e046      	b.n	800a504 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a476:	4b27      	ldr	r3, [pc, #156]	; (800a514 <vTaskSwitchContext+0xb4>)
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47c:	4b26      	ldr	r3, [pc, #152]	; (800a518 <vTaskSwitchContext+0xb8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	e010      	b.n	800a4a6 <vTaskSwitchContext+0x46>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10a      	bne.n	800a4a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	607b      	str	r3, [r7, #4]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <vTaskSwitchContext+0x3e>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	491d      	ldr	r1, [pc, #116]	; (800a51c <vTaskSwitchContext+0xbc>)
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	440b      	add	r3, r1
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0e4      	beq.n	800a484 <vTaskSwitchContext+0x24>
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4a15      	ldr	r2, [pc, #84]	; (800a51c <vTaskSwitchContext+0xbc>)
 800a4c6:	4413      	add	r3, r2
 800a4c8:	60bb      	str	r3, [r7, #8]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	605a      	str	r2, [r3, #4]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d104      	bne.n	800a4ea <vTaskSwitchContext+0x8a>
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	685a      	ldr	r2, [r3, #4]
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	605a      	str	r2, [r3, #4]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	4a0b      	ldr	r2, [pc, #44]	; (800a520 <vTaskSwitchContext+0xc0>)
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	4a08      	ldr	r2, [pc, #32]	; (800a518 <vTaskSwitchContext+0xb8>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4fa:	4b09      	ldr	r3, [pc, #36]	; (800a520 <vTaskSwitchContext+0xc0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3354      	adds	r3, #84	; 0x54
 800a500:	4a08      	ldr	r2, [pc, #32]	; (800a524 <vTaskSwitchContext+0xc4>)
 800a502:	6013      	str	r3, [r2, #0]
}
 800a504:	bf00      	nop
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	20000d14 	.word	0x20000d14
 800a514:	20000d00 	.word	0x20000d00
 800a518:	20000cf4 	.word	0x20000cf4
 800a51c:	2000081c 	.word	0x2000081c
 800a520:	20000818 	.word	0x20000818
 800a524:	20000010 	.word	0x20000010

0800a528 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d10a      	bne.n	800a54e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	60fb      	str	r3, [r7, #12]
}
 800a54a:	bf00      	nop
 800a54c:	e7fe      	b.n	800a54c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a54e:	4b07      	ldr	r3, [pc, #28]	; (800a56c <vTaskPlaceOnEventList+0x44>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3318      	adds	r3, #24
 800a554:	4619      	mov	r1, r3
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f7fe fe61 	bl	800921e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a55c:	2101      	movs	r1, #1
 800a55e:	6838      	ldr	r0, [r7, #0]
 800a560:	f000 fa80 	bl	800aa64 <prvAddCurrentTaskToDelayedList>
}
 800a564:	bf00      	nop
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	20000818 	.word	0x20000818

0800a570 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	617b      	str	r3, [r7, #20]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3318      	adds	r3, #24
 800a59e:	4619      	mov	r1, r3
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7fe fe18 	bl	80091d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d002      	beq.n	800a5b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	68b8      	ldr	r0, [r7, #8]
 800a5b6:	f000 fa55 	bl	800aa64 <prvAddCurrentTaskToDelayedList>
	}
 800a5ba:	bf00      	nop
 800a5bc:	3718      	adds	r7, #24
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000818 	.word	0x20000818

0800a5c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10a      	bne.n	800a5f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	60fb      	str	r3, [r7, #12]
}
 800a5f0:	bf00      	nop
 800a5f2:	e7fe      	b.n	800a5f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	3318      	adds	r3, #24
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7fe fe49 	bl	8009290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5fe:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <xTaskRemoveFromEventList+0xb0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d11d      	bne.n	800a642 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	3304      	adds	r3, #4
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe fe40 	bl	8009290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a614:	4b19      	ldr	r3, [pc, #100]	; (800a67c <xTaskRemoveFromEventList+0xb4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d903      	bls.n	800a624 <xTaskRemoveFromEventList+0x5c>
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	4a16      	ldr	r2, [pc, #88]	; (800a67c <xTaskRemoveFromEventList+0xb4>)
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a628:	4613      	mov	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4413      	add	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4a13      	ldr	r2, [pc, #76]	; (800a680 <xTaskRemoveFromEventList+0xb8>)
 800a632:	441a      	add	r2, r3
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	3304      	adds	r3, #4
 800a638:	4619      	mov	r1, r3
 800a63a:	4610      	mov	r0, r2
 800a63c:	f7fe fdcb 	bl	80091d6 <vListInsertEnd>
 800a640:	e005      	b.n	800a64e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	3318      	adds	r3, #24
 800a646:	4619      	mov	r1, r3
 800a648:	480e      	ldr	r0, [pc, #56]	; (800a684 <xTaskRemoveFromEventList+0xbc>)
 800a64a:	f7fe fdc4 	bl	80091d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a652:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <xTaskRemoveFromEventList+0xc0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	429a      	cmp	r2, r3
 800a65a:	d905      	bls.n	800a668 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a65c:	2301      	movs	r3, #1
 800a65e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a660:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <xTaskRemoveFromEventList+0xc4>)
 800a662:	2201      	movs	r2, #1
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e001      	b.n	800a66c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a66c:	697b      	ldr	r3, [r7, #20]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20000d14 	.word	0x20000d14
 800a67c:	20000cf4 	.word	0x20000cf4
 800a680:	2000081c 	.word	0x2000081c
 800a684:	20000cac 	.word	0x20000cac
 800a688:	20000818 	.word	0x20000818
 800a68c:	20000d00 	.word	0x20000d00

0800a690 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a698:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <vTaskInternalSetTimeOutState+0x24>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6a0:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <vTaskInternalSetTimeOutState+0x28>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	605a      	str	r2, [r3, #4]
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	20000d04 	.word	0x20000d04
 800a6b8:	20000cf0 	.word	0x20000cf0

0800a6bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b088      	sub	sp, #32
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	613b      	str	r3, [r7, #16]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10a      	bne.n	800a6fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a6fe:	f000 fe81 	bl	800b404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a702:	4b1d      	ldr	r3, [pc, #116]	; (800a778 <xTaskCheckForTimeOut+0xbc>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a71a:	d102      	bne.n	800a722 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a71c:	2300      	movs	r3, #0
 800a71e:	61fb      	str	r3, [r7, #28]
 800a720:	e023      	b.n	800a76a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	4b15      	ldr	r3, [pc, #84]	; (800a77c <xTaskCheckForTimeOut+0xc0>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d007      	beq.n	800a73e <xTaskCheckForTimeOut+0x82>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	69ba      	ldr	r2, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d302      	bcc.n	800a73e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	e015      	b.n	800a76a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	429a      	cmp	r2, r3
 800a746:	d20b      	bcs.n	800a760 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	1ad2      	subs	r2, r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff ff9b 	bl	800a690 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	61fb      	str	r3, [r7, #28]
 800a75e:	e004      	b.n	800a76a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a766:	2301      	movs	r3, #1
 800a768:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a76a:	f000 fe7b 	bl	800b464 <vPortExitCritical>

	return xReturn;
 800a76e:	69fb      	ldr	r3, [r7, #28]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000cf0 	.word	0x20000cf0
 800a77c:	20000d04 	.word	0x20000d04

0800a780 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a780:	b480      	push	{r7}
 800a782:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a784:	4b03      	ldr	r3, [pc, #12]	; (800a794 <vTaskMissedYield+0x14>)
 800a786:	2201      	movs	r2, #1
 800a788:	601a      	str	r2, [r3, #0]
}
 800a78a:	bf00      	nop
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	20000d00 	.word	0x20000d00

0800a798 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7a0:	f000 f852 	bl	800a848 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <prvIdleTask+0x28>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d9f9      	bls.n	800a7a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7ac:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <prvIdleTask+0x2c>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7bc:	e7f0      	b.n	800a7a0 <prvIdleTask+0x8>
 800a7be:	bf00      	nop
 800a7c0:	2000081c 	.word	0x2000081c
 800a7c4:	e000ed04 	.word	0xe000ed04

0800a7c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	e00c      	b.n	800a7ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4a12      	ldr	r2, [pc, #72]	; (800a828 <prvInitialiseTaskLists+0x60>)
 800a7e0:	4413      	add	r3, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fcca 	bl	800917c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	607b      	str	r3, [r7, #4]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2b37      	cmp	r3, #55	; 0x37
 800a7f2:	d9ef      	bls.n	800a7d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7f4:	480d      	ldr	r0, [pc, #52]	; (800a82c <prvInitialiseTaskLists+0x64>)
 800a7f6:	f7fe fcc1 	bl	800917c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7fa:	480d      	ldr	r0, [pc, #52]	; (800a830 <prvInitialiseTaskLists+0x68>)
 800a7fc:	f7fe fcbe 	bl	800917c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a800:	480c      	ldr	r0, [pc, #48]	; (800a834 <prvInitialiseTaskLists+0x6c>)
 800a802:	f7fe fcbb 	bl	800917c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a806:	480c      	ldr	r0, [pc, #48]	; (800a838 <prvInitialiseTaskLists+0x70>)
 800a808:	f7fe fcb8 	bl	800917c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a80c:	480b      	ldr	r0, [pc, #44]	; (800a83c <prvInitialiseTaskLists+0x74>)
 800a80e:	f7fe fcb5 	bl	800917c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a812:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <prvInitialiseTaskLists+0x78>)
 800a814:	4a05      	ldr	r2, [pc, #20]	; (800a82c <prvInitialiseTaskLists+0x64>)
 800a816:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <prvInitialiseTaskLists+0x7c>)
 800a81a:	4a05      	ldr	r2, [pc, #20]	; (800a830 <prvInitialiseTaskLists+0x68>)
 800a81c:	601a      	str	r2, [r3, #0]
}
 800a81e:	bf00      	nop
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	2000081c 	.word	0x2000081c
 800a82c:	20000c7c 	.word	0x20000c7c
 800a830:	20000c90 	.word	0x20000c90
 800a834:	20000cac 	.word	0x20000cac
 800a838:	20000cc0 	.word	0x20000cc0
 800a83c:	20000cd8 	.word	0x20000cd8
 800a840:	20000ca4 	.word	0x20000ca4
 800a844:	20000ca8 	.word	0x20000ca8

0800a848 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a84e:	e019      	b.n	800a884 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a850:	f000 fdd8 	bl	800b404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a854:	4b10      	ldr	r3, [pc, #64]	; (800a898 <prvCheckTasksWaitingTermination+0x50>)
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3304      	adds	r3, #4
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fd15 	bl	8009290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <prvCheckTasksWaitingTermination+0x54>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a0b      	ldr	r2, [pc, #44]	; (800a89c <prvCheckTasksWaitingTermination+0x54>)
 800a86e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a870:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <prvCheckTasksWaitingTermination+0x58>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3b01      	subs	r3, #1
 800a876:	4a0a      	ldr	r2, [pc, #40]	; (800a8a0 <prvCheckTasksWaitingTermination+0x58>)
 800a878:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a87a:	f000 fdf3 	bl	800b464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f810 	bl	800a8a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a884:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <prvCheckTasksWaitingTermination+0x58>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e1      	bne.n	800a850 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20000cc0 	.word	0x20000cc0
 800a89c:	20000cec 	.word	0x20000cec
 800a8a0:	20000cd4 	.word	0x20000cd4

0800a8a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3354      	adds	r3, #84	; 0x54
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f004 f893 	bl	800e9dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d108      	bne.n	800a8d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 ff8b 	bl	800b7e0 <vPortFree>
				vPortFree( pxTCB );
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 ff88 	bl	800b7e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8d0:	e018      	b.n	800a904 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d103      	bne.n	800a8e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 ff7f 	bl	800b7e0 <vPortFree>
	}
 800a8e2:	e00f      	b.n	800a904 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d00a      	beq.n	800a904 <prvDeleteTCB+0x60>
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	f383 8811 	msr	BASEPRI, r3
 800a8f6:	f3bf 8f6f 	isb	sy
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	60fb      	str	r3, [r7, #12]
}
 800a900:	bf00      	nop
 800a902:	e7fe      	b.n	800a902 <prvDeleteTCB+0x5e>
	}
 800a904:	bf00      	nop
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a912:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <prvResetNextTaskUnblockTime+0x38>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d104      	bne.n	800a926 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a91c:	4b0a      	ldr	r3, [pc, #40]	; (800a948 <prvResetNextTaskUnblockTime+0x3c>)
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a922:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a924:	e008      	b.n	800a938 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a926:	4b07      	ldr	r3, [pc, #28]	; (800a944 <prvResetNextTaskUnblockTime+0x38>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	4a04      	ldr	r2, [pc, #16]	; (800a948 <prvResetNextTaskUnblockTime+0x3c>)
 800a936:	6013      	str	r3, [r2, #0]
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	20000ca4 	.word	0x20000ca4
 800a948:	20000d0c 	.word	0x20000d0c

0800a94c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <xTaskGetSchedulerState+0x34>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a95a:	2301      	movs	r3, #1
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	e008      	b.n	800a972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a960:	4b08      	ldr	r3, [pc, #32]	; (800a984 <xTaskGetSchedulerState+0x38>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a968:	2302      	movs	r3, #2
 800a96a:	607b      	str	r3, [r7, #4]
 800a96c:	e001      	b.n	800a972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a96e:	2300      	movs	r3, #0
 800a970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a972:	687b      	ldr	r3, [r7, #4]
	}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	20000cf8 	.word	0x20000cf8
 800a984:	20000d14 	.word	0x20000d14

0800a988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a994:	2300      	movs	r3, #0
 800a996:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d056      	beq.n	800aa4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a99e:	4b2e      	ldr	r3, [pc, #184]	; (800aa58 <xTaskPriorityDisinherit+0xd0>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	693a      	ldr	r2, [r7, #16]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d00a      	beq.n	800a9be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	60fb      	str	r3, [r7, #12]
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10a      	bne.n	800a9dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	60bb      	str	r3, [r7, #8]
}
 800a9d8:	bf00      	nop
 800a9da:	e7fe      	b.n	800a9da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e0:	1e5a      	subs	r2, r3, #1
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d02c      	beq.n	800aa4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d128      	bne.n	800aa4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	3304      	adds	r3, #4
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fc46 	bl	8009290 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa1c:	4b0f      	ldr	r3, [pc, #60]	; (800aa5c <xTaskPriorityDisinherit+0xd4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d903      	bls.n	800aa2c <xTaskPriorityDisinherit+0xa4>
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	4a0c      	ldr	r2, [pc, #48]	; (800aa5c <xTaskPriorityDisinherit+0xd4>)
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa30:	4613      	mov	r3, r2
 800aa32:	009b      	lsls	r3, r3, #2
 800aa34:	4413      	add	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	4a09      	ldr	r2, [pc, #36]	; (800aa60 <xTaskPriorityDisinherit+0xd8>)
 800aa3a:	441a      	add	r2, r3
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7fe fbc7 	bl	80091d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa4c:	697b      	ldr	r3, [r7, #20]
	}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000818 	.word	0x20000818
 800aa5c:	20000cf4 	.word	0x20000cf4
 800aa60:	2000081c 	.word	0x2000081c

0800aa64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa6e:	4b21      	ldr	r3, [pc, #132]	; (800aaf4 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa74:	4b20      	ldr	r3, [pc, #128]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3304      	adds	r3, #4
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fc08 	bl	8009290 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa86:	d10a      	bne.n	800aa9e <prvAddCurrentTaskToDelayedList+0x3a>
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa8e:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	3304      	adds	r3, #4
 800aa94:	4619      	mov	r1, r3
 800aa96:	4819      	ldr	r0, [pc, #100]	; (800aafc <prvAddCurrentTaskToDelayedList+0x98>)
 800aa98:	f7fe fb9d 	bl	80091d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa9c:	e026      	b.n	800aaec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aaa6:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d209      	bcs.n	800aaca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aab6:	4b12      	ldr	r3, [pc, #72]	; (800ab00 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	4b0f      	ldr	r3, [pc, #60]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fe fbab 	bl	800921e <vListInsert>
}
 800aac8:	e010      	b.n	800aaec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaca:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	4b0a      	ldr	r3, [pc, #40]	; (800aaf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4619      	mov	r1, r3
 800aad6:	4610      	mov	r0, r2
 800aad8:	f7fe fba1 	bl	800921e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aadc:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d202      	bcs.n	800aaec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aae6:	4a08      	ldr	r2, [pc, #32]	; (800ab08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	6013      	str	r3, [r2, #0]
}
 800aaec:	bf00      	nop
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	20000cf0 	.word	0x20000cf0
 800aaf8:	20000818 	.word	0x20000818
 800aafc:	20000cd8 	.word	0x20000cd8
 800ab00:	20000ca8 	.word	0x20000ca8
 800ab04:	20000ca4 	.word	0x20000ca4
 800ab08:	20000d0c 	.word	0x20000d0c

0800ab0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08a      	sub	sp, #40	; 0x28
 800ab10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab16:	f000 fb07 	bl	800b128 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab1a:	4b1c      	ldr	r3, [pc, #112]	; (800ab8c <xTimerCreateTimerTask+0x80>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d021      	beq.n	800ab66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab2a:	1d3a      	adds	r2, r7, #4
 800ab2c:	f107 0108 	add.w	r1, r7, #8
 800ab30:	f107 030c 	add.w	r3, r7, #12
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe fb07 	bl	8009148 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	9202      	str	r2, [sp, #8]
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	2302      	movs	r3, #2
 800ab46:	9300      	str	r3, [sp, #0]
 800ab48:	2300      	movs	r3, #0
 800ab4a:	460a      	mov	r2, r1
 800ab4c:	4910      	ldr	r1, [pc, #64]	; (800ab90 <xTimerCreateTimerTask+0x84>)
 800ab4e:	4811      	ldr	r0, [pc, #68]	; (800ab94 <xTimerCreateTimerTask+0x88>)
 800ab50:	f7ff f8b4 	bl	8009cbc <xTaskCreateStatic>
 800ab54:	4603      	mov	r3, r0
 800ab56:	4a10      	ldr	r2, [pc, #64]	; (800ab98 <xTimerCreateTimerTask+0x8c>)
 800ab58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <xTimerCreateTimerTask+0x8c>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab62:	2301      	movs	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d10a      	bne.n	800ab82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	613b      	str	r3, [r7, #16]
}
 800ab7e:	bf00      	nop
 800ab80:	e7fe      	b.n	800ab80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab82:	697b      	ldr	r3, [r7, #20]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3718      	adds	r7, #24
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	20000d48 	.word	0x20000d48
 800ab90:	08010fe0 	.word	0x08010fe0
 800ab94:	0800acd1 	.word	0x0800acd1
 800ab98:	20000d4c 	.word	0x20000d4c

0800ab9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08a      	sub	sp, #40	; 0x28
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
 800aba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abaa:	2300      	movs	r3, #0
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10a      	bne.n	800abca <xTimerGenericCommand+0x2e>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	623b      	str	r3, [r7, #32]
}
 800abc6:	bf00      	nop
 800abc8:	e7fe      	b.n	800abc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abca:	4b1a      	ldr	r3, [pc, #104]	; (800ac34 <xTimerGenericCommand+0x98>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d02a      	beq.n	800ac28 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2b05      	cmp	r3, #5
 800abe2:	dc18      	bgt.n	800ac16 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abe4:	f7ff feb2 	bl	800a94c <xTaskGetSchedulerState>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b02      	cmp	r3, #2
 800abec:	d109      	bne.n	800ac02 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abee:	4b11      	ldr	r3, [pc, #68]	; (800ac34 <xTimerGenericCommand+0x98>)
 800abf0:	6818      	ldr	r0, [r3, #0]
 800abf2:	f107 0110 	add.w	r1, r7, #16
 800abf6:	2300      	movs	r3, #0
 800abf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abfa:	f7fe fc77 	bl	80094ec <xQueueGenericSend>
 800abfe:	6278      	str	r0, [r7, #36]	; 0x24
 800ac00:	e012      	b.n	800ac28 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <xTimerGenericCommand+0x98>)
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f107 0110 	add.w	r1, r7, #16
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f7fe fc6d 	bl	80094ec <xQueueGenericSend>
 800ac12:	6278      	str	r0, [r7, #36]	; 0x24
 800ac14:	e008      	b.n	800ac28 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac16:	4b07      	ldr	r3, [pc, #28]	; (800ac34 <xTimerGenericCommand+0x98>)
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	f107 0110 	add.w	r1, r7, #16
 800ac1e:	2300      	movs	r3, #0
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	f7fe fd61 	bl	80096e8 <xQueueGenericSendFromISR>
 800ac26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3728      	adds	r7, #40	; 0x28
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000d48 	.word	0x20000d48

0800ac38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af02      	add	r7, sp, #8
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac42:	4b22      	ldr	r3, [pc, #136]	; (800accc <prvProcessExpiredTimer+0x94>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fe fb1d 	bl	8009290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d022      	beq.n	800acaa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	699a      	ldr	r2, [r3, #24]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	18d1      	adds	r1, r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	6978      	ldr	r0, [r7, #20]
 800ac72:	f000 f8d1 	bl	800ae18 <prvInsertTimerInActiveList>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01f      	beq.n	800acbc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	2300      	movs	r3, #0
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	2100      	movs	r1, #0
 800ac86:	6978      	ldr	r0, [r7, #20]
 800ac88:	f7ff ff88 	bl	800ab9c <xTimerGenericCommand>
 800ac8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d113      	bne.n	800acbc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	60fb      	str	r3, [r7, #12]
}
 800aca6:	bf00      	nop
 800aca8:	e7fe      	b.n	800aca8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acb0:	f023 0301 	bic.w	r3, r3, #1
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	6a1b      	ldr	r3, [r3, #32]
 800acc0:	6978      	ldr	r0, [r7, #20]
 800acc2:	4798      	blx	r3
}
 800acc4:	bf00      	nop
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000d40 	.word	0x20000d40

0800acd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acd8:	f107 0308 	add.w	r3, r7, #8
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f857 	bl	800ad90 <prvGetNextExpireTime>
 800ace2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4619      	mov	r1, r3
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f803 	bl	800acf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acee:	f000 f8d5 	bl	800ae9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acf2:	e7f1      	b.n	800acd8 <prvTimerTask+0x8>

0800acf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800acfe:	f7ff fa39 	bl	800a174 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad02:	f107 0308 	add.w	r3, r7, #8
 800ad06:	4618      	mov	r0, r3
 800ad08:	f000 f866 	bl	800add8 <prvSampleTimeNow>
 800ad0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d130      	bne.n	800ad76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <prvProcessTimerOrBlockTask+0x3c>
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d806      	bhi.n	800ad30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad22:	f7ff fa35 	bl	800a190 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad26:	68f9      	ldr	r1, [r7, #12]
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff ff85 	bl	800ac38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad2e:	e024      	b.n	800ad7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d008      	beq.n	800ad48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad36:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <prvProcessTimerOrBlockTask+0x90>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <prvProcessTimerOrBlockTask+0x50>
 800ad40:	2301      	movs	r3, #1
 800ad42:	e000      	b.n	800ad46 <prvProcessTimerOrBlockTask+0x52>
 800ad44:	2300      	movs	r3, #0
 800ad46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad48:	4b0f      	ldr	r3, [pc, #60]	; (800ad88 <prvProcessTimerOrBlockTask+0x94>)
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4619      	mov	r1, r3
 800ad56:	f7fe ff7d 	bl	8009c54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad5a:	f7ff fa19 	bl	800a190 <xTaskResumeAll>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad64:	4b09      	ldr	r3, [pc, #36]	; (800ad8c <prvProcessTimerOrBlockTask+0x98>)
 800ad66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad6a:	601a      	str	r2, [r3, #0]
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	f3bf 8f6f 	isb	sy
}
 800ad74:	e001      	b.n	800ad7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad76:	f7ff fa0b 	bl	800a190 <xTaskResumeAll>
}
 800ad7a:	bf00      	nop
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20000d44 	.word	0x20000d44
 800ad88:	20000d48 	.word	0x20000d48
 800ad8c:	e000ed04 	.word	0xe000ed04

0800ad90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad98:	4b0e      	ldr	r3, [pc, #56]	; (800add4 <prvGetNextExpireTime+0x44>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <prvGetNextExpireTime+0x16>
 800ada2:	2201      	movs	r2, #1
 800ada4:	e000      	b.n	800ada8 <prvGetNextExpireTime+0x18>
 800ada6:	2200      	movs	r2, #0
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d105      	bne.n	800adc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800adb4:	4b07      	ldr	r3, [pc, #28]	; (800add4 <prvGetNextExpireTime+0x44>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60fb      	str	r3, [r7, #12]
 800adbe:	e001      	b.n	800adc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adc4:	68fb      	ldr	r3, [r7, #12]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	20000d40 	.word	0x20000d40

0800add8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ade0:	f7ff fa74 	bl	800a2cc <xTaskGetTickCount>
 800ade4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ade6:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <prvSampleTimeNow+0x3c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	429a      	cmp	r2, r3
 800adee:	d205      	bcs.n	800adfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800adf0:	f000 f936 	bl	800b060 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	e002      	b.n	800ae02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae02:	4a04      	ldr	r2, [pc, #16]	; (800ae14 <prvSampleTimeNow+0x3c>)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae08:	68fb      	ldr	r3, [r7, #12]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000d50 	.word	0x20000d50

0800ae18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae26:	2300      	movs	r3, #0
 800ae28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d812      	bhi.n	800ae64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	1ad2      	subs	r2, r2, r3
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d302      	bcc.n	800ae52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	617b      	str	r3, [r7, #20]
 800ae50:	e01b      	b.n	800ae8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae52:	4b10      	ldr	r3, [pc, #64]	; (800ae94 <prvInsertTimerInActiveList+0x7c>)
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3304      	adds	r3, #4
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	f7fe f9de 	bl	800921e <vListInsert>
 800ae62:	e012      	b.n	800ae8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d206      	bcs.n	800ae7a <prvInsertTimerInActiveList+0x62>
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d302      	bcc.n	800ae7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae74:	2301      	movs	r3, #1
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	e007      	b.n	800ae8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae7a:	4b07      	ldr	r3, [pc, #28]	; (800ae98 <prvInsertTimerInActiveList+0x80>)
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	3304      	adds	r3, #4
 800ae82:	4619      	mov	r1, r3
 800ae84:	4610      	mov	r0, r2
 800ae86:	f7fe f9ca 	bl	800921e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae8a:	697b      	ldr	r3, [r7, #20]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20000d44 	.word	0x20000d44
 800ae98:	20000d40 	.word	0x20000d40

0800ae9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08e      	sub	sp, #56	; 0x38
 800aea0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aea2:	e0ca      	b.n	800b03a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	da18      	bge.n	800aedc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aeaa:	1d3b      	adds	r3, r7, #4
 800aeac:	3304      	adds	r3, #4
 800aeae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d10a      	bne.n	800aecc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	61fb      	str	r3, [r7, #28]
}
 800aec8:	bf00      	nop
 800aeca:	e7fe      	b.n	800aeca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aed2:	6850      	ldr	r0, [r2, #4]
 800aed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aed6:	6892      	ldr	r2, [r2, #8]
 800aed8:	4611      	mov	r1, r2
 800aeda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f2c0 80aa 	blt.w	800b038 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	3304      	adds	r3, #4
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fe f9cb 	bl	8009290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aefa:	463b      	mov	r3, r7
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7ff ff6b 	bl	800add8 <prvSampleTimeNow>
 800af02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2b09      	cmp	r3, #9
 800af08:	f200 8097 	bhi.w	800b03a <prvProcessReceivedCommands+0x19e>
 800af0c:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <prvProcessReceivedCommands+0x78>)
 800af0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af12:	bf00      	nop
 800af14:	0800af3d 	.word	0x0800af3d
 800af18:	0800af3d 	.word	0x0800af3d
 800af1c:	0800af3d 	.word	0x0800af3d
 800af20:	0800afb1 	.word	0x0800afb1
 800af24:	0800afc5 	.word	0x0800afc5
 800af28:	0800b00f 	.word	0x0800b00f
 800af2c:	0800af3d 	.word	0x0800af3d
 800af30:	0800af3d 	.word	0x0800af3d
 800af34:	0800afb1 	.word	0x0800afb1
 800af38:	0800afc5 	.word	0x0800afc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af42:	f043 0301 	orr.w	r3, r3, #1
 800af46:	b2da      	uxtb	r2, r3
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af4e:	68ba      	ldr	r2, [r7, #8]
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	18d1      	adds	r1, r2, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af5c:	f7ff ff5c 	bl	800ae18 <prvInsertTimerInActiveList>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d069      	beq.n	800b03a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d05e      	beq.n	800b03a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	441a      	add	r2, r3
 800af84:	2300      	movs	r3, #0
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	2300      	movs	r3, #0
 800af8a:	2100      	movs	r1, #0
 800af8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af8e:	f7ff fe05 	bl	800ab9c <xTimerGenericCommand>
 800af92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af94:	6a3b      	ldr	r3, [r7, #32]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d14f      	bne.n	800b03a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	61bb      	str	r3, [r7, #24]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afb6:	f023 0301 	bic.w	r3, r3, #1
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800afc2:	e03a      	b.n	800b03a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afca:	f043 0301 	orr.w	r3, r3, #1
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10a      	bne.n	800affa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	617b      	str	r3, [r7, #20]
}
 800aff6:	bf00      	nop
 800aff8:	e7fe      	b.n	800aff8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	699a      	ldr	r2, [r3, #24]
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	18d1      	adds	r1, r2, r3
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b008:	f7ff ff06 	bl	800ae18 <prvInsertTimerInActiveList>
					break;
 800b00c:	e015      	b.n	800b03a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b014:	f003 0302 	and.w	r3, r3, #2
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d103      	bne.n	800b024 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b01e:	f000 fbdf 	bl	800b7e0 <vPortFree>
 800b022:	e00a      	b.n	800b03a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b02a:	f023 0301 	bic.w	r3, r3, #1
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b036:	e000      	b.n	800b03a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b038:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b03a:	4b08      	ldr	r3, [pc, #32]	; (800b05c <prvProcessReceivedCommands+0x1c0>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	1d39      	adds	r1, r7, #4
 800b040:	2200      	movs	r2, #0
 800b042:	4618      	mov	r0, r3
 800b044:	f7fe fbec 	bl	8009820 <xQueueReceive>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f47f af2a 	bne.w	800aea4 <prvProcessReceivedCommands+0x8>
	}
}
 800b050:	bf00      	nop
 800b052:	bf00      	nop
 800b054:	3730      	adds	r7, #48	; 0x30
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20000d48 	.word	0x20000d48

0800b060 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b066:	e048      	b.n	800b0fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b068:	4b2d      	ldr	r3, [pc, #180]	; (800b120 <prvSwitchTimerLists+0xc0>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b072:	4b2b      	ldr	r3, [pc, #172]	; (800b120 <prvSwitchTimerLists+0xc0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	3304      	adds	r3, #4
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe f905 	bl	8009290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d02e      	beq.n	800b0fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0a6:	68ba      	ldr	r2, [r7, #8]
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d90e      	bls.n	800b0cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ba:	4b19      	ldr	r3, [pc, #100]	; (800b120 <prvSwitchTimerLists+0xc0>)
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	f7fe f8aa 	bl	800921e <vListInsert>
 800b0ca:	e016      	b.n	800b0fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	693a      	ldr	r2, [r7, #16]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f7ff fd60 	bl	800ab9c <xTimerGenericCommand>
 800b0dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	603b      	str	r3, [r7, #0]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0fa:	4b09      	ldr	r3, [pc, #36]	; (800b120 <prvSwitchTimerLists+0xc0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1b1      	bne.n	800b068 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b104:	4b06      	ldr	r3, [pc, #24]	; (800b120 <prvSwitchTimerLists+0xc0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b10a:	4b06      	ldr	r3, [pc, #24]	; (800b124 <prvSwitchTimerLists+0xc4>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a04      	ldr	r2, [pc, #16]	; (800b120 <prvSwitchTimerLists+0xc0>)
 800b110:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b112:	4a04      	ldr	r2, [pc, #16]	; (800b124 <prvSwitchTimerLists+0xc4>)
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	6013      	str	r3, [r2, #0]
}
 800b118:	bf00      	nop
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	20000d40 	.word	0x20000d40
 800b124:	20000d44 	.word	0x20000d44

0800b128 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b12e:	f000 f969 	bl	800b404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b132:	4b15      	ldr	r3, [pc, #84]	; (800b188 <prvCheckForValidListAndQueue+0x60>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d120      	bne.n	800b17c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b13a:	4814      	ldr	r0, [pc, #80]	; (800b18c <prvCheckForValidListAndQueue+0x64>)
 800b13c:	f7fe f81e 	bl	800917c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b140:	4813      	ldr	r0, [pc, #76]	; (800b190 <prvCheckForValidListAndQueue+0x68>)
 800b142:	f7fe f81b 	bl	800917c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b146:	4b13      	ldr	r3, [pc, #76]	; (800b194 <prvCheckForValidListAndQueue+0x6c>)
 800b148:	4a10      	ldr	r2, [pc, #64]	; (800b18c <prvCheckForValidListAndQueue+0x64>)
 800b14a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b14c:	4b12      	ldr	r3, [pc, #72]	; (800b198 <prvCheckForValidListAndQueue+0x70>)
 800b14e:	4a10      	ldr	r2, [pc, #64]	; (800b190 <prvCheckForValidListAndQueue+0x68>)
 800b150:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b152:	2300      	movs	r3, #0
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	4b11      	ldr	r3, [pc, #68]	; (800b19c <prvCheckForValidListAndQueue+0x74>)
 800b158:	4a11      	ldr	r2, [pc, #68]	; (800b1a0 <prvCheckForValidListAndQueue+0x78>)
 800b15a:	2110      	movs	r1, #16
 800b15c:	200a      	movs	r0, #10
 800b15e:	f7fe f929 	bl	80093b4 <xQueueGenericCreateStatic>
 800b162:	4603      	mov	r3, r0
 800b164:	4a08      	ldr	r2, [pc, #32]	; (800b188 <prvCheckForValidListAndQueue+0x60>)
 800b166:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b168:	4b07      	ldr	r3, [pc, #28]	; (800b188 <prvCheckForValidListAndQueue+0x60>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b170:	4b05      	ldr	r3, [pc, #20]	; (800b188 <prvCheckForValidListAndQueue+0x60>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	490b      	ldr	r1, [pc, #44]	; (800b1a4 <prvCheckForValidListAndQueue+0x7c>)
 800b176:	4618      	mov	r0, r3
 800b178:	f7fe fd42 	bl	8009c00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b17c:	f000 f972 	bl	800b464 <vPortExitCritical>
}
 800b180:	bf00      	nop
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20000d48 	.word	0x20000d48
 800b18c:	20000d18 	.word	0x20000d18
 800b190:	20000d2c 	.word	0x20000d2c
 800b194:	20000d40 	.word	0x20000d40
 800b198:	20000d44 	.word	0x20000d44
 800b19c:	20000df4 	.word	0x20000df4
 800b1a0:	20000d54 	.word	0x20000d54
 800b1a4:	08010fe8 	.word	0x08010fe8

0800b1a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3b04      	subs	r3, #4
 800b1b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3b04      	subs	r3, #4
 800b1c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	f023 0201 	bic.w	r2, r3, #1
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3b04      	subs	r3, #4
 800b1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1d8:	4a0c      	ldr	r2, [pc, #48]	; (800b20c <pxPortInitialiseStack+0x64>)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3b14      	subs	r3, #20
 800b1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	3b04      	subs	r3, #4
 800b1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f06f 0202 	mvn.w	r2, #2
 800b1f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	3b20      	subs	r3, #32
 800b1fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	0800b211 	.word	0x0800b211

0800b210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b21a:	4b12      	ldr	r3, [pc, #72]	; (800b264 <prvTaskExitError+0x54>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b222:	d00a      	beq.n	800b23a <prvTaskExitError+0x2a>
	__asm volatile
 800b224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	60fb      	str	r3, [r7, #12]
}
 800b236:	bf00      	nop
 800b238:	e7fe      	b.n	800b238 <prvTaskExitError+0x28>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	60bb      	str	r3, [r7, #8]
}
 800b24c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b24e:	bf00      	nop
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0fc      	beq.n	800b250 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b256:	bf00      	nop
 800b258:	bf00      	nop
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	2000000c 	.word	0x2000000c
	...

0800b270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <pxCurrentTCBConst2>)
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	6808      	ldr	r0, [r1, #0]
 800b276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27a:	f380 8809 	msr	PSP, r0
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f04f 0000 	mov.w	r0, #0
 800b286:	f380 8811 	msr	BASEPRI, r0
 800b28a:	4770      	bx	lr
 800b28c:	f3af 8000 	nop.w

0800b290 <pxCurrentTCBConst2>:
 800b290:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop

0800b298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b298:	4808      	ldr	r0, [pc, #32]	; (800b2bc <prvPortStartFirstTask+0x24>)
 800b29a:	6800      	ldr	r0, [r0, #0]
 800b29c:	6800      	ldr	r0, [r0, #0]
 800b29e:	f380 8808 	msr	MSP, r0
 800b2a2:	f04f 0000 	mov.w	r0, #0
 800b2a6:	f380 8814 	msr	CONTROL, r0
 800b2aa:	b662      	cpsie	i
 800b2ac:	b661      	cpsie	f
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	df00      	svc	0
 800b2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ba:	bf00      	nop
 800b2bc:	e000ed08 	.word	0xe000ed08

0800b2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2c6:	4b46      	ldr	r3, [pc, #280]	; (800b3e0 <xPortStartScheduler+0x120>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a46      	ldr	r2, [pc, #280]	; (800b3e4 <xPortStartScheduler+0x124>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d10a      	bne.n	800b2e6 <xPortStartScheduler+0x26>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	613b      	str	r3, [r7, #16]
}
 800b2e2:	bf00      	nop
 800b2e4:	e7fe      	b.n	800b2e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2e6:	4b3e      	ldr	r3, [pc, #248]	; (800b3e0 <xPortStartScheduler+0x120>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a3f      	ldr	r2, [pc, #252]	; (800b3e8 <xPortStartScheduler+0x128>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d10a      	bne.n	800b306 <xPortStartScheduler+0x46>
	__asm volatile
 800b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f4:	f383 8811 	msr	BASEPRI, r3
 800b2f8:	f3bf 8f6f 	isb	sy
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	60fb      	str	r3, [r7, #12]
}
 800b302:	bf00      	nop
 800b304:	e7fe      	b.n	800b304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b306:	4b39      	ldr	r3, [pc, #228]	; (800b3ec <xPortStartScheduler+0x12c>)
 800b308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	22ff      	movs	r2, #255	; 0xff
 800b316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b320:	78fb      	ldrb	r3, [r7, #3]
 800b322:	b2db      	uxtb	r3, r3
 800b324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	4b31      	ldr	r3, [pc, #196]	; (800b3f0 <xPortStartScheduler+0x130>)
 800b32c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b32e:	4b31      	ldr	r3, [pc, #196]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b330:	2207      	movs	r2, #7
 800b332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b334:	e009      	b.n	800b34a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b336:	4b2f      	ldr	r3, [pc, #188]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	4a2d      	ldr	r2, [pc, #180]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b33e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b340:	78fb      	ldrb	r3, [r7, #3]
 800b342:	b2db      	uxtb	r3, r3
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	b2db      	uxtb	r3, r3
 800b348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b34a:	78fb      	ldrb	r3, [r7, #3]
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b352:	2b80      	cmp	r3, #128	; 0x80
 800b354:	d0ef      	beq.n	800b336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b356:	4b27      	ldr	r3, [pc, #156]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f1c3 0307 	rsb	r3, r3, #7
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d00a      	beq.n	800b378 <xPortStartScheduler+0xb8>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	60bb      	str	r3, [r7, #8]
}
 800b374:	bf00      	nop
 800b376:	e7fe      	b.n	800b376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b378:	4b1e      	ldr	r3, [pc, #120]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	021b      	lsls	r3, r3, #8
 800b37e:	4a1d      	ldr	r2, [pc, #116]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b382:	4b1c      	ldr	r3, [pc, #112]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b38a:	4a1a      	ldr	r2, [pc, #104]	; (800b3f4 <xPortStartScheduler+0x134>)
 800b38c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	b2da      	uxtb	r2, r3
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b396:	4b18      	ldr	r3, [pc, #96]	; (800b3f8 <xPortStartScheduler+0x138>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a17      	ldr	r2, [pc, #92]	; (800b3f8 <xPortStartScheduler+0x138>)
 800b39c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3a2:	4b15      	ldr	r3, [pc, #84]	; (800b3f8 <xPortStartScheduler+0x138>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a14      	ldr	r2, [pc, #80]	; (800b3f8 <xPortStartScheduler+0x138>)
 800b3a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3ae:	f000 f8dd 	bl	800b56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3b2:	4b12      	ldr	r3, [pc, #72]	; (800b3fc <xPortStartScheduler+0x13c>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3b8:	f000 f8fc 	bl	800b5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3bc:	4b10      	ldr	r3, [pc, #64]	; (800b400 <xPortStartScheduler+0x140>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a0f      	ldr	r2, [pc, #60]	; (800b400 <xPortStartScheduler+0x140>)
 800b3c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b3c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3c8:	f7ff ff66 	bl	800b298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3cc:	f7ff f848 	bl	800a460 <vTaskSwitchContext>
	prvTaskExitError();
 800b3d0:	f7ff ff1e 	bl	800b210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	e000ed00 	.word	0xe000ed00
 800b3e4:	410fc271 	.word	0x410fc271
 800b3e8:	410fc270 	.word	0x410fc270
 800b3ec:	e000e400 	.word	0xe000e400
 800b3f0:	20000e44 	.word	0x20000e44
 800b3f4:	20000e48 	.word	0x20000e48
 800b3f8:	e000ed20 	.word	0xe000ed20
 800b3fc:	2000000c 	.word	0x2000000c
 800b400:	e000ef34 	.word	0xe000ef34

0800b404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	607b      	str	r3, [r7, #4]
}
 800b41c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b41e:	4b0f      	ldr	r3, [pc, #60]	; (800b45c <vPortEnterCritical+0x58>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	3301      	adds	r3, #1
 800b424:	4a0d      	ldr	r2, [pc, #52]	; (800b45c <vPortEnterCritical+0x58>)
 800b426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b428:	4b0c      	ldr	r3, [pc, #48]	; (800b45c <vPortEnterCritical+0x58>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d10f      	bne.n	800b450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b430:	4b0b      	ldr	r3, [pc, #44]	; (800b460 <vPortEnterCritical+0x5c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	b2db      	uxtb	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00a      	beq.n	800b450 <vPortEnterCritical+0x4c>
	__asm volatile
 800b43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b43e:	f383 8811 	msr	BASEPRI, r3
 800b442:	f3bf 8f6f 	isb	sy
 800b446:	f3bf 8f4f 	dsb	sy
 800b44a:	603b      	str	r3, [r7, #0]
}
 800b44c:	bf00      	nop
 800b44e:	e7fe      	b.n	800b44e <vPortEnterCritical+0x4a>
	}
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	2000000c 	.word	0x2000000c
 800b460:	e000ed04 	.word	0xe000ed04

0800b464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b46a:	4b12      	ldr	r3, [pc, #72]	; (800b4b4 <vPortExitCritical+0x50>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <vPortExitCritical+0x24>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	607b      	str	r3, [r7, #4]
}
 800b484:	bf00      	nop
 800b486:	e7fe      	b.n	800b486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b488:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <vPortExitCritical+0x50>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	4a09      	ldr	r2, [pc, #36]	; (800b4b4 <vPortExitCritical+0x50>)
 800b490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b492:	4b08      	ldr	r3, [pc, #32]	; (800b4b4 <vPortExitCritical+0x50>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d105      	bne.n	800b4a6 <vPortExitCritical+0x42>
 800b49a:	2300      	movs	r3, #0
 800b49c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	f383 8811 	msr	BASEPRI, r3
}
 800b4a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4a6:	bf00      	nop
 800b4a8:	370c      	adds	r7, #12
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	2000000c 	.word	0x2000000c
	...

0800b4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4c0:	f3ef 8009 	mrs	r0, PSP
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	4b15      	ldr	r3, [pc, #84]	; (800b520 <pxCurrentTCBConst>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	f01e 0f10 	tst.w	lr, #16
 800b4d0:	bf08      	it	eq
 800b4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4da:	6010      	str	r0, [r2, #0]
 800b4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4e4:	f380 8811 	msr	BASEPRI, r0
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f7fe ffb6 	bl	800a460 <vTaskSwitchContext>
 800b4f4:	f04f 0000 	mov.w	r0, #0
 800b4f8:	f380 8811 	msr	BASEPRI, r0
 800b4fc:	bc09      	pop	{r0, r3}
 800b4fe:	6819      	ldr	r1, [r3, #0]
 800b500:	6808      	ldr	r0, [r1, #0]
 800b502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b506:	f01e 0f10 	tst.w	lr, #16
 800b50a:	bf08      	it	eq
 800b50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b510:	f380 8809 	msr	PSP, r0
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	f3af 8000 	nop.w

0800b520 <pxCurrentTCBConst>:
 800b520:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b524:	bf00      	nop
 800b526:	bf00      	nop

0800b528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	607b      	str	r3, [r7, #4]
}
 800b540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b542:	f7fe fed3 	bl	800a2ec <xTaskIncrementTick>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <xPortSysTickHandler+0x40>)
 800b54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	2300      	movs	r3, #0
 800b556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	f383 8811 	msr	BASEPRI, r3
}
 800b55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	e000ed04 	.word	0xe000ed04

0800b56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b56c:	b480      	push	{r7}
 800b56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b570:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <vPortSetupTimerInterrupt+0x34>)
 800b572:	2200      	movs	r2, #0
 800b574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b576:	4b0b      	ldr	r3, [pc, #44]	; (800b5a4 <vPortSetupTimerInterrupt+0x38>)
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b57c:	4b0a      	ldr	r3, [pc, #40]	; (800b5a8 <vPortSetupTimerInterrupt+0x3c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a0a      	ldr	r2, [pc, #40]	; (800b5ac <vPortSetupTimerInterrupt+0x40>)
 800b582:	fba2 2303 	umull	r2, r3, r2, r3
 800b586:	099b      	lsrs	r3, r3, #6
 800b588:	4a09      	ldr	r2, [pc, #36]	; (800b5b0 <vPortSetupTimerInterrupt+0x44>)
 800b58a:	3b01      	subs	r3, #1
 800b58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b58e:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <vPortSetupTimerInterrupt+0x34>)
 800b590:	2207      	movs	r2, #7
 800b592:	601a      	str	r2, [r3, #0]
}
 800b594:	bf00      	nop
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	e000e010 	.word	0xe000e010
 800b5a4:	e000e018 	.word	0xe000e018
 800b5a8:	20000000 	.word	0x20000000
 800b5ac:	10624dd3 	.word	0x10624dd3
 800b5b0:	e000e014 	.word	0xe000e014

0800b5b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b5c4 <vPortEnableVFP+0x10>
 800b5b8:	6801      	ldr	r1, [r0, #0]
 800b5ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b5be:	6001      	str	r1, [r0, #0]
 800b5c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5c2:	bf00      	nop
 800b5c4:	e000ed88 	.word	0xe000ed88

0800b5c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5ce:	f3ef 8305 	mrs	r3, IPSR
 800b5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b0f      	cmp	r3, #15
 800b5d8:	d914      	bls.n	800b604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5da:	4a17      	ldr	r2, [pc, #92]	; (800b638 <vPortValidateInterruptPriority+0x70>)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4413      	add	r3, r2
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5e4:	4b15      	ldr	r3, [pc, #84]	; (800b63c <vPortValidateInterruptPriority+0x74>)
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	7afa      	ldrb	r2, [r7, #11]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d20a      	bcs.n	800b604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	607b      	str	r3, [r7, #4]
}
 800b600:	bf00      	nop
 800b602:	e7fe      	b.n	800b602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <vPortValidateInterruptPriority+0x78>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b60c:	4b0d      	ldr	r3, [pc, #52]	; (800b644 <vPortValidateInterruptPriority+0x7c>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	429a      	cmp	r2, r3
 800b612:	d90a      	bls.n	800b62a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	603b      	str	r3, [r7, #0]
}
 800b626:	bf00      	nop
 800b628:	e7fe      	b.n	800b628 <vPortValidateInterruptPriority+0x60>
	}
 800b62a:	bf00      	nop
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	e000e3f0 	.word	0xe000e3f0
 800b63c:	20000e44 	.word	0x20000e44
 800b640:	e000ed0c 	.word	0xe000ed0c
 800b644:	20000e48 	.word	0x20000e48

0800b648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08a      	sub	sp, #40	; 0x28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b650:	2300      	movs	r3, #0
 800b652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b654:	f7fe fd8e 	bl	800a174 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b658:	4b5b      	ldr	r3, [pc, #364]	; (800b7c8 <pvPortMalloc+0x180>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b660:	f000 f920 	bl	800b8a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b664:	4b59      	ldr	r3, [pc, #356]	; (800b7cc <pvPortMalloc+0x184>)
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4013      	ands	r3, r2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f040 8093 	bne.w	800b798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d01d      	beq.n	800b6b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b678:	2208      	movs	r2, #8
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f003 0307 	and.w	r3, r3, #7
 800b686:	2b00      	cmp	r3, #0
 800b688:	d014      	beq.n	800b6b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f023 0307 	bic.w	r3, r3, #7
 800b690:	3308      	adds	r3, #8
 800b692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f003 0307 	and.w	r3, r3, #7
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d00a      	beq.n	800b6b4 <pvPortMalloc+0x6c>
	__asm volatile
 800b69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a2:	f383 8811 	msr	BASEPRI, r3
 800b6a6:	f3bf 8f6f 	isb	sy
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	617b      	str	r3, [r7, #20]
}
 800b6b0:	bf00      	nop
 800b6b2:	e7fe      	b.n	800b6b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d06e      	beq.n	800b798 <pvPortMalloc+0x150>
 800b6ba:	4b45      	ldr	r3, [pc, #276]	; (800b7d0 <pvPortMalloc+0x188>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d869      	bhi.n	800b798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6c4:	4b43      	ldr	r3, [pc, #268]	; (800b7d4 <pvPortMalloc+0x18c>)
 800b6c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6c8:	4b42      	ldr	r3, [pc, #264]	; (800b7d4 <pvPortMalloc+0x18c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6ce:	e004      	b.n	800b6da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d903      	bls.n	800b6ec <pvPortMalloc+0xa4>
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1f1      	bne.n	800b6d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6ec:	4b36      	ldr	r3, [pc, #216]	; (800b7c8 <pvPortMalloc+0x180>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d050      	beq.n	800b798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2208      	movs	r2, #8
 800b6fc:	4413      	add	r3, r2
 800b6fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	685a      	ldr	r2, [r3, #4]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	1ad2      	subs	r2, r2, r3
 800b710:	2308      	movs	r3, #8
 800b712:	005b      	lsls	r3, r3, #1
 800b714:	429a      	cmp	r2, r3
 800b716:	d91f      	bls.n	800b758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <pvPortMalloc+0xf8>
	__asm volatile
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	613b      	str	r3, [r7, #16]
}
 800b73c:	bf00      	nop
 800b73e:	e7fe      	b.n	800b73e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	685a      	ldr	r2, [r3, #4]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	1ad2      	subs	r2, r2, r3
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b752:	69b8      	ldr	r0, [r7, #24]
 800b754:	f000 f908 	bl	800b968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b758:	4b1d      	ldr	r3, [pc, #116]	; (800b7d0 <pvPortMalloc+0x188>)
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	1ad3      	subs	r3, r2, r3
 800b762:	4a1b      	ldr	r2, [pc, #108]	; (800b7d0 <pvPortMalloc+0x188>)
 800b764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b766:	4b1a      	ldr	r3, [pc, #104]	; (800b7d0 <pvPortMalloc+0x188>)
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	4b1b      	ldr	r3, [pc, #108]	; (800b7d8 <pvPortMalloc+0x190>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d203      	bcs.n	800b77a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b772:	4b17      	ldr	r3, [pc, #92]	; (800b7d0 <pvPortMalloc+0x188>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a18      	ldr	r2, [pc, #96]	; (800b7d8 <pvPortMalloc+0x190>)
 800b778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	4b13      	ldr	r3, [pc, #76]	; (800b7cc <pvPortMalloc+0x184>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	431a      	orrs	r2, r3
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78a:	2200      	movs	r2, #0
 800b78c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b78e:	4b13      	ldr	r3, [pc, #76]	; (800b7dc <pvPortMalloc+0x194>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	4a11      	ldr	r2, [pc, #68]	; (800b7dc <pvPortMalloc+0x194>)
 800b796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b798:	f7fe fcfa 	bl	800a190 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	f003 0307 	and.w	r3, r3, #7
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00a      	beq.n	800b7bc <pvPortMalloc+0x174>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60fb      	str	r3, [r7, #12]
}
 800b7b8:	bf00      	nop
 800b7ba:	e7fe      	b.n	800b7ba <pvPortMalloc+0x172>
	return pvReturn;
 800b7bc:	69fb      	ldr	r3, [r7, #28]
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3728      	adds	r7, #40	; 0x28
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	20004a54 	.word	0x20004a54
 800b7cc:	20004a68 	.word	0x20004a68
 800b7d0:	20004a58 	.word	0x20004a58
 800b7d4:	20004a4c 	.word	0x20004a4c
 800b7d8:	20004a5c 	.word	0x20004a5c
 800b7dc:	20004a60 	.word	0x20004a60

0800b7e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d04d      	beq.n	800b88e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7f2:	2308      	movs	r3, #8
 800b7f4:	425b      	negs	r3, r3
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	685a      	ldr	r2, [r3, #4]
 800b804:	4b24      	ldr	r3, [pc, #144]	; (800b898 <vPortFree+0xb8>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4013      	ands	r3, r2
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <vPortFree+0x44>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	60fb      	str	r3, [r7, #12]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00a      	beq.n	800b842 <vPortFree+0x62>
	__asm volatile
 800b82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	60bb      	str	r3, [r7, #8]
}
 800b83e:	bf00      	nop
 800b840:	e7fe      	b.n	800b840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	685a      	ldr	r2, [r3, #4]
 800b846:	4b14      	ldr	r3, [pc, #80]	; (800b898 <vPortFree+0xb8>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4013      	ands	r3, r2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d01e      	beq.n	800b88e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d11a      	bne.n	800b88e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <vPortFree+0xb8>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	43db      	mvns	r3, r3
 800b862:	401a      	ands	r2, r3
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b868:	f7fe fc84 	bl	800a174 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <vPortFree+0xbc>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4413      	add	r3, r2
 800b876:	4a09      	ldr	r2, [pc, #36]	; (800b89c <vPortFree+0xbc>)
 800b878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b87a:	6938      	ldr	r0, [r7, #16]
 800b87c:	f000 f874 	bl	800b968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <vPortFree+0xc0>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3301      	adds	r3, #1
 800b886:	4a06      	ldr	r2, [pc, #24]	; (800b8a0 <vPortFree+0xc0>)
 800b888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b88a:	f7fe fc81 	bl	800a190 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b88e:	bf00      	nop
 800b890:	3718      	adds	r7, #24
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20004a68 	.word	0x20004a68
 800b89c:	20004a58 	.word	0x20004a58
 800b8a0:	20004a64 	.word	0x20004a64

0800b8a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b8ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8b0:	4b27      	ldr	r3, [pc, #156]	; (800b950 <prvHeapInit+0xac>)
 800b8b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00c      	beq.n	800b8d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3307      	adds	r3, #7
 800b8c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f023 0307 	bic.w	r3, r3, #7
 800b8ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	4a1f      	ldr	r2, [pc, #124]	; (800b950 <prvHeapInit+0xac>)
 800b8d4:	4413      	add	r3, r2
 800b8d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8dc:	4a1d      	ldr	r2, [pc, #116]	; (800b954 <prvHeapInit+0xb0>)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8e2:	4b1c      	ldr	r3, [pc, #112]	; (800b954 <prvHeapInit+0xb0>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8f0:	2208      	movs	r2, #8
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	1a9b      	subs	r3, r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f023 0307 	bic.w	r3, r3, #7
 800b8fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	4a15      	ldr	r2, [pc, #84]	; (800b958 <prvHeapInit+0xb4>)
 800b904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b906:	4b14      	ldr	r3, [pc, #80]	; (800b958 <prvHeapInit+0xb4>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2200      	movs	r2, #0
 800b90c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b90e:	4b12      	ldr	r3, [pc, #72]	; (800b958 <prvHeapInit+0xb4>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	1ad2      	subs	r2, r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b924:	4b0c      	ldr	r3, [pc, #48]	; (800b958 <prvHeapInit+0xb4>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	4a0a      	ldr	r2, [pc, #40]	; (800b95c <prvHeapInit+0xb8>)
 800b932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	4a09      	ldr	r2, [pc, #36]	; (800b960 <prvHeapInit+0xbc>)
 800b93a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b93c:	4b09      	ldr	r3, [pc, #36]	; (800b964 <prvHeapInit+0xc0>)
 800b93e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b942:	601a      	str	r2, [r3, #0]
}
 800b944:	bf00      	nop
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr
 800b950:	20000e4c 	.word	0x20000e4c
 800b954:	20004a4c 	.word	0x20004a4c
 800b958:	20004a54 	.word	0x20004a54
 800b95c:	20004a5c 	.word	0x20004a5c
 800b960:	20004a58 	.word	0x20004a58
 800b964:	20004a68 	.word	0x20004a68

0800b968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b970:	4b28      	ldr	r3, [pc, #160]	; (800ba14 <prvInsertBlockIntoFreeList+0xac>)
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	e002      	b.n	800b97c <prvInsertBlockIntoFreeList+0x14>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	429a      	cmp	r2, r3
 800b984:	d8f7      	bhi.n	800b976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	4413      	add	r3, r2
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	429a      	cmp	r2, r3
 800b996:	d108      	bne.n	800b9aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	441a      	add	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	441a      	add	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d118      	bne.n	800b9f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <prvInsertBlockIntoFreeList+0xb0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d00d      	beq.n	800b9e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	441a      	add	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	e008      	b.n	800b9f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9e6:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <prvInsertBlockIntoFreeList+0xb0>)
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	e003      	b.n	800b9f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d002      	beq.n	800ba06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba06:	bf00      	nop
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	20004a4c 	.word	0x20004a4c
 800ba18:	20004a54 	.word	0x20004a54
 800ba1c:	00000000 	.word	0x00000000

0800ba20 <diff_radian>:
double diff_rotations(double distance){
	double wheel_circum = M_PI * 2 * DIFF_WHEEL_RADIUS;
	return distance / wheel_circum;
}

double diff_radian(float degree){
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	ed87 0a01 	vstr	s0, [r7, #4]
    return 2 * M_PI *  (degree / 360);
 800ba2a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ba2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800ba68 <diff_radian+0x48>
 800ba32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ba36:	ee16 0a90 	vmov	r0, s13
 800ba3a:	f7f4 fd7d 	bl	8000538 <__aeabi_f2d>
 800ba3e:	a308      	add	r3, pc, #32	; (adr r3, 800ba60 <diff_radian+0x40>)
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f7f4 fdd0 	bl	80005e8 <__aeabi_dmul>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	ec43 2b17 	vmov	d7, r2, r3
}
 800ba50:	eeb0 0a47 	vmov.f32	s0, s14
 800ba54:	eef0 0a67 	vmov.f32	s1, s15
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	54442d18 	.word	0x54442d18
 800ba64:	401921fb 	.word	0x401921fb
 800ba68:	43b40000 	.word	0x43b40000
 800ba6c:	00000000 	.word	0x00000000

0800ba70 <diff_get_Lmotor_values>:
double diff_get_Lmotor_values(int wheel_angle, int ideal_value){
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08a      	sub	sp, #40	; 0x28
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
    double dist_from_ideal = DIFF_WHEEL_GAP / 2;
 800ba7a:	a33a      	add	r3, pc, #232	; (adr r3, 800bb64 <diff_get_Lmotor_values+0xf4>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double turning_rad = DIFF_VEHICLE_LENGTH / tan(diff_radian(abs(wheel_angle)));
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bfb8      	it	lt
 800ba8a:	425b      	neglt	r3, r3
 800ba8c:	ee07 3a90 	vmov	s15, r3
 800ba90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba94:	eeb0 0a67 	vmov.f32	s0, s15
 800ba98:	f7ff ffc2 	bl	800ba20 <diff_radian>
 800ba9c:	eeb0 7a40 	vmov.f32	s14, s0
 800baa0:	eef0 7a60 	vmov.f32	s15, s1
 800baa4:	eeb0 0a47 	vmov.f32	s0, s14
 800baa8:	eef0 0a67 	vmov.f32	s1, s15
 800baac:	f003 fc90 	bl	800f3d0 <tan>
 800bab0:	ec53 2b10 	vmov	r2, r3, d0
 800bab4:	f04f 0000 	mov.w	r0, #0
 800bab8:	4929      	ldr	r1, [pc, #164]	; (800bb60 <diff_get_Lmotor_values+0xf0>)
 800baba:	f7f4 febf 	bl	800083c <__aeabi_ddiv>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (wheel_angle <0){
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	da1b      	bge.n	800bb04 <diff_get_Lmotor_values+0x94>
        double turning_diff = (turning_rad  - ( dist_from_ideal) )/ turning_rad;
 800bacc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bad0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bad4:	f7f4 fbd0 	bl	8000278 <__aeabi_dsub>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	4610      	mov	r0, r2
 800bade:	4619      	mov	r1, r3
 800bae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bae4:	f7f4 feaa 	bl	800083c <__aeabi_ddiv>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	e9c7 2302 	strd	r2, r3, [r7, #8]
        return turning_diff*ideal_value;
 800baf0:	6838      	ldr	r0, [r7, #0]
 800baf2:	f7f4 fd0f 	bl	8000514 <__aeabi_i2d>
 800baf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bafa:	f7f4 fd75 	bl	80005e8 <__aeabi_dmul>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	e023      	b.n	800bb4c <diff_get_Lmotor_values+0xdc>
    }else if(wheel_angle >0){
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd1b      	ble.n	800bb42 <diff_get_Lmotor_values+0xd2>
        double turning_diff = (turning_rad  + ( dist_from_ideal) )/ turning_rad;
 800bb0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bb12:	f7f4 fbb3 	bl	800027c <__adddf3>
 800bb16:	4602      	mov	r2, r0
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb22:	f7f4 fe8b 	bl	800083c <__aeabi_ddiv>
 800bb26:	4602      	mov	r2, r0
 800bb28:	460b      	mov	r3, r1
 800bb2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        return turning_diff*ideal_value;
 800bb2e:	6838      	ldr	r0, [r7, #0]
 800bb30:	f7f4 fcf0 	bl	8000514 <__aeabi_i2d>
 800bb34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb38:	f7f4 fd56 	bl	80005e8 <__aeabi_dmul>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	e004      	b.n	800bb4c <diff_get_Lmotor_values+0xdc>
    }else {
    	return ideal_value;
 800bb42:	6838      	ldr	r0, [r7, #0]
 800bb44:	f7f4 fce6 	bl	8000514 <__aeabi_i2d>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	ec43 2b17 	vmov	d7, r2, r3
    }
}
 800bb50:	eeb0 0a47 	vmov.f32	s0, s14
 800bb54:	eef0 0a67 	vmov.f32	s1, s15
 800bb58:	3728      	adds	r7, #40	; 0x28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	402d0000 	.word	0x402d0000
 800bb64:	66666666 	.word	0x66666666
 800bb68:	401e6666 	.word	0x401e6666
 800bb6c:	00000000 	.word	0x00000000

0800bb70 <diff_get_Rmotor_values>:

double diff_get_Rmotor_values(int wheel_angle, int ideal_value){
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08a      	sub	sp, #40	; 0x28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]

    double dist_from_ideal = DIFF_WHEEL_GAP / 2;
 800bb7a:	a33a      	add	r3, pc, #232	; (adr r3, 800bc64 <diff_get_Rmotor_values+0xf4>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double turning_rad = DIFF_VEHICLE_LENGTH / tan(diff_radian(abs(wheel_angle)));
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bfb8      	it	lt
 800bb8a:	425b      	neglt	r3, r3
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb94:	eeb0 0a67 	vmov.f32	s0, s15
 800bb98:	f7ff ff42 	bl	800ba20 <diff_radian>
 800bb9c:	eeb0 7a40 	vmov.f32	s14, s0
 800bba0:	eef0 7a60 	vmov.f32	s15, s1
 800bba4:	eeb0 0a47 	vmov.f32	s0, s14
 800bba8:	eef0 0a67 	vmov.f32	s1, s15
 800bbac:	f003 fc10 	bl	800f3d0 <tan>
 800bbb0:	ec53 2b10 	vmov	r2, r3, d0
 800bbb4:	f04f 0000 	mov.w	r0, #0
 800bbb8:	4929      	ldr	r1, [pc, #164]	; (800bc60 <diff_get_Rmotor_values+0xf0>)
 800bbba:	f7f4 fe3f 	bl	800083c <__aeabi_ddiv>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (wheel_angle > 0){
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dd1b      	ble.n	800bc04 <diff_get_Rmotor_values+0x94>
        double turning_diff = (turning_rad  - ( dist_from_ideal) )/ turning_rad;
 800bbcc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bbd4:	f7f4 fb50 	bl	8000278 <__aeabi_dsub>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4610      	mov	r0, r2
 800bbde:	4619      	mov	r1, r3
 800bbe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbe4:	f7f4 fe2a 	bl	800083c <__aeabi_ddiv>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	460b      	mov	r3, r1
 800bbec:	e9c7 2302 	strd	r2, r3, [r7, #8]
        return turning_diff*ideal_value;
 800bbf0:	6838      	ldr	r0, [r7, #0]
 800bbf2:	f7f4 fc8f 	bl	8000514 <__aeabi_i2d>
 800bbf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbfa:	f7f4 fcf5 	bl	80005e8 <__aeabi_dmul>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	e023      	b.n	800bc4c <diff_get_Rmotor_values+0xdc>
    }else if(wheel_angle < 0){
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	da1b      	bge.n	800bc42 <diff_get_Rmotor_values+0xd2>
        double turning_diff = (turning_rad  + ( dist_from_ideal) )/ turning_rad;
 800bc0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bc12:	f7f4 fb33 	bl	800027c <__adddf3>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc22:	f7f4 fe0b 	bl	800083c <__aeabi_ddiv>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
        return turning_diff*ideal_value;
 800bc2e:	6838      	ldr	r0, [r7, #0]
 800bc30:	f7f4 fc70 	bl	8000514 <__aeabi_i2d>
 800bc34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc38:	f7f4 fcd6 	bl	80005e8 <__aeabi_dmul>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	e004      	b.n	800bc4c <diff_get_Rmotor_values+0xdc>
    }else {
    	return ideal_value;
 800bc42:	6838      	ldr	r0, [r7, #0]
 800bc44:	f7f4 fc66 	bl	8000514 <__aeabi_i2d>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	ec43 2b17 	vmov	d7, r2, r3
    }
}
 800bc50:	eeb0 0a47 	vmov.f32	s0, s14
 800bc54:	eef0 0a67 	vmov.f32	s1, s15
 800bc58:	3728      	adds	r7, #40	; 0x28
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	402d0000 	.word	0x402d0000
 800bc64:	66666666 	.word	0x66666666
 800bc68:	401e6666 	.word	0x401e6666

0800bc6c <encoder_init>:
 *      Author: ytan196
 */
#include "encoder.h"


encoder_control* encoder_init(TIM_HandleTypeDef *tim_x){
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(tim_x,TIM_CHANNEL_ALL);
 800bc74:	213c      	movs	r1, #60	; 0x3c
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7fb f80d 	bl	8006c96 <HAL_TIM_Encoder_Start>
	encoder_control *ec = malloc(sizeof(encoder_control));
 800bc7c:	200c      	movs	r0, #12
 800bc7e:	f002 fdcf 	bl	800e820 <malloc>
 800bc82:	4603      	mov	r3, r0
 800bc84:	617b      	str	r3, [r7, #20]
	ec->timer = tim_x;
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	609a      	str	r2, [r3, #8]
	encoder_pulse_frame *now = malloc(sizeof(encoder_pulse_frame));
 800bc8c:	200c      	movs	r0, #12
 800bc8e:	f002 fdc7 	bl	800e820 <malloc>
 800bc92:	4603      	mov	r3, r0
 800bc94:	613b      	str	r3, [r7, #16]
	encoder_pulse_frame *then = malloc(sizeof(encoder_pulse_frame));
 800bc96:	200c      	movs	r0, #12
 800bc98:	f002 fdc2 	bl	800e820 <malloc>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	60fb      	str	r3, [r7, #12]
	now->pulseCount = __HAL_TIM_GET_COUNTER(tim_x);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca6:	461a      	mov	r2, r3
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	601a      	str	r2, [r3, #0]
	now->pulseDiff = 0;
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	605a      	str	r2, [r3, #4]
	now->Tick = HAL_GetTick();
 800bcb2:	f7f8 fa23 	bl	80040fc <HAL_GetTick>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	609a      	str	r2, [r3, #8]
	ec->currFrame = now;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	605a      	str	r2, [r3, #4]
	ec->prevFrame = then;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	601a      	str	r2, [r3, #0]

	return ec;
 800bcc8:	697b      	ldr	r3, [r7, #20]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3718      	adds	r7, #24
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <encoder_run>:

encoder_pulse_frame* encoder_run(encoder_control *encoder_ctl, int delaytick, int flipped ){
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	60f8      	str	r0, [r7, #12]
 800bcda:	60b9      	str	r1, [r7, #8]
 800bcdc:	607a      	str	r2, [r7, #4]
	//returns current pulse_frame
	if(HAL_GetTick() - encoder_ctl->currFrame->Tick > delaytick){
 800bcde:	f7f8 fa0d 	bl	80040fc <HAL_GetTick>
 800bce2:	4602      	mov	r2, r0
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	1ad2      	subs	r2, r2, r3
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d929      	bls.n	800bd46 <encoder_run+0x74>
		free(encoder_ctl->prevFrame);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f002 fd9a 	bl	800e830 <free>
		encoder_ctl->prevFrame = encoder_ctl->currFrame;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	685a      	ldr	r2, [r3, #4]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	601a      	str	r2, [r3, #0]
		encoder_pulse_frame *now = malloc(sizeof(encoder_pulse_frame));
 800bd04:	200c      	movs	r0, #12
 800bd06:	f002 fd8b 	bl	800e820 <malloc>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	617b      	str	r3, [r7, #20]
		now->pulseCount = __HAL_TIM_GET_COUNTER(encoder_ctl->timer);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	461a      	mov	r2, r3
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	601a      	str	r2, [r3, #0]
		now->pulseDiff = _encoder_calPulseDiff(encoder_ctl->timer,encoder_ctl->prevFrame->pulseCount,now->pulseCount, flipped);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6898      	ldr	r0, [r3, #8]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6819      	ldr	r1, [r3, #0]
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f000 f812 	bl	800bd54 <_encoder_calPulseDiff>
 800bd30:	4602      	mov	r2, r0
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	605a      	str	r2, [r3, #4]
		now->Tick = HAL_GetTick();
 800bd36:	f7f8 f9e1 	bl	80040fc <HAL_GetTick>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	609a      	str	r2, [r3, #8]

		encoder_ctl->currFrame = now;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	605a      	str	r2, [r3, #4]
	}

	return encoder_ctl->currFrame;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	685b      	ldr	r3, [r3, #4]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <_encoder_calPulseDiff>:


int _encoder_calPulseDiff(TIM_HandleTypeDef *tim_x, int cnt1, int cnt2, int flipped)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	603b      	str	r3, [r7, #0]
	int diff;
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(tim_x)){
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0310 	and.w	r3, r3, #16
 800bd6c:	2b10      	cmp	r3, #16
 800bd6e:	d11b      	bne.n	800bda8 <_encoder_calPulseDiff+0x54>
		if (cnt2 <= cnt1) diff = cnt1 - cnt2;
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	dc04      	bgt.n	800bd82 <_encoder_calPulseDiff+0x2e>
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	617b      	str	r3, [r7, #20]
 800bd80:	e006      	b.n	800bd90 <_encoder_calPulseDiff+0x3c>
		else diff = (65535 - cnt2) + cnt1;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800bd88:	33ff      	adds	r3, #255	; 0xff
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	617b      	str	r3, [r7, #20]
		return ((flipped)*diff)/30;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	fb02 f303 	mul.w	r3, r2, r3
 800bd98:	4a14      	ldr	r2, [pc, #80]	; (800bdec <_encoder_calPulseDiff+0x98>)
 800bd9a:	fb82 1203 	smull	r1, r2, r2, r3
 800bd9e:	441a      	add	r2, r3
 800bda0:	1112      	asrs	r2, r2, #4
 800bda2:	17db      	asrs	r3, r3, #31
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	e01a      	b.n	800bdde <_encoder_calPulseDiff+0x8a>
	}else{
		if (cnt2 >= cnt1) diff =  cnt2 - cnt1;
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	db04      	blt.n	800bdba <_encoder_calPulseDiff+0x66>
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	e006      	b.n	800bdc8 <_encoder_calPulseDiff+0x74>
		else diff = (65535 - cnt1) + cnt2;
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800bdc0:	33ff      	adds	r3, #255	; 0xff
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	617b      	str	r3, [r7, #20]
		return - ((flipped)*diff)/30;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	fb02 f303 	mul.w	r3, r2, r3
 800bdd0:	4a06      	ldr	r2, [pc, #24]	; (800bdec <_encoder_calPulseDiff+0x98>)
 800bdd2:	fb82 1203 	smull	r1, r2, r2, r3
 800bdd6:	441a      	add	r2, r3
 800bdd8:	1112      	asrs	r2, r2, #4
 800bdda:	17db      	asrs	r3, r3, #31
 800bddc:	1a9b      	subs	r3, r3, r2
	}
	return 0;
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
 800bdea:	bf00      	nop
 800bdec:	88888889 	.word	0x88888889

0800bdf0 <encoder_getTickDiff>:

uint32_t encoder_getTickDiff(encoder_control *encoder_ctl){
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
	//return encoder_ctl->currFrame->Tick - encoder_ctl->prevFrame->Tick;

	uint32_t curr = encoder_ctl->currFrame->Tick;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	60fb      	str	r3, [r7, #12]
	uint32_t prev = encoder_ctl->prevFrame->Tick;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	60bb      	str	r3, [r7, #8]
	if (curr >= prev) {
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d303      	bcc.n	800be18 <encoder_getTickDiff+0x28>
		return curr - prev;
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	e004      	b.n	800be22 <encoder_getTickDiff+0x32>
	} else{
		return (16777216 + curr) - prev;
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
	}



}
 800be22:	4618      	mov	r0, r3
 800be24:	3714      	adds	r7, #20
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <select_user_bank>:
void i2c_bypass(I2C_HandleTypeDef *hi2c1){
	write_single_icm20948_reg(hi2c1,ub_0, B0_INT_PIN_CFG, 0x02);
}

void select_user_bank(I2C_HandleTypeDef* hi2c1, userbank ub)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b086      	sub	sp, #24
 800be32:	af02      	add	r7, sp, #8
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	460b      	mov	r3, r1
 800be38:	70fb      	strb	r3, [r7, #3]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800be3a:	237f      	movs	r3, #127	; 0x7f
 800be3c:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 800be3e:	78fb      	ldrb	r3, [r7, #3]
 800be40:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(hi2c1,SLAVE_ADDR,write_reg,2,10);
 800be42:	f107 020c 	add.w	r2, r7, #12
 800be46:	230a      	movs	r3, #10
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	2302      	movs	r3, #2
 800be4c:	21d0      	movs	r1, #208	; 0xd0
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7f9 f94c 	bl	80050ec <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800be54:	2002      	movs	r0, #2
 800be56:	f7f8 f95d 	bl	8004114 <HAL_Delay>
	//HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);

}
 800be5a:	bf00      	nop
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <read_single_icm20948_reg>:

uint8_t read_single_icm20948_reg(I2C_HandleTypeDef* hi2c1,userbank ub, uint8_t reg)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b086      	sub	sp, #24
 800be66:	af02      	add	r7, sp, #8
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	460b      	mov	r3, r1
 800be6c:	70fb      	strb	r3, [r7, #3]
 800be6e:	4613      	mov	r3, r2
 800be70:	70bb      	strb	r3, [r7, #2]
	uint8_t read_reg = READ | reg;
 800be72:	78bb      	ldrb	r3, [r7, #2]
 800be74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(hi2c1,ub);
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff ffd4 	bl	800be2e <select_user_bank>

	HAL_I2C_Master_Transmit(hi2c1,SLAVE_ADDR,&read_reg,1,1000);
 800be86:	f107 020f 	add.w	r2, r7, #15
 800be8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	2301      	movs	r3, #1
 800be92:	21d0      	movs	r1, #208	; 0xd0
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7f9 f929 	bl	80050ec <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800be9a:	2002      	movs	r0, #2
 800be9c:	f7f8 f93a 	bl	8004114 <HAL_Delay>
	HAL_I2C_Master_Receive(hi2c1,SLAVE_ADDR,&reg_val,1,1000);
 800bea0:	f107 020e 	add.w	r2, r7, #14
 800bea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	2301      	movs	r3, #1
 800beac:	21d0      	movs	r1, #208	; 0xd0
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f7f9 fa1a 	bl	80052e8 <HAL_I2C_Master_Receive>
	HAL_Delay(2);
 800beb4:	2002      	movs	r0, #2
 800beb6:	f7f8 f92d 	bl	8004114 <HAL_Delay>

	return reg_val;
 800beba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <read_multiple_icm20948_reg>:

uint8_t* read_multiple_icm20948_reg(I2C_HandleTypeDef* hi2c1,userbank ub, uint8_t reg, uint8_t len)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b086      	sub	sp, #24
 800bec8:	af02      	add	r7, sp, #8
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	4608      	mov	r0, r1
 800bece:	4611      	mov	r1, r2
 800bed0:	461a      	mov	r2, r3
 800bed2:	4603      	mov	r3, r0
 800bed4:	70fb      	strb	r3, [r7, #3]
 800bed6:	460b      	mov	r3, r1
 800bed8:	70bb      	strb	r3, [r7, #2]
 800beda:	4613      	mov	r3, r2
 800bedc:	707b      	strb	r3, [r7, #1]
	uint8_t read_reg = READ | reg;
 800bede:	78bb      	ldrb	r3, [r7, #2]
 800bee0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(hi2c1,ub);
 800bee8:	78fb      	ldrb	r3, [r7, #3]
 800beea:	4619      	mov	r1, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ff9e 	bl	800be2e <select_user_bank>


	HAL_I2C_Master_Transmit(hi2c1,SLAVE_ADDR,&read_reg,1,1000);
 800bef2:	f107 020f 	add.w	r2, r7, #15
 800bef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	2301      	movs	r3, #1
 800befe:	21d0      	movs	r1, #208	; 0xd0
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f7f9 f8f3 	bl	80050ec <HAL_I2C_Master_Transmit>
	osDelay(2);
 800bf06:	2002      	movs	r0, #2
 800bf08:	f7fd f8e8 	bl	80090dc <osDelay>
	HAL_I2C_Master_Receive(hi2c1,SLAVE_ADDR,reg_val,len,1000);
 800bf0c:	787b      	ldrb	r3, [r7, #1]
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf14:	9200      	str	r2, [sp, #0]
 800bf16:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <read_multiple_icm20948_reg+0x6c>)
 800bf18:	21d0      	movs	r1, #208	; 0xd0
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f7f9 f9e4 	bl	80052e8 <HAL_I2C_Master_Receive>
	osDelay(2);
 800bf20:	2002      	movs	r0, #2
 800bf22:	f7fd f8db 	bl	80090dc <osDelay>
	return reg_val;
 800bf26:	4b02      	ldr	r3, [pc, #8]	; (800bf30 <read_multiple_icm20948_reg+0x6c>)
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3710      	adds	r7, #16
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	20004a74 	.word	0x20004a74

0800bf34 <write_single_icm20948_reg>:

void write_single_icm20948_reg(I2C_HandleTypeDef* hi2c1,userbank ub, uint8_t reg, uint8_t val)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b086      	sub	sp, #24
 800bf38:	af02      	add	r7, sp, #8
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	4611      	mov	r1, r2
 800bf40:	461a      	mov	r2, r3
 800bf42:	4603      	mov	r3, r0
 800bf44:	70fb      	strb	r3, [r7, #3]
 800bf46:	460b      	mov	r3, r1
 800bf48:	70bb      	strb	r3, [r7, #2]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	707b      	strb	r3, [r7, #1]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800bf4e:	78bb      	ldrb	r3, [r7, #2]
 800bf50:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800bf52:	787b      	ldrb	r3, [r7, #1]
 800bf54:	737b      	strb	r3, [r7, #13]

	select_user_bank(hi2c1,ub);
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff ff67 	bl	800be2e <select_user_bank>

	HAL_I2C_Master_Transmit(hi2c1,SLAVE_ADDR,write_reg,2,1000);
 800bf60:	f107 020c 	add.w	r2, r7, #12
 800bf64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	21d0      	movs	r1, #208	; 0xd0
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f7f9 f8bc 	bl	80050ec <HAL_I2C_Master_Transmit>
	osDelay(2);
 800bf74:	2002      	movs	r0, #2
 800bf76:	f7fd f8b1 	bl	80090dc <osDelay>
}
 800bf7a:	bf00      	nop
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <write_multiple_icm20948_reg>:

void write_multiple_icm20948_reg(I2C_HandleTypeDef* hi2c1,userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b088      	sub	sp, #32
 800bf86:	af02      	add	r7, sp, #8
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	607b      	str	r3, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	72fb      	strb	r3, [r7, #11]
 800bf90:	4613      	mov	r3, r2
 800bf92:	72bb      	strb	r3, [r7, #10]
	uint8_t write_reg = WRITE | reg;
 800bf94:	7abb      	ldrb	r3, [r7, #10]
 800bf96:	75fb      	strb	r3, [r7, #23]
	select_user_bank(hi2c1,ub);
 800bf98:	7afb      	ldrb	r3, [r7, #11]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f7ff ff46 	bl	800be2e <select_user_bank>
	HAL_I2C_Master_Transmit(hi2c1,SLAVE_ADDR,&write_reg,1,1000);
 800bfa2:	f107 0217 	add.w	r2, r7, #23
 800bfa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	2301      	movs	r3, #1
 800bfae:	21d0      	movs	r1, #208	; 0xd0
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f7f9 f89b 	bl	80050ec <HAL_I2C_Master_Transmit>
	osDelay(2);
 800bfb6:	2002      	movs	r0, #2
 800bfb8:	f7fd f890 	bl	80090dc <osDelay>
	HAL_I2C_Master_Transmit(hi2c1,SLAVE_ADDR,val,len,1000);
 800bfbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfc6:	9200      	str	r2, [sp, #0]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	21d0      	movs	r1, #208	; 0xd0
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f7f9 f88d 	bl	80050ec <HAL_I2C_Master_Transmit>
	osDelay(2);
 800bfd2:	2002      	movs	r0, #2
 800bfd4:	f7fd f882 	bl	80090dc <osDelay>
}
 800bfd8:	bf00      	nop
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <icm20948_init>:




void icm20948_init(I2C_HandleTypeDef *hi2c1)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]


	while(!icm20948_who_am_i(hi2c1));
 800bfe8:	bf00      	nop
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f910 	bl	800c210 <icm20948_who_am_i>
 800bff0:	4603      	mov	r3, r0
 800bff2:	f083 0301 	eor.w	r3, r3, #1
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1f6      	bne.n	800bfea <icm20948_init+0xa>
	icm20948_device_reset(hi2c1);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f91c 	bl	800c23a <icm20948_device_reset>
	osDelay(5); //tf need reset time
 800c002:	2005      	movs	r0, #5
 800c004:	f7fd f86a 	bl	80090dc <osDelay>
	icm20948_wakeup(hi2c1);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 f924 	bl	800c256 <icm20948_wakeup>

	icm20948_clock_source(hi2c1,1);
 800c00e:	2101      	movs	r1, #1
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fc07 	bl	800c824 <icm20948_clock_source>
	icm20948_odr_align_enable(hi2c1);
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 fc1f 	bl	800c85a <icm20948_odr_align_enable>

	//icm20948_spi_slave_enable(hi2c1);

	icm20948_gyro_low_pass_filter(hi2c1,1);
 800c01c:	2101      	movs	r1, #1
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f961 	bl	800c2e6 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(hi2c1,2);
 800c024:	2102      	movs	r1, #2
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f97c 	bl	800c324 <icm20948_accel_low_pass_filter>
//
	icm20948_gyro_sample_rate_divider(hi2c1,0);
 800c02c:	2100      	movs	r1, #0
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f92a 	bl	800c288 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(hi2c1,0);
 800c034:	2100      	movs	r1, #0
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f936 	bl	800c2a8 <icm20948_accel_sample_rate_divider>
//
	icm20948_gyro_calibration(hi2c1);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 f991 	bl	800c364 <icm20948_gyro_calibration>
	icm20948_accel_calibration(hi2c1);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fa36 	bl	800c4b4 <icm20948_accel_calibration>
//
	icm20948_gyro_full_scale_select(hi2c1,_2000dps);
 800c048:	2103      	movs	r1, #3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fb56 	bl	800c6fc <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(hi2c1,_16g);
 800c050:	2103      	movs	r1, #3
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fb9e 	bl	800c794 <icm20948_accel_full_scale_select>
}
 800c058:	bf00      	nop
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <icm20948_gyro_read>:
}



void icm20948_gyro_read(I2C_HandleTypeDef *hi2c1,axises* data)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
	uint8_t* temp = read_multiple_icm20948_reg(hi2c1,ub_0, B0_GYRO_XOUT_H, 6);
 800c06a:	2306      	movs	r3, #6
 800c06c:	2233      	movs	r2, #51	; 0x33
 800c06e:	2100      	movs	r1, #0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f7ff ff27 	bl	800bec4 <read_multiple_icm20948_reg>
 800c076:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	021b      	lsls	r3, r3, #8
 800c07e:	b21a      	sxth	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3301      	adds	r3, #1
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	b21b      	sxth	r3, r3
 800c088:	4313      	orrs	r3, r2
 800c08a:	b21b      	sxth	r3, r3
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7f4 fa41 	bl	8000514 <__aeabi_i2d>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3302      	adds	r3, #2
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	021b      	lsls	r3, r3, #8
 800c0a4:	b21a      	sxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3303      	adds	r3, #3
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	b21b      	sxth	r3, r3
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	b21b      	sxth	r3, r3
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7f4 fa2e 	bl	8000514 <__aeabi_i2d>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	021b      	lsls	r3, r3, #8
 800c0ca:	b21a      	sxth	r2, r3
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3305      	adds	r3, #5
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	b21b      	sxth	r3, r3
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	b21b      	sxth	r3, r3
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f4 fa1b 	bl	8000514 <__aeabi_i2d>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800c0e8:	bf00      	nop
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <icm20948_accel_read>:

void icm20948_accel_read(I2C_HandleTypeDef *hi2c1,axises* data)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
	uint8_t* temp = read_multiple_icm20948_reg(hi2c1,ub_0, B0_ACCEL_XOUT_H, 6);
 800c0fa:	2306      	movs	r3, #6
 800c0fc:	222d      	movs	r2, #45	; 0x2d
 800c0fe:	2100      	movs	r1, #0
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7ff fedf 	bl	800bec4 <read_multiple_icm20948_reg>
 800c106:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	021b      	lsls	r3, r3, #8
 800c10e:	b21a      	sxth	r2, r3
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	3301      	adds	r3, #1
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	b21b      	sxth	r3, r3
 800c118:	4313      	orrs	r3, r2
 800c11a:	b21b      	sxth	r3, r3
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7f4 f9f9 	bl	8000514 <__aeabi_i2d>
 800c122:	4602      	mov	r2, r0
 800c124:	460b      	mov	r3, r1
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	e9c1 2300 	strd	r2, r3, [r1]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	3302      	adds	r3, #2
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	021b      	lsls	r3, r3, #8
 800c134:	b21a      	sxth	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3303      	adds	r3, #3
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	b21b      	sxth	r3, r3
 800c13e:	4313      	orrs	r3, r2
 800c140:	b21b      	sxth	r3, r3
 800c142:	4618      	mov	r0, r3
 800c144:	f7f4 f9e6 	bl	8000514 <__aeabi_i2d>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	6839      	ldr	r1, [r7, #0]
 800c14e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z = (int16_t)(temp[4] << 8 | temp[5]); //+ accel_scale_factor;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	3304      	adds	r3, #4
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	021b      	lsls	r3, r3, #8
 800c15a:	b21a      	sxth	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3305      	adds	r3, #5
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	b21b      	sxth	r3, r3
 800c164:	4313      	orrs	r3, r2
 800c166:	b21b      	sxth	r3, r3
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f4 f9d3 	bl	8000514 <__aeabi_i2d>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	e9c1 2304 	strd	r2, r3, [r1, #16]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 800c178:	bf00      	nop
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <icm20948_gyro_read_dps>:
		return true;
//	}
}

void icm20948_gyro_read_dps(I2C_HandleTypeDef *hi2c1,axises* data)
{
 800c180:	b5b0      	push	{r4, r5, r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
	icm20948_gyro_read(hi2c1,data);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff ff67 	bl	800c060 <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c198:	4b1c      	ldr	r3, [pc, #112]	; (800c20c <icm20948_gyro_read_dps+0x8c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f7f4 f9cb 	bl	8000538 <__aeabi_f2d>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	f7f4 fb47 	bl	800083c <__aeabi_ddiv>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	6839      	ldr	r1, [r7, #0]
 800c1b4:	e9c1 2300 	strd	r2, r3, [r1]
	data->y /= gyro_scale_factor;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c1be:	4b13      	ldr	r3, [pc, #76]	; (800c20c <icm20948_gyro_read_dps+0x8c>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7f4 f9b8 	bl	8000538 <__aeabi_f2d>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f7f4 fb34 	bl	800083c <__aeabi_ddiv>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	e9c1 2302 	strd	r2, r3, [r1, #8]
	data->z /= gyro_scale_factor;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800c1e4:	4b09      	ldr	r3, [pc, #36]	; (800c20c <icm20948_gyro_read_dps+0x8c>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7f4 f9a5 	bl	8000538 <__aeabi_f2d>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f7f4 fb21 	bl	800083c <__aeabi_ddiv>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800c204:	bf00      	nop
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bdb0      	pop	{r4, r5, r7, pc}
 800c20c:	20004a6c 	.word	0x20004a6c

0800c210 <icm20948_who_am_i>:
}
//Sub Function

//Who am I
bool icm20948_who_am_i(I2C_HandleTypeDef* hi2c1)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	uint8_t icm20948_id = read_single_icm20948_reg(hi2c1,ub_0, B0_WHO_AM_I);
 800c218:	2200      	movs	r2, #0
 800c21a:	2100      	movs	r1, #0
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff fe20 	bl	800be62 <read_single_icm20948_reg>
 800c222:	4603      	mov	r3, r0
 800c224:	73fb      	strb	r3, [r7, #15]

	if(icm20948_id == ICM20948_ID)
 800c226:	7bfb      	ldrb	r3, [r7, #15]
 800c228:	2bea      	cmp	r3, #234	; 0xea
 800c22a:	d101      	bne.n	800c230 <icm20948_who_am_i+0x20>
		return true;
 800c22c:	2301      	movs	r3, #1
 800c22e:	e000      	b.n	800c232 <icm20948_who_am_i+0x22>
	else
		return false;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <icm20948_device_reset>:

//Power Management

/*device reset*/
void icm20948_device_reset(I2C_HandleTypeDef *hi2c1)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
	//write_single_icm20948_reg(hi2c1,ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
	write_single_icm20948_reg(hi2c1,ub_0, B0_PWR_MGMT_1, 0x80);
 800c242:	2380      	movs	r3, #128	; 0x80
 800c244:	2206      	movs	r2, #6
 800c246:	2100      	movs	r1, #0
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f7ff fe73 	bl	800bf34 <write_single_icm20948_reg>
}
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <icm20948_wakeup>:
{
	write_single_ak09916_reg(hi2c1,MAG_CNTL3, 0x01);
}
/*wake up the imu*/
void icm20948_wakeup(I2C_HandleTypeDef* hi2c1)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
	uint8_t new_val = read_single_icm20948_reg(hi2c1,ub_0, B0_PWR_MGMT_1);
 800c25e:	2206      	movs	r2, #6
 800c260:	2100      	movs	r1, #0
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff fdfd 	bl	800be62 <read_single_icm20948_reg>
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]
	new_val &= 0xBF;
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c272:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(hi2c1,ub_0, B0_PWR_MGMT_1, new_val);
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	2206      	movs	r2, #6
 800c278:	2100      	movs	r1, #0
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff fe5a 	bl	800bf34 <write_single_icm20948_reg>
}
 800c280:	bf00      	nop
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <icm20948_gyro_sample_rate_divider>:
	write_single_icm20948_reg(hi2c1,ub_0, B0_PWR_MGMT_1, new_val);
}

/* write to imu the sampling rate */
void icm20948_gyro_sample_rate_divider(I2C_HandleTypeDef *hi2c1,uint8_t divider)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
	write_single_icm20948_reg(hi2c1,ub_2, B2_GYRO_SMPLRT_DIV, divider);
 800c294:	78fb      	ldrb	r3, [r7, #3]
 800c296:	2200      	movs	r2, #0
 800c298:	2120      	movs	r1, #32
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7ff fe4a 	bl	800bf34 <write_single_icm20948_reg>
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <icm20948_accel_sample_rate_divider>:
/* write to imu the sampling rate*/
void icm20948_accel_sample_rate_divider(I2C_HandleTypeDef *hi2c1,uint16_t divider)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b084      	sub	sp, #16
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	807b      	strh	r3, [r7, #2]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 800c2b4:	887b      	ldrh	r3, [r7, #2]
 800c2b6:	0a1b      	lsrs	r3, r3, #8
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 800c2bc:	887b      	ldrh	r3, [r7, #2]
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	f003 030f 	and.w	r3, r3, #15
 800c2c4:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(hi2c1,ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 800c2c6:	7bfb      	ldrb	r3, [r7, #15]
 800c2c8:	2210      	movs	r2, #16
 800c2ca:	2120      	movs	r1, #32
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff fe31 	bl	800bf34 <write_single_icm20948_reg>
	write_single_icm20948_reg(hi2c1,ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	2211      	movs	r2, #17
 800c2d6:	2120      	movs	r1, #32
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff fe2b 	bl	800bf34 <write_single_icm20948_reg>
}
 800c2de:	bf00      	nop
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <icm20948_gyro_low_pass_filter>:

/* config the low pass filter for gyro*/
void icm20948_gyro_low_pass_filter(I2C_HandleTypeDef *hi2c1,uint8_t config)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
	uint8_t new_val = read_single_icm20948_reg(hi2c1,ub_2, B2_GYRO_CONFIG_1);
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	2120      	movs	r1, #32
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7ff fdb3 	bl	800be62 <read_single_icm20948_reg>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800c300:	78fb      	ldrb	r3, [r7, #3]
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	b25a      	sxtb	r2, r3
 800c306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	b25b      	sxtb	r3, r3
 800c30e:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(hi2c1,ub_2, B2_GYRO_CONFIG_1, new_val);
 800c310:	7bfb      	ldrb	r3, [r7, #15]
 800c312:	2201      	movs	r2, #1
 800c314:	2120      	movs	r1, #32
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff fe0c 	bl	800bf34 <write_single_icm20948_reg>
}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <icm20948_accel_low_pass_filter>:
/* config the low pass filter for accelerometer*/
void icm20948_accel_low_pass_filter(I2C_HandleTypeDef *hi2c1,uint8_t config)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
	uint8_t new_val = read_single_icm20948_reg(hi2c1,ub_2, B2_ACCEL_CONFIG);
 800c330:	2214      	movs	r2, #20
 800c332:	2120      	movs	r1, #32
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f7ff fd94 	bl	800be62 <read_single_icm20948_reg>
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 800c33e:	78fb      	ldrb	r3, [r7, #3]
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	b25a      	sxtb	r2, r3
 800c344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c348:	4313      	orrs	r3, r2
 800c34a:	b25b      	sxtb	r3, r3
 800c34c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(hi2c1,ub_2, B2_ACCEL_CONFIG, new_val);
 800c34e:	7bfb      	ldrb	r3, [r7, #15]
 800c350:	2214      	movs	r2, #20
 800c352:	2120      	movs	r1, #32
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff fded 	bl	800bf34 <write_single_icm20948_reg>
}
 800c35a:	bf00      	nop
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <icm20948_gyro_calibration>:
/* gyro calibration */
void icm20948_gyro_calibration(I2C_HandleTypeDef *hi2c1)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b092      	sub	sp, #72	; 0x48
 800c368:	af02      	add	r7, sp, #8
 800c36a:	6078      	str	r0, [r7, #4]
	axises temp;
	int32_t gyro_bias[3] = {0};
 800c36c:	f107 0314 	add.w	r3, r7, #20
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	605a      	str	r2, [r3, #4]
 800c376:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 800c378:	2300      	movs	r3, #0
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	2300      	movs	r3, #0
 800c37e:	823b      	strh	r3, [r7, #16]

	for(int i = 0; i < 100; i++)
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c384:	e038      	b.n	800c3f8 <icm20948_gyro_calibration+0x94>
	{
		icm20948_gyro_read(hi2c1,&temp);
 800c386:	f107 0320 	add.w	r3, r7, #32
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f7ff fe67 	bl	800c060 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	4618      	mov	r0, r3
 800c396:	f7f4 f8bd 	bl	8000514 <__aeabi_i2d>
 800c39a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c39e:	f7f3 ff6d 	bl	800027c <__adddf3>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	4610      	mov	r0, r2
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	f7f4 fbcd 	bl	8000b48 <__aeabi_d2iz>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	617b      	str	r3, [r7, #20]
		gyro_bias[1] += temp.y;
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7f4 f8ad 	bl	8000514 <__aeabi_i2d>
 800c3ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c3be:	f7f3 ff5d 	bl	800027c <__adddf3>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	f7f4 fbbd 	bl	8000b48 <__aeabi_d2iz>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	61bb      	str	r3, [r7, #24]
		gyro_bias[2] += temp.z;
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7f4 f89d 	bl	8000514 <__aeabi_i2d>
 800c3da:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c3de:	f7f3 ff4d 	bl	800027c <__adddf3>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f7f4 fbad 	bl	8000b48 <__aeabi_d2iz>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < 100; i++)
 800c3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3fa:	2b63      	cmp	r3, #99	; 0x63
 800c3fc:	ddc3      	ble.n	800c386 <icm20948_gyro_calibration+0x22>
	}

	gyro_bias[0] /= 100;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	4a2b      	ldr	r2, [pc, #172]	; (800c4b0 <icm20948_gyro_calibration+0x14c>)
 800c402:	fb82 1203 	smull	r1, r2, r2, r3
 800c406:	1152      	asrs	r2, r2, #5
 800c408:	17db      	asrs	r3, r3, #31
 800c40a:	1ad3      	subs	r3, r2, r3
 800c40c:	617b      	str	r3, [r7, #20]
	gyro_bias[1] /= 100;
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	4a27      	ldr	r2, [pc, #156]	; (800c4b0 <icm20948_gyro_calibration+0x14c>)
 800c412:	fb82 1203 	smull	r1, r2, r2, r3
 800c416:	1152      	asrs	r2, r2, #5
 800c418:	17db      	asrs	r3, r3, #31
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	61bb      	str	r3, [r7, #24]
	gyro_bias[2] /= 100;
 800c41e:	69fb      	ldr	r3, [r7, #28]
 800c420:	4a23      	ldr	r2, [pc, #140]	; (800c4b0 <icm20948_gyro_calibration+0x14c>)
 800c422:	fb82 1203 	smull	r1, r2, r2, r3
 800c426:	1152      	asrs	r2, r2, #5
 800c428:	17db      	asrs	r3, r3, #31
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	61fb      	str	r3, [r7, #28]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	425b      	negs	r3, r3
 800c432:	2b00      	cmp	r3, #0
 800c434:	da00      	bge.n	800c438 <icm20948_gyro_calibration+0xd4>
 800c436:	3303      	adds	r3, #3
 800c438:	109b      	asrs	r3, r3, #2
 800c43a:	121b      	asrs	r3, r3, #8
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	733b      	strb	r3, [r7, #12]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	425b      	negs	r3, r3
 800c444:	2b00      	cmp	r3, #0
 800c446:	da00      	bge.n	800c44a <icm20948_gyro_calibration+0xe6>
 800c448:	3303      	adds	r3, #3
 800c44a:	109b      	asrs	r3, r3, #2
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	737b      	strb	r3, [r7, #13]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	425b      	negs	r3, r3
 800c454:	2b00      	cmp	r3, #0
 800c456:	da00      	bge.n	800c45a <icm20948_gyro_calibration+0xf6>
 800c458:	3303      	adds	r3, #3
 800c45a:	109b      	asrs	r3, r3, #2
 800c45c:	121b      	asrs	r3, r3, #8
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	73bb      	strb	r3, [r7, #14]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	425b      	negs	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	da00      	bge.n	800c46c <icm20948_gyro_calibration+0x108>
 800c46a:	3303      	adds	r3, #3
 800c46c:	109b      	asrs	r3, r3, #2
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	73fb      	strb	r3, [r7, #15]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	425b      	negs	r3, r3
 800c476:	2b00      	cmp	r3, #0
 800c478:	da00      	bge.n	800c47c <icm20948_gyro_calibration+0x118>
 800c47a:	3303      	adds	r3, #3
 800c47c:	109b      	asrs	r3, r3, #2
 800c47e:	121b      	asrs	r3, r3, #8
 800c480:	b2db      	uxtb	r3, r3
 800c482:	743b      	strb	r3, [r7, #16]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	425b      	negs	r3, r3
 800c488:	2b00      	cmp	r3, #0
 800c48a:	da00      	bge.n	800c48e <icm20948_gyro_calibration+0x12a>
 800c48c:	3303      	adds	r3, #3
 800c48e:	109b      	asrs	r3, r3, #2
 800c490:	b2db      	uxtb	r3, r3
 800c492:	747b      	strb	r3, [r7, #17]

	write_multiple_icm20948_reg(hi2c1,ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 800c494:	f107 030c 	add.w	r3, r7, #12
 800c498:	2206      	movs	r2, #6
 800c49a:	9200      	str	r2, [sp, #0]
 800c49c:	2203      	movs	r2, #3
 800c49e:	2120      	movs	r1, #32
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f7ff fd6e 	bl	800bf82 <write_multiple_icm20948_reg>
}
 800c4a6:	bf00      	nop
 800c4a8:	3740      	adds	r7, #64	; 0x40
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	51eb851f 	.word	0x51eb851f

0800c4b4 <icm20948_accel_calibration>:
/* accel calibration */
void icm20948_accel_calibration(I2C_HandleTypeDef *hi2c1)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b098      	sub	sp, #96	; 0x60
 800c4b8:	af02      	add	r7, sp, #8
 800c4ba:	6078      	str	r0, [r7, #4]
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 800c4bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	601a      	str	r2, [r3, #0]
 800c4c4:	605a      	str	r2, [r3, #4]
 800c4c6:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 800c4c8:	f107 0318 	add.w	r3, r7, #24
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]
 800c4d0:	605a      	str	r2, [r3, #4]
 800c4d2:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	613b      	str	r3, [r7, #16]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	82bb      	strh	r3, [r7, #20]

	for(int i = 0; i < 100; i++)
 800c4dc:	2300      	movs	r3, #0
 800c4de:	657b      	str	r3, [r7, #84]	; 0x54
 800c4e0:	e038      	b.n	800c554 <icm20948_accel_calibration+0xa0>
	{
		icm20948_accel_read(hi2c1,&temp);
 800c4e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff fe01 	bl	800c0f0 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7f4 f80f 	bl	8000514 <__aeabi_i2d>
 800c4f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c4fa:	f7f3 febf 	bl	800027c <__adddf3>
 800c4fe:	4602      	mov	r2, r0
 800c500:	460b      	mov	r3, r1
 800c502:	4610      	mov	r0, r2
 800c504:	4619      	mov	r1, r3
 800c506:	f7f4 fb1f 	bl	8000b48 <__aeabi_d2iz>
 800c50a:	4603      	mov	r3, r0
 800c50c:	627b      	str	r3, [r7, #36]	; 0x24
		accel_bias[1] += temp.y;
 800c50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c510:	4618      	mov	r0, r3
 800c512:	f7f3 ffff 	bl	8000514 <__aeabi_i2d>
 800c516:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c51a:	f7f3 feaf 	bl	800027c <__adddf3>
 800c51e:	4602      	mov	r2, r0
 800c520:	460b      	mov	r3, r1
 800c522:	4610      	mov	r0, r2
 800c524:	4619      	mov	r1, r3
 800c526:	f7f4 fb0f 	bl	8000b48 <__aeabi_d2iz>
 800c52a:	4603      	mov	r3, r0
 800c52c:	62bb      	str	r3, [r7, #40]	; 0x28
		accel_bias[2] += temp.z;
 800c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c530:	4618      	mov	r0, r3
 800c532:	f7f3 ffef 	bl	8000514 <__aeabi_i2d>
 800c536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c53a:	f7f3 fe9f 	bl	800027c <__adddf3>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4610      	mov	r0, r2
 800c544:	4619      	mov	r1, r3
 800c546:	f7f4 faff 	bl	8000b48 <__aeabi_d2iz>
 800c54a:	4603      	mov	r3, r0
 800c54c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < 100; i++)
 800c54e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c550:	3301      	adds	r3, #1
 800c552:	657b      	str	r3, [r7, #84]	; 0x54
 800c554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c556:	2b63      	cmp	r3, #99	; 0x63
 800c558:	ddc3      	ble.n	800c4e2 <icm20948_accel_calibration+0x2e>
	}

	accel_bias[0] /= 100;
 800c55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55c:	4a65      	ldr	r2, [pc, #404]	; (800c6f4 <icm20948_accel_calibration+0x240>)
 800c55e:	fb82 1203 	smull	r1, r2, r2, r3
 800c562:	1152      	asrs	r2, r2, #5
 800c564:	17db      	asrs	r3, r3, #31
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias[1] /= 100;
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	4a61      	ldr	r2, [pc, #388]	; (800c6f4 <icm20948_accel_calibration+0x240>)
 800c56e:	fb82 1203 	smull	r1, r2, r2, r3
 800c572:	1152      	asrs	r2, r2, #5
 800c574:	17db      	asrs	r3, r3, #31
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias[2] /= 100;
 800c57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57c:	4a5d      	ldr	r2, [pc, #372]	; (800c6f4 <icm20948_accel_calibration+0x240>)
 800c57e:	fb82 1203 	smull	r1, r2, r2, r3
 800c582:	1152      	asrs	r2, r2, #5
 800c584:	17db      	asrs	r3, r3, #31
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t mask_bit[3] = {0, 0, 0};
 800c58a:	4a5b      	ldr	r2, [pc, #364]	; (800c6f8 <icm20948_accel_calibration+0x244>)
 800c58c:	f107 030c 	add.w	r3, r7, #12
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	4611      	mov	r1, r2
 800c594:	8019      	strh	r1, [r3, #0]
 800c596:	3302      	adds	r3, #2
 800c598:	0c12      	lsrs	r2, r2, #16
 800c59a:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(hi2c1,ub_1, B1_XA_OFFS_H, 2);
 800c59c:	2302      	movs	r3, #2
 800c59e:	2214      	movs	r2, #20
 800c5a0:	2110      	movs	r1, #16
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fc8e 	bl	800bec4 <read_multiple_icm20948_reg>
 800c5a8:	6538      	str	r0, [r7, #80]	; 0x50
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 800c5aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	021b      	lsls	r3, r3, #8
 800c5b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c5b2:	3201      	adds	r2, #1
 800c5b4:	7812      	ldrb	r2, [r2, #0]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	61bb      	str	r3, [r7, #24]
	mask_bit[0] = temp2[1] & 0x01;
 800c5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5bc:	3301      	adds	r3, #1
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	f003 0301 	and.w	r3, r3, #1
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	733b      	strb	r3, [r7, #12]

	temp3 = read_multiple_icm20948_reg(hi2c1,ub_1, B1_YA_OFFS_H, 2);
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	2217      	movs	r2, #23
 800c5cc:	2110      	movs	r1, #16
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7ff fc78 	bl	800bec4 <read_multiple_icm20948_reg>
 800c5d4:	64f8      	str	r0, [r7, #76]	; 0x4c
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800c5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5de:	3201      	adds	r2, #1
 800c5e0:	7812      	ldrb	r2, [r2, #0]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	61fb      	str	r3, [r7, #28]
	mask_bit[1] = temp3[1] & 0x01;
 800c5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	737b      	strb	r3, [r7, #13]

	temp4 = read_multiple_icm20948_reg(hi2c1,ub_1, B1_ZA_OFFS_H, 2);
 800c5f4:	2302      	movs	r3, #2
 800c5f6:	221a      	movs	r2, #26
 800c5f8:	2110      	movs	r1, #16
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f7ff fc62 	bl	800bec4 <read_multiple_icm20948_reg>
 800c600:	64b8      	str	r0, [r7, #72]	; 0x48
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 800c602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	021b      	lsls	r3, r3, #8
 800c608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c60a:	3201      	adds	r2, #1
 800c60c:	7812      	ldrb	r2, [r2, #0]
 800c60e:	4313      	orrs	r3, r2
 800c610:	623b      	str	r3, [r7, #32]
	mask_bit[2] = temp4[1] & 0x01;
 800c612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c614:	3301      	adds	r3, #1
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	73bb      	strb	r3, [r7, #14]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 800c620:	69ba      	ldr	r2, [r7, #24]
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	2b00      	cmp	r3, #0
 800c626:	da00      	bge.n	800c62a <icm20948_accel_calibration+0x176>
 800c628:	3307      	adds	r3, #7
 800c62a:	10db      	asrs	r3, r3, #3
 800c62c:	425b      	negs	r3, r3
 800c62e:	4413      	add	r3, r2
 800c630:	61bb      	str	r3, [r7, #24]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c636:	2b00      	cmp	r3, #0
 800c638:	da00      	bge.n	800c63c <icm20948_accel_calibration+0x188>
 800c63a:	3307      	adds	r3, #7
 800c63c:	10db      	asrs	r3, r3, #3
 800c63e:	425b      	negs	r3, r3
 800c640:	4413      	add	r3, r2
 800c642:	61fb      	str	r3, [r7, #28]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800c644:	6a3a      	ldr	r2, [r7, #32]
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	2b00      	cmp	r3, #0
 800c64a:	da00      	bge.n	800c64e <icm20948_accel_calibration+0x19a>
 800c64c:	3307      	adds	r3, #7
 800c64e:	10db      	asrs	r3, r3, #3
 800c650:	425b      	negs	r3, r3
 800c652:	4413      	add	r3, r2
 800c654:	623b      	str	r3, [r7, #32]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800c656:	69bb      	ldr	r3, [r7, #24]
 800c658:	121b      	asrs	r3, r3, #8
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	743b      	strb	r3, [r7, #16]
 	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	b2db      	uxtb	r3, r3
 800c662:	f023 0301 	bic.w	r3, r3, #1
 800c666:	b2db      	uxtb	r3, r3
 800c668:	747b      	strb	r3, [r7, #17]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800c66a:	7c7a      	ldrb	r2, [r7, #17]
 800c66c:	7b3b      	ldrb	r3, [r7, #12]
 800c66e:	4313      	orrs	r3, r2
 800c670:	b2db      	uxtb	r3, r3
 800c672:	747b      	strb	r3, [r7, #17]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	121b      	asrs	r3, r3, #8
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	74bb      	strb	r3, [r7, #18]
 	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	f023 0301 	bic.w	r3, r3, #1
 800c684:	b2db      	uxtb	r3, r3
 800c686:	74fb      	strb	r3, [r7, #19]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 800c688:	7cfa      	ldrb	r2, [r7, #19]
 800c68a:	7b7b      	ldrb	r3, [r7, #13]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	74fb      	strb	r3, [r7, #19]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	121b      	asrs	r3, r3, #8
 800c696:	b2db      	uxtb	r3, r3
 800c698:	753b      	strb	r3, [r7, #20]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	f023 0301 	bic.w	r3, r3, #1
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	757b      	strb	r3, [r7, #21]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800c6a6:	7d7a      	ldrb	r2, [r7, #21]
 800c6a8:	7bbb      	ldrb	r3, [r7, #14]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	757b      	strb	r3, [r7, #21]

	write_multiple_icm20948_reg(hi2c1,ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800c6b0:	f107 0310 	add.w	r3, r7, #16
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	9200      	str	r2, [sp, #0]
 800c6b8:	2214      	movs	r2, #20
 800c6ba:	2110      	movs	r1, #16
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f7ff fc60 	bl	800bf82 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(hi2c1,ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 800c6c2:	f107 0310 	add.w	r3, r7, #16
 800c6c6:	3302      	adds	r3, #2
 800c6c8:	2202      	movs	r2, #2
 800c6ca:	9200      	str	r2, [sp, #0]
 800c6cc:	2217      	movs	r2, #23
 800c6ce:	2110      	movs	r1, #16
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7ff fc56 	bl	800bf82 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(hi2c1,ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800c6d6:	f107 0310 	add.w	r3, r7, #16
 800c6da:	3304      	adds	r3, #4
 800c6dc:	2202      	movs	r2, #2
 800c6de:	9200      	str	r2, [sp, #0]
 800c6e0:	221a      	movs	r2, #26
 800c6e2:	2110      	movs	r1, #16
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff fc4c 	bl	800bf82 <write_multiple_icm20948_reg>
}
 800c6ea:	bf00      	nop
 800c6ec:	3758      	adds	r7, #88	; 0x58
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	51eb851f 	.word	0x51eb851f
 800c6f8:	08010ff0 	.word	0x08010ff0

0800c6fc <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(I2C_HandleTypeDef *hi2c1,gyro_full_scale full_scale)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	460b      	mov	r3, r1
 800c706:	70fb      	strb	r3, [r7, #3]
	uint8_t new_val = read_single_icm20948_reg(hi2c1,ub_2, B2_GYRO_CONFIG_1);
 800c708:	2201      	movs	r2, #1
 800c70a:	2120      	movs	r1, #32
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff fba8 	bl	800be62 <read_single_icm20948_reg>
 800c712:	4603      	mov	r3, r0
 800c714:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 800c716:	78fb      	ldrb	r3, [r7, #3]
 800c718:	2b03      	cmp	r3, #3
 800c71a:	d827      	bhi.n	800c76c <icm20948_gyro_full_scale_select+0x70>
 800c71c:	a201      	add	r2, pc, #4	; (adr r2, 800c724 <icm20948_gyro_full_scale_select+0x28>)
 800c71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c722:	bf00      	nop
 800c724:	0800c735 	.word	0x0800c735
 800c728:	0800c73d 	.word	0x0800c73d
 800c72c:	0800c74d 	.word	0x0800c74d
 800c730:	0800c75d 	.word	0x0800c75d
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 800c734:	4b12      	ldr	r3, [pc, #72]	; (800c780 <icm20948_gyro_full_scale_select+0x84>)
 800c736:	4a13      	ldr	r2, [pc, #76]	; (800c784 <icm20948_gyro_full_scale_select+0x88>)
 800c738:	601a      	str	r2, [r3, #0]
			break;
 800c73a:	e017      	b.n	800c76c <icm20948_gyro_full_scale_select+0x70>
		case _500dps :
			new_val |= 0x02;
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
 800c73e:	f043 0302 	orr.w	r3, r3, #2
 800c742:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 800c744:	4b0e      	ldr	r3, [pc, #56]	; (800c780 <icm20948_gyro_full_scale_select+0x84>)
 800c746:	4a10      	ldr	r2, [pc, #64]	; (800c788 <icm20948_gyro_full_scale_select+0x8c>)
 800c748:	601a      	str	r2, [r3, #0]
			break;
 800c74a:	e00f      	b.n	800c76c <icm20948_gyro_full_scale_select+0x70>
		case _1000dps :
			new_val |= 0x04;
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	f043 0304 	orr.w	r3, r3, #4
 800c752:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 800c754:	4b0a      	ldr	r3, [pc, #40]	; (800c780 <icm20948_gyro_full_scale_select+0x84>)
 800c756:	4a0d      	ldr	r2, [pc, #52]	; (800c78c <icm20948_gyro_full_scale_select+0x90>)
 800c758:	601a      	str	r2, [r3, #0]
			break;
 800c75a:	e007      	b.n	800c76c <icm20948_gyro_full_scale_select+0x70>
		case _2000dps :
			new_val |= 0x06;
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	f043 0306 	orr.w	r3, r3, #6
 800c762:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 800c764:	4b06      	ldr	r3, [pc, #24]	; (800c780 <icm20948_gyro_full_scale_select+0x84>)
 800c766:	4a0a      	ldr	r2, [pc, #40]	; (800c790 <icm20948_gyro_full_scale_select+0x94>)
 800c768:	601a      	str	r2, [r3, #0]
			break;
 800c76a:	bf00      	nop
	}

	write_single_icm20948_reg(hi2c1,ub_2, B2_GYRO_CONFIG_1, new_val);
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	2201      	movs	r2, #1
 800c770:	2120      	movs	r1, #32
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7ff fbde 	bl	800bf34 <write_single_icm20948_reg>
}
 800c778:	bf00      	nop
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	20004a6c 	.word	0x20004a6c
 800c784:	43030000 	.word	0x43030000
 800c788:	42830000 	.word	0x42830000
 800c78c:	42033333 	.word	0x42033333
 800c790:	41833333 	.word	0x41833333

0800c794 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(I2C_HandleTypeDef *hi2c1,accel_full_scale full_scale)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
	uint8_t new_val = read_single_icm20948_reg(hi2c1,ub_2, B2_ACCEL_CONFIG);
 800c7a0:	2214      	movs	r2, #20
 800c7a2:	2120      	movs	r1, #32
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff fb5c 	bl	800be62 <read_single_icm20948_reg>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	73fb      	strb	r3, [r7, #15]

	switch(full_scale)
 800c7ae:	78fb      	ldrb	r3, [r7, #3]
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d82b      	bhi.n	800c80c <icm20948_accel_full_scale_select+0x78>
 800c7b4:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <icm20948_accel_full_scale_select+0x28>)
 800c7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ba:	bf00      	nop
 800c7bc:	0800c7cd 	.word	0x0800c7cd
 800c7c0:	0800c7d7 	.word	0x0800c7d7
 800c7c4:	0800c7e9 	.word	0x0800c7e9
 800c7c8:	0800c7fb 	.word	0x0800c7fb
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 800c7cc:	4b14      	ldr	r3, [pc, #80]	; (800c820 <icm20948_accel_full_scale_select+0x8c>)
 800c7ce:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800c7d2:	601a      	str	r2, [r3, #0]
			break;
 800c7d4:	e01a      	b.n	800c80c <icm20948_accel_full_scale_select+0x78>
		case _4g :
			new_val |= 0x02;
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
 800c7d8:	f043 0302 	orr.w	r3, r3, #2
 800c7dc:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800c7de:	4b10      	ldr	r3, [pc, #64]	; (800c820 <icm20948_accel_full_scale_select+0x8c>)
 800c7e0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800c7e4:	601a      	str	r2, [r3, #0]
			break;
 800c7e6:	e011      	b.n	800c80c <icm20948_accel_full_scale_select+0x78>
		case _8g :
			new_val |= 0x04;
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	f043 0304 	orr.w	r3, r3, #4
 800c7ee:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 800c7f0:	4b0b      	ldr	r3, [pc, #44]	; (800c820 <icm20948_accel_full_scale_select+0x8c>)
 800c7f2:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800c7f6:	601a      	str	r2, [r3, #0]
			break;
 800c7f8:	e008      	b.n	800c80c <icm20948_accel_full_scale_select+0x78>
		case _16g :
			new_val |= 0x06;
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
 800c7fc:	f043 0306 	orr.w	r3, r3, #6
 800c800:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 800c802:	4b07      	ldr	r3, [pc, #28]	; (800c820 <icm20948_accel_full_scale_select+0x8c>)
 800c804:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800c808:	601a      	str	r2, [r3, #0]
			break;
 800c80a:	bf00      	nop
	}

	write_single_icm20948_reg(hi2c1,ub_2, B2_ACCEL_CONFIG, new_val);
 800c80c:	7bfb      	ldrb	r3, [r7, #15]
 800c80e:	2214      	movs	r2, #20
 800c810:	2120      	movs	r1, #32
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff fb8e 	bl	800bf34 <write_single_icm20948_reg>
}
 800c818:	bf00      	nop
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	20004a70 	.word	0x20004a70

0800c824 <icm20948_clock_source>:

	write_single_icm20948_reg(hi2c1,ub_3, B3_I2C_MST_CTRL, new_val);
}

void icm20948_clock_source(I2C_HandleTypeDef *hi2c1,uint8_t source)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	460b      	mov	r3, r1
 800c82e:	70fb      	strb	r3, [r7, #3]
	uint8_t new_val = read_single_icm20948_reg(hi2c1,ub_0, B0_PWR_MGMT_1);
 800c830:	2206      	movs	r2, #6
 800c832:	2100      	movs	r1, #0
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f7ff fb14 	bl	800be62 <read_single_icm20948_reg>
 800c83a:	4603      	mov	r3, r0
 800c83c:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 800c83e:	7bfa      	ldrb	r2, [r7, #15]
 800c840:	78fb      	ldrb	r3, [r7, #3]
 800c842:	4313      	orrs	r3, r2
 800c844:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(hi2c1,ub_0, B0_PWR_MGMT_1, new_val);
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2206      	movs	r2, #6
 800c84a:	2100      	movs	r1, #0
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fb71 	bl	800bf34 <write_single_icm20948_reg>
}
 800c852:	bf00      	nop
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <icm20948_odr_align_enable>:

void icm20948_odr_align_enable(I2C_HandleTypeDef *hi2c1)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b082      	sub	sp, #8
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
	write_single_icm20948_reg(hi2c1,ub_2, B2_ODR_ALIGN_EN, 0x01);
 800c862:	2301      	movs	r3, #1
 800c864:	2209      	movs	r2, #9
 800c866:	2120      	movs	r1, #32
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7ff fb63 	bl	800bf34 <write_single_icm20948_reg>
}
 800c86e:	bf00      	nop
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <motor_init>:
 *      Author: ytan196
 */

#include "motor.h"
motor_control* motor_init(TIM_HandleTypeDef *htim, uint32_t channel, motor_control_pin pin1, motor_control_pin pin2 )
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b086      	sub	sp, #24
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	60f8      	str	r0, [r7, #12]
 800c87e:	60b9      	str	r1, [r7, #8]
 800c880:	4639      	mov	r1, r7
 800c882:	e881 000c 	stmia.w	r1, {r2, r3}
	motor_control *motor_ctl= malloc(sizeof(motor_control));
 800c886:	2018      	movs	r0, #24
 800c888:	f001 ffca 	bl	800e820 <malloc>
 800c88c:	4603      	mov	r3, r0
 800c88e:	617b      	str	r3, [r7, #20]
	motor_ctl->pin1 = pin1;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	461a      	mov	r2, r3
 800c894:	463b      	mov	r3, r7
 800c896:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c89a:	e882 0003 	stmia.w	r2, {r0, r1}
	motor_ctl->pin2 = pin2;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	f107 0220 	add.w	r2, r7, #32
 800c8a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8aa:	e883 0003 	stmia.w	r3, {r0, r1}
	motor_ctl->timer = htim;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	68fa      	ldr	r2, [r7, #12]
 800c8b2:	611a      	str	r2, [r3, #16]
	motor_ctl->channel = channel;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(htim, channel);
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	68f8      	ldr	r0, [r7, #12]
 800c8be:	f7fa f823 	bl	8006908 <HAL_TIM_PWM_Start>
	return motor_ctl;
 800c8c2:	697b      	ldr	r3, [r7, #20]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <motor_set_pwm>:

void motor_set_pwm(motor_control *motor_ctl, int pwm_value, int brake)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
	int modifiedvalue = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
	if (brake){
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d012      	beq.n	800c908 <motor_set_pwm+0x3c>
		_motor_set_pin(motor_ctl, MOTOR_BRAKE);
 800c8e2:	2102      	movs	r1, #2
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 f881 	bl	800c9ec <_motor_set_pin>
		if (pwm_value <= 10000) modifiedvalue = abs(pwm_value);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	f242 7210 	movw	r2, #10000	; 0x2710
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	dc05      	bgt.n	800c900 <motor_set_pwm+0x34>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	bfb8      	it	lt
 800c8fa:	425b      	neglt	r3, r3
 800c8fc:	617b      	str	r3, [r7, #20]
 800c8fe:	e035      	b.n	800c96c <motor_set_pwm+0xa0>
		else modifiedvalue = 10000;
 800c900:	f242 7310 	movw	r3, #10000	; 0x2710
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	e031      	b.n	800c96c <motor_set_pwm+0xa0>
	}else if (pwm_value > 0){
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	dd12      	ble.n	800c934 <motor_set_pwm+0x68>
		_motor_set_pin(motor_ctl, MOTOR_FORWARD);
 800c90e:	2101      	movs	r1, #1
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f000 f86b 	bl	800c9ec <_motor_set_pin>
		if (pwm_value <= 10000) modifiedvalue = abs(pwm_value);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	f242 7210 	movw	r2, #10000	; 0x2710
 800c91c:	4293      	cmp	r3, r2
 800c91e:	dc05      	bgt.n	800c92c <motor_set_pwm+0x60>
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2b00      	cmp	r3, #0
 800c924:	bfb8      	it	lt
 800c926:	425b      	neglt	r3, r3
 800c928:	617b      	str	r3, [r7, #20]
 800c92a:	e01f      	b.n	800c96c <motor_set_pwm+0xa0>
		else modifiedvalue = 10000;
 800c92c:	f242 7310 	movw	r3, #10000	; 0x2710
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	e01b      	b.n	800c96c <motor_set_pwm+0xa0>
	}else if (pwm_value < 0){
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	da12      	bge.n	800c960 <motor_set_pwm+0x94>
		_motor_set_pin(motor_ctl, MOTOR_BACKWARD);
 800c93a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f000 f854 	bl	800c9ec <_motor_set_pin>
		if (pwm_value >= -10000) modifiedvalue = abs(pwm_value);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	4a28      	ldr	r2, [pc, #160]	; (800c9e8 <motor_set_pwm+0x11c>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	db05      	blt.n	800c958 <motor_set_pwm+0x8c>
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bfb8      	it	lt
 800c952:	425b      	neglt	r3, r3
 800c954:	617b      	str	r3, [r7, #20]
 800c956:	e009      	b.n	800c96c <motor_set_pwm+0xa0>
		else modifiedvalue = 10000;
 800c958:	f242 7310 	movw	r3, #10000	; 0x2710
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	e005      	b.n	800c96c <motor_set_pwm+0xa0>
	}else {
		_motor_set_pin(motor_ctl, MOTOR_FREE);
 800c960:	2100      	movs	r1, #0
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 f842 	bl	800c9ec <_motor_set_pin>
		modifiedvalue = 0;
 800c968:	2300      	movs	r3, #0
 800c96a:	617b      	str	r3, [r7, #20]
	}
	switch(motor_ctl->channel){
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	695b      	ldr	r3, [r3, #20]
 800c970:	2b0c      	cmp	r3, #12
 800c972:	d835      	bhi.n	800c9e0 <motor_set_pwm+0x114>
 800c974:	a201      	add	r2, pc, #4	; (adr r2, 800c97c <motor_set_pwm+0xb0>)
 800c976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97a:	bf00      	nop
 800c97c:	0800c9b1 	.word	0x0800c9b1
 800c980:	0800c9e1 	.word	0x0800c9e1
 800c984:	0800c9e1 	.word	0x0800c9e1
 800c988:	0800c9e1 	.word	0x0800c9e1
 800c98c:	0800c9bd 	.word	0x0800c9bd
 800c990:	0800c9e1 	.word	0x0800c9e1
 800c994:	0800c9e1 	.word	0x0800c9e1
 800c998:	0800c9e1 	.word	0x0800c9e1
 800c99c:	0800c9c9 	.word	0x0800c9c9
 800c9a0:	0800c9e1 	.word	0x0800c9e1
 800c9a4:	0800c9e1 	.word	0x0800c9e1
 800c9a8:	0800c9e1 	.word	0x0800c9e1
 800c9ac:	0800c9d5 	.word	0x0800c9d5
		case TIM_CHANNEL_1:
			motor_ctl->timer->Instance->CCR1 = modifiedvalue;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	697a      	ldr	r2, [r7, #20]
 800c9b8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800c9ba:	e011      	b.n	800c9e0 <motor_set_pwm+0x114>
		case TIM_CHANNEL_2:
			motor_ctl->timer->Instance->CCR2 = modifiedvalue;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	697a      	ldr	r2, [r7, #20]
 800c9c4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800c9c6:	e00b      	b.n	800c9e0 <motor_set_pwm+0x114>
		case TIM_CHANNEL_3:
			motor_ctl->timer->Instance->CCR3 = modifiedvalue;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	697a      	ldr	r2, [r7, #20]
 800c9d0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800c9d2:	e005      	b.n	800c9e0 <motor_set_pwm+0x114>
		case TIM_CHANNEL_4:
			motor_ctl->timer->Instance->CCR4 = modifiedvalue;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800c9de:	bf00      	nop
	}


	// 100 to -100
}
 800c9e0:	bf00      	nop
 800c9e2:	3718      	adds	r7, #24
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	ffffd8f0 	.word	0xffffd8f0

0800c9ec <_motor_set_pin>:
void _motor_set_pin(motor_control *motor_ctl, int motor_mode)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	2b03      	cmp	r3, #3
 800c9fc:	d84e      	bhi.n	800ca9c <_motor_set_pin+0xb0>
 800c9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <_motor_set_pin+0x18>)
 800ca00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca04:	0800ca37 	.word	0x0800ca37
 800ca08:	0800ca59 	.word	0x0800ca59
 800ca0c:	0800ca15 	.word	0x0800ca15
 800ca10:	0800ca7b 	.word	0x0800ca7b
	switch (motor_mode){
	case MOTOR_FORWARD:
		HAL_GPIO_WritePin(motor_ctl->pin1.GPIOx, motor_ctl->pin1.GPIO_Pin, GPIO_PIN_SET);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6818      	ldr	r0, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	889b      	ldrh	r3, [r3, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	4619      	mov	r1, r3
 800ca20:	f7f8 fa06 	bl	8004e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_ctl->pin2.GPIOx, motor_ctl->pin2.GPIO_Pin, GPIO_PIN_RESET);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6898      	ldr	r0, [r3, #8]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	899b      	ldrh	r3, [r3, #12]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4619      	mov	r1, r3
 800ca30:	f7f8 f9fe 	bl	8004e30 <HAL_GPIO_WritePin>
	break;
 800ca34:	e032      	b.n	800ca9c <_motor_set_pin+0xb0>

	case MOTOR_BACKWARD:
		HAL_GPIO_WritePin(motor_ctl->pin1.GPIOx, motor_ctl->pin1.GPIO_Pin, GPIO_PIN_RESET);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	889b      	ldrh	r3, [r3, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	4619      	mov	r1, r3
 800ca42:	f7f8 f9f5 	bl	8004e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_ctl->pin2.GPIOx, motor_ctl->pin2.GPIO_Pin, GPIO_PIN_SET);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6898      	ldr	r0, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	899b      	ldrh	r3, [r3, #12]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	4619      	mov	r1, r3
 800ca52:	f7f8 f9ed 	bl	8004e30 <HAL_GPIO_WritePin>
	break;
 800ca56:	e021      	b.n	800ca9c <_motor_set_pin+0xb0>

	case MOTOR_FREE:
		HAL_GPIO_WritePin(motor_ctl->pin1.GPIOx, motor_ctl->pin1.GPIO_Pin, GPIO_PIN_RESET);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6818      	ldr	r0, [r3, #0]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	889b      	ldrh	r3, [r3, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	4619      	mov	r1, r3
 800ca64:	f7f8 f9e4 	bl	8004e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_ctl->pin2.GPIOx, motor_ctl->pin2.GPIO_Pin, GPIO_PIN_RESET);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6898      	ldr	r0, [r3, #8]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	899b      	ldrh	r3, [r3, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	4619      	mov	r1, r3
 800ca74:	f7f8 f9dc 	bl	8004e30 <HAL_GPIO_WritePin>
	break;
 800ca78:	e010      	b.n	800ca9c <_motor_set_pin+0xb0>
	case MOTOR_BRAKE:
		HAL_GPIO_WritePin(motor_ctl->pin1.GPIOx, motor_ctl->pin1.GPIO_Pin, GPIO_PIN_SET);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6818      	ldr	r0, [r3, #0]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	889b      	ldrh	r3, [r3, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	4619      	mov	r1, r3
 800ca86:	f7f8 f9d3 	bl	8004e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor_ctl->pin2.GPIOx, motor_ctl->pin2.GPIO_Pin, GPIO_PIN_SET);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6898      	ldr	r0, [r3, #8]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	899b      	ldrh	r3, [r3, #12]
 800ca92:	2201      	movs	r2, #1
 800ca94:	4619      	mov	r1, r3
 800ca96:	f7f8 f9cb 	bl	8004e30 <HAL_GPIO_WritePin>
	break;
 800ca9a:	bf00      	nop
	}
};
 800ca9c:	bf00      	nop
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"

uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram(void)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)
 800caaa:	2300      	movs	r3, #0
 800caac:	71fb      	strb	r3, [r7, #7]
 800caae:	e026      	b.n	800cafe <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);
 800cab0:	79fb      	ldrb	r3, [r7, #7]
 800cab2:	3b50      	subs	r3, #80	; 0x50
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2100      	movs	r1, #0
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 f82b 	bl	800cb14 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);
 800cabe:	2100      	movs	r1, #0
 800cac0:	2000      	movs	r0, #0
 800cac2:	f000 f827 	bl	800cb14 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);
 800cac6:	2100      	movs	r1, #0
 800cac8:	2010      	movs	r0, #16
 800caca:	f000 f823 	bl	800cb14 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 800cace:	2300      	movs	r3, #0
 800cad0:	71bb      	strb	r3, [r7, #6]
 800cad2:	e00d      	b.n	800caf0 <OLED_Refresh_Gram+0x4c>
 800cad4:	79ba      	ldrb	r2, [r7, #6]
 800cad6:	79fb      	ldrb	r3, [r7, #7]
 800cad8:	490d      	ldr	r1, [pc, #52]	; (800cb10 <OLED_Refresh_Gram+0x6c>)
 800cada:	00d2      	lsls	r2, r2, #3
 800cadc:	440a      	add	r2, r1
 800cade:	4413      	add	r3, r2
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2101      	movs	r1, #1
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 f815 	bl	800cb14 <OLED_WR_Byte>
 800caea:	79bb      	ldrb	r3, [r7, #6]
 800caec:	3301      	adds	r3, #1
 800caee:	71bb      	strb	r3, [r7, #6]
 800caf0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	daed      	bge.n	800cad4 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 800caf8:	79fb      	ldrb	r3, [r7, #7]
 800cafa:	3301      	adds	r3, #1
 800cafc:	71fb      	strb	r3, [r7, #7]
 800cafe:	79fb      	ldrb	r3, [r7, #7]
 800cb00:	2b07      	cmp	r3, #7
 800cb02:	d9d5      	bls.n	800cab0 <OLED_Refresh_Gram+0xc>
	}
}
 800cb04:	bf00      	nop
 800cb06:	bf00      	nop
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	20004e14 	.word	0x20004e14

0800cb14 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	460a      	mov	r2, r1
 800cb1e:	71fb      	strb	r3, [r7, #7]
 800cb20:	4613      	mov	r3, r2
 800cb22:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	if(cmd)
 800cb24:	79bb      	ldrb	r3, [r7, #6]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d006      	beq.n	800cb38 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb30:	481c      	ldr	r0, [pc, #112]	; (800cba4 <OLED_WR_Byte+0x90>)
 800cb32:	f7f8 f97d 	bl	8004e30 <HAL_GPIO_WritePin>
 800cb36:	e005      	b.n	800cb44 <OLED_WR_Byte+0x30>
	else
	  OLED_RS_Clr();
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb3e:	4819      	ldr	r0, [pc, #100]	; (800cba4 <OLED_WR_Byte+0x90>)
 800cb40:	f7f8 f976 	bl	8004e30 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800cb44:	2300      	movs	r3, #0
 800cb46:	73fb      	strb	r3, [r7, #15]
 800cb48:	e01e      	b.n	800cb88 <OLED_WR_Byte+0x74>
	{
		OLED_SCLK_Clr();
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2120      	movs	r1, #32
 800cb4e:	4815      	ldr	r0, [pc, #84]	; (800cba4 <OLED_WR_Byte+0x90>)
 800cb50:	f7f8 f96e 	bl	8004e30 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800cb54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	da05      	bge.n	800cb68 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	2140      	movs	r1, #64	; 0x40
 800cb60:	4810      	ldr	r0, [pc, #64]	; (800cba4 <OLED_WR_Byte+0x90>)
 800cb62:	f7f8 f965 	bl	8004e30 <HAL_GPIO_WritePin>
 800cb66:	e004      	b.n	800cb72 <OLED_WR_Byte+0x5e>
		else
		   OLED_SDIN_Clr();
 800cb68:	2200      	movs	r2, #0
 800cb6a:	2140      	movs	r1, #64	; 0x40
 800cb6c:	480d      	ldr	r0, [pc, #52]	; (800cba4 <OLED_WR_Byte+0x90>)
 800cb6e:	f7f8 f95f 	bl	8004e30 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800cb72:	2201      	movs	r2, #1
 800cb74:	2120      	movs	r1, #32
 800cb76:	480b      	ldr	r0, [pc, #44]	; (800cba4 <OLED_WR_Byte+0x90>)
 800cb78:	f7f8 f95a 	bl	8004e30 <HAL_GPIO_WritePin>
		dat<<=1;
 800cb7c:	79fb      	ldrb	r3, [r7, #7]
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800cb82:	7bfb      	ldrb	r3, [r7, #15]
 800cb84:	3301      	adds	r3, #1
 800cb86:	73fb      	strb	r3, [r7, #15]
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
 800cb8a:	2b07      	cmp	r3, #7
 800cb8c:	d9dd      	bls.n	800cb4a <OLED_WR_Byte+0x36>
	}
	OLED_RS_Set();
 800cb8e:	2201      	movs	r2, #1
 800cb90:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb94:	4803      	ldr	r0, [pc, #12]	; (800cba4 <OLED_WR_Byte+0x90>)
 800cb96:	f7f8 f94b 	bl	8004e30 <HAL_GPIO_WritePin>
}
 800cb9a:	bf00      	nop
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	40021000 	.word	0x40021000

0800cba8 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/
void OLED_Clear(void)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	71fb      	strb	r3, [r7, #7]
 800cbb2:	e014      	b.n	800cbde <OLED_Clear+0x36>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	71bb      	strb	r3, [r7, #6]
 800cbb8:	e00a      	b.n	800cbd0 <OLED_Clear+0x28>
 800cbba:	79ba      	ldrb	r2, [r7, #6]
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	490c      	ldr	r1, [pc, #48]	; (800cbf0 <OLED_Clear+0x48>)
 800cbc0:	00d2      	lsls	r2, r2, #3
 800cbc2:	440a      	add	r2, r1
 800cbc4:	4413      	add	r3, r2
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	701a      	strb	r2, [r3, #0]
 800cbca:	79bb      	ldrb	r3, [r7, #6]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	71bb      	strb	r3, [r7, #6]
 800cbd0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	daf0      	bge.n	800cbba <OLED_Clear+0x12>
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	71fb      	strb	r3, [r7, #7]
 800cbde:	79fb      	ldrb	r3, [r7, #7]
 800cbe0:	2b07      	cmp	r3, #7
 800cbe2:	d9e7      	bls.n	800cbb4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800cbe4:	f7ff ff5e 	bl	800caa4 <OLED_Refresh_Gram>
}
 800cbe8:	bf00      	nop
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20004e14 	.word	0x20004e14

0800cbf4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	71fb      	strb	r3, [r7, #7]
 800cbfe:	460b      	mov	r3, r1
 800cc00:	71bb      	strb	r3, [r7, #6]
 800cc02:	4613      	mov	r3, r2
 800cc04:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800cc0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	db41      	blt.n	800cc96 <OLED_DrawPoint+0xa2>
 800cc12:	79bb      	ldrb	r3, [r7, #6]
 800cc14:	2b3f      	cmp	r3, #63	; 0x3f
 800cc16:	d83e      	bhi.n	800cc96 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800cc18:	79bb      	ldrb	r3, [r7, #6]
 800cc1a:	08db      	lsrs	r3, r3, #3
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	f1c3 0307 	rsb	r3, r3, #7
 800cc22:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800cc24:	79bb      	ldrb	r3, [r7, #6]
 800cc26:	f003 0307 	and.w	r3, r3, #7
 800cc2a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800cc2c:	7b7b      	ldrb	r3, [r7, #13]
 800cc2e:	f1c3 0307 	rsb	r3, r3, #7
 800cc32:	2201      	movs	r2, #1
 800cc34:	fa02 f303 	lsl.w	r3, r2, r3
 800cc38:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800cc3a:	797b      	ldrb	r3, [r7, #5]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d012      	beq.n	800cc66 <OLED_DrawPoint+0x72>
 800cc40:	79fa      	ldrb	r2, [r7, #7]
 800cc42:	7bbb      	ldrb	r3, [r7, #14]
 800cc44:	4917      	ldr	r1, [pc, #92]	; (800cca4 <OLED_DrawPoint+0xb0>)
 800cc46:	00d2      	lsls	r2, r2, #3
 800cc48:	440a      	add	r2, r1
 800cc4a:	4413      	add	r3, r2
 800cc4c:	7818      	ldrb	r0, [r3, #0]
 800cc4e:	79fa      	ldrb	r2, [r7, #7]
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
 800cc52:	7bf9      	ldrb	r1, [r7, #15]
 800cc54:	4301      	orrs	r1, r0
 800cc56:	b2c8      	uxtb	r0, r1
 800cc58:	4912      	ldr	r1, [pc, #72]	; (800cca4 <OLED_DrawPoint+0xb0>)
 800cc5a:	00d2      	lsls	r2, r2, #3
 800cc5c:	440a      	add	r2, r1
 800cc5e:	4413      	add	r3, r2
 800cc60:	4602      	mov	r2, r0
 800cc62:	701a      	strb	r2, [r3, #0]
 800cc64:	e018      	b.n	800cc98 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;
 800cc66:	79fa      	ldrb	r2, [r7, #7]
 800cc68:	7bbb      	ldrb	r3, [r7, #14]
 800cc6a:	490e      	ldr	r1, [pc, #56]	; (800cca4 <OLED_DrawPoint+0xb0>)
 800cc6c:	00d2      	lsls	r2, r2, #3
 800cc6e:	440a      	add	r2, r1
 800cc70:	4413      	add	r3, r2
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	b25a      	sxtb	r2, r3
 800cc76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc7a:	43db      	mvns	r3, r3
 800cc7c:	b25b      	sxtb	r3, r3
 800cc7e:	4013      	ands	r3, r2
 800cc80:	b259      	sxtb	r1, r3
 800cc82:	79fa      	ldrb	r2, [r7, #7]
 800cc84:	7bbb      	ldrb	r3, [r7, #14]
 800cc86:	b2c8      	uxtb	r0, r1
 800cc88:	4906      	ldr	r1, [pc, #24]	; (800cca4 <OLED_DrawPoint+0xb0>)
 800cc8a:	00d2      	lsls	r2, r2, #3
 800cc8c:	440a      	add	r2, r1
 800cc8e:	4413      	add	r3, r2
 800cc90:	4602      	mov	r2, r0
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	e000      	b.n	800cc98 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800cc96:	bf00      	nop
}
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	20004e14 	.word	0x20004e14

0800cca8 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{
 800cca8:	b590      	push	{r4, r7, lr}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	4623      	mov	r3, r4
 800ccb8:	71fb      	strb	r3, [r7, #7]
 800ccba:	4603      	mov	r3, r0
 800ccbc:	71bb      	strb	r3, [r7, #6]
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	717b      	strb	r3, [r7, #5]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800ccc6:	79bb      	ldrb	r3, [r7, #6]
 800ccc8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';
 800ccca:	797b      	ldrb	r3, [r7, #5]
 800cccc:	3b20      	subs	r3, #32
 800ccce:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	73bb      	strb	r3, [r7, #14]
 800ccd4:	e04d      	b.n	800cd72 <OLED_ShowChar+0xca>
    {
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800ccd6:	793b      	ldrb	r3, [r7, #4]
 800ccd8:	2b0c      	cmp	r3, #12
 800ccda:	d10b      	bne.n	800ccf4 <OLED_ShowChar+0x4c>
 800ccdc:	797a      	ldrb	r2, [r7, #5]
 800ccde:	7bb9      	ldrb	r1, [r7, #14]
 800cce0:	4828      	ldr	r0, [pc, #160]	; (800cd84 <OLED_ShowChar+0xdc>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	4403      	add	r3, r0
 800ccec:	440b      	add	r3, r1
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	73fb      	strb	r3, [r7, #15]
 800ccf2:	e007      	b.n	800cd04 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size
 800ccf4:	797a      	ldrb	r2, [r7, #5]
 800ccf6:	7bbb      	ldrb	r3, [r7, #14]
 800ccf8:	4923      	ldr	r1, [pc, #140]	; (800cd88 <OLED_ShowChar+0xe0>)
 800ccfa:	0112      	lsls	r2, r2, #4
 800ccfc:	440a      	add	r2, r1
 800ccfe:	4413      	add	r3, r2
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800cd04:	2300      	movs	r3, #0
 800cd06:	737b      	strb	r3, [r7, #13]
 800cd08:	e02d      	b.n	800cd66 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800cd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	da07      	bge.n	800cd22 <OLED_ShowChar+0x7a>
 800cd12:	f897 2020 	ldrb.w	r2, [r7, #32]
 800cd16:	79b9      	ldrb	r1, [r7, #6]
 800cd18:	79fb      	ldrb	r3, [r7, #7]
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff ff6a 	bl	800cbf4 <OLED_DrawPoint>
 800cd20:	e00c      	b.n	800cd3c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800cd22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	bf0c      	ite	eq
 800cd2a:	2301      	moveq	r3, #1
 800cd2c:	2300      	movne	r3, #0
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	461a      	mov	r2, r3
 800cd32:	79b9      	ldrb	r1, [r7, #6]
 800cd34:	79fb      	ldrb	r3, [r7, #7]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff ff5c 	bl	800cbf4 <OLED_DrawPoint>
			temp<<=1;
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	73fb      	strb	r3, [r7, #15]
			y++;
 800cd42:	79bb      	ldrb	r3, [r7, #6]
 800cd44:	3301      	adds	r3, #1
 800cd46:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800cd48:	79ba      	ldrb	r2, [r7, #6]
 800cd4a:	7b3b      	ldrb	r3, [r7, #12]
 800cd4c:	1ad2      	subs	r2, r2, r3
 800cd4e:	793b      	ldrb	r3, [r7, #4]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d105      	bne.n	800cd60 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800cd54:	7b3b      	ldrb	r3, [r7, #12]
 800cd56:	71bb      	strb	r3, [r7, #6]
				x++;
 800cd58:	79fb      	ldrb	r3, [r7, #7]
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	71fb      	strb	r3, [r7, #7]
				break;
 800cd5e:	e005      	b.n	800cd6c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800cd60:	7b7b      	ldrb	r3, [r7, #13]
 800cd62:	3301      	adds	r3, #1
 800cd64:	737b      	strb	r3, [r7, #13]
 800cd66:	7b7b      	ldrb	r3, [r7, #13]
 800cd68:	2b07      	cmp	r3, #7
 800cd6a:	d9ce      	bls.n	800cd0a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800cd6c:	7bbb      	ldrb	r3, [r7, #14]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	73bb      	strb	r3, [r7, #14]
 800cd72:	7bba      	ldrb	r2, [r7, #14]
 800cd74:	793b      	ldrb	r3, [r7, #4]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d3ad      	bcc.n	800ccd6 <OLED_ShowChar+0x2e>
			}
		}
    }
}
 800cd7a:	bf00      	nop
 800cd7c:	bf00      	nop
 800cd7e:	3714      	adds	r7, #20
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd90      	pop	{r4, r7, pc}
 800cd84:	080110c0 	.word	0x080110c0
 800cd88:	08011534 	.word	0x08011534

0800cd8c <OLED_ShowString>:
}
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p, int size)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b088      	sub	sp, #32
 800cd90:	af02      	add	r7, sp, #8
 800cd92:	60ba      	str	r2, [r7, #8]
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	4603      	mov	r3, r0
 800cd98:	73fb      	strb	r3, [r7, #15]
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	73bb      	strb	r3, [r7, #14]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58

	for(int i = 0; i<(size); i++ ){
 800cd9e:	2300      	movs	r3, #0
 800cda0:	617b      	str	r3, [r7, #20]
 800cda2:	e027      	b.n	800cdf4 <OLED_ShowString+0x68>
		if ( p[i] !='\0'){
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4413      	add	r3, r2
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d026      	beq.n	800cdfe <OLED_ShowString+0x72>
	        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	2b7a      	cmp	r3, #122	; 0x7a
 800cdb4:	d904      	bls.n	800cdc0 <OLED_ShowString+0x34>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	73fb      	strb	r3, [r7, #15]
 800cdba:	7bbb      	ldrb	r3, [r7, #14]
 800cdbc:	3310      	adds	r3, #16
 800cdbe:	73bb      	strb	r3, [r7, #14]
	        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800cdc0:	7bbb      	ldrb	r3, [r7, #14]
 800cdc2:	2b3a      	cmp	r3, #58	; 0x3a
 800cdc4:	d905      	bls.n	800cdd2 <OLED_ShowString+0x46>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	73fb      	strb	r3, [r7, #15]
 800cdca:	7bfb      	ldrb	r3, [r7, #15]
 800cdcc:	73bb      	strb	r3, [r7, #14]
 800cdce:	f7ff feeb 	bl	800cba8 <OLED_Clear>
	        OLED_ShowChar(x,y,p[i],12,1);
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	781a      	ldrb	r2, [r3, #0]
 800cdda:	7bb9      	ldrb	r1, [r7, #14]
 800cddc:	7bf8      	ldrb	r0, [r7, #15]
 800cdde:	2301      	movs	r3, #1
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	230c      	movs	r3, #12
 800cde4:	f7ff ff60 	bl	800cca8 <OLED_ShowChar>
	        x+=8;
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
 800cdea:	3308      	adds	r3, #8
 800cdec:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<(size); i++ ){
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	617b      	str	r3, [r7, #20]
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	dbd3      	blt.n	800cda4 <OLED_ShowString+0x18>
        OLED_ShowChar(x,y,*p,12,1);
        x+=8;
        p++;
    }
 */
}
 800cdfc:	e000      	b.n	800ce00 <OLED_ShowString+0x74>
			break;
 800cdfe:	bf00      	nop
}
 800ce00:	bf00      	nop
 800ce02:	3718      	adds	r7, #24
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <OLED_Init>:

void OLED_Init(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800ce0c:	f7f8 ffc0 	bl	8005d90 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800ce10:	4b41      	ldr	r3, [pc, #260]	; (800cf18 <OLED_Init+0x110>)
 800ce12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce14:	4a40      	ldr	r2, [pc, #256]	; (800cf18 <OLED_Init+0x110>)
 800ce16:	f023 0301 	bic.w	r3, r3, #1
 800ce1a:	6713      	str	r3, [r2, #112]	; 0x70
 800ce1c:	4b3e      	ldr	r3, [pc, #248]	; (800cf18 <OLED_Init+0x110>)
 800ce1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce20:	4a3d      	ldr	r2, [pc, #244]	; (800cf18 <OLED_Init+0x110>)
 800ce22:	f023 0304 	bic.w	r3, r3, #4
 800ce26:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO


	HAL_PWR_DisableBkUpAccess();
 800ce28:	f7f8 ffc6 	bl	8005db8 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2180      	movs	r1, #128	; 0x80
 800ce30:	483a      	ldr	r0, [pc, #232]	; (800cf1c <OLED_Init+0x114>)
 800ce32:	f7f7 fffd 	bl	8004e30 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800ce36:	2064      	movs	r0, #100	; 0x64
 800ce38:	f7f7 f96c 	bl	8004114 <HAL_Delay>
	OLED_RST_Set();
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	2180      	movs	r1, #128	; 0x80
 800ce40:	4836      	ldr	r0, [pc, #216]	; (800cf1c <OLED_Init+0x114>)
 800ce42:	f7f7 fff5 	bl	8004e30 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800ce46:	2100      	movs	r1, #0
 800ce48:	20ae      	movs	r0, #174	; 0xae
 800ce4a:	f7ff fe63 	bl	800cb14 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800ce4e:	2100      	movs	r1, #0
 800ce50:	20d5      	movs	r0, #213	; 0xd5
 800ce52:	f7ff fe5f 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800ce56:	2100      	movs	r1, #0
 800ce58:	2050      	movs	r0, #80	; 0x50
 800ce5a:	f7ff fe5b 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800ce5e:	2100      	movs	r1, #0
 800ce60:	20a8      	movs	r0, #168	; 0xa8
 800ce62:	f7ff fe57 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64)
 800ce66:	2100      	movs	r1, #0
 800ce68:	203f      	movs	r0, #63	; 0x3f
 800ce6a:	f7ff fe53 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800ce6e:	2100      	movs	r1, #0
 800ce70:	20d3      	movs	r0, #211	; 0xd3
 800ce72:	f7ff fe4f 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800ce76:	2100      	movs	r1, #0
 800ce78:	2000      	movs	r0, #0
 800ce7a:	f7ff fe4b 	bl	800cb14 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800ce7e:	2100      	movs	r1, #0
 800ce80:	2040      	movs	r0, #64	; 0x40
 800ce82:	f7ff fe47 	bl	800cb14 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ce86:	2100      	movs	r1, #0
 800ce88:	208d      	movs	r0, #141	; 0x8d
 800ce8a:	f7ff fe43 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ce8e:	2100      	movs	r1, #0
 800ce90:	2014      	movs	r0, #20
 800ce92:	f7ff fe3f 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ce96:	2100      	movs	r1, #0
 800ce98:	2020      	movs	r0, #32
 800ce9a:	f7ff fe3b 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800ce9e:	2100      	movs	r1, #0
 800cea0:	2002      	movs	r0, #2
 800cea2:	f7ff fe37 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800cea6:	2100      	movs	r1, #0
 800cea8:	20a1      	movs	r0, #161	; 0xa1
 800ceaa:	f7ff fe33 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ceae:	2100      	movs	r1, #0
 800ceb0:	20c0      	movs	r0, #192	; 0xc0
 800ceb2:	f7ff fe2f 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	20da      	movs	r0, #218	; 0xda
 800ceba:	f7ff fe2b 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800cebe:	2100      	movs	r1, #0
 800cec0:	2012      	movs	r0, #18
 800cec2:	f7ff fe27 	bl	800cb14 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800cec6:	2100      	movs	r1, #0
 800cec8:	2081      	movs	r0, #129	; 0x81
 800ceca:	f7ff fe23 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800cece:	2100      	movs	r1, #0
 800ced0:	20ef      	movs	r0, #239	; 0xef
 800ced2:	f7ff fe1f 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800ced6:	2100      	movs	r1, #0
 800ced8:	20d9      	movs	r0, #217	; 0xd9
 800ceda:	f7ff fe1b 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800cede:	2100      	movs	r1, #0
 800cee0:	20f1      	movs	r0, #241	; 0xf1
 800cee2:	f7ff fe17 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800cee6:	2100      	movs	r1, #0
 800cee8:	20db      	movs	r0, #219	; 0xdb
 800ceea:	f7ff fe13 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800ceee:	2100      	movs	r1, #0
 800cef0:	2030      	movs	r0, #48	; 0x30
 800cef2:	f7ff fe0f 	bl	800cb14 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800cef6:	2100      	movs	r1, #0
 800cef8:	20a4      	movs	r0, #164	; 0xa4
 800cefa:	f7ff fe0b 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display
 800cefe:	2100      	movs	r1, #0
 800cf00:	20a6      	movs	r0, #166	; 0xa6
 800cf02:	f7ff fe07 	bl	800cb14 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON
 800cf06:	2100      	movs	r1, #0
 800cf08:	20af      	movs	r0, #175	; 0xaf
 800cf0a:	f7ff fe03 	bl	800cb14 <OLED_WR_Byte>
	OLED_Clear();
 800cf0e:	f7ff fe4b 	bl	800cba8 <OLED_Clear>
}
 800cf12:	bf00      	nop
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	40023800 	.word	0x40023800
 800cf1c:	40021000 	.word	0x40021000

0800cf20 <pid_init>:
 *
 *  Created on: Jan 28, 2022
 *      Author: ytan196
 */
#include "pid.h"
pid_control* pid_init(float *kp, float *ki){
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	6039      	str	r1, [r7, #0]
	pid_control *pid_ctl = malloc(sizeof(pid_control));
 800cf2a:	2010      	movs	r0, #16
 800cf2c:	f001 fc78 	bl	800e820 <malloc>
 800cf30:	4603      	mov	r3, r0
 800cf32:	60fb      	str	r3, [r7, #12]

	pid_ctl->kp = kp;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	609a      	str	r2, [r3, #8]
	pid_ctl->ki = ki;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	60da      	str	r2, [r3, #12]

	pid_frame *now = malloc(sizeof(pid_frame));
 800cf40:	2014      	movs	r0, #20
 800cf42:	f001 fc6d 	bl	800e820 <malloc>
 800cf46:	4603      	mov	r3, r0
 800cf48:	60bb      	str	r3, [r7, #8]
	now->Pfactor = 0;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f04f 0200 	mov.w	r2, #0
 800cf50:	601a      	str	r2, [r3, #0]
	now->Ifactor = 0;
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	605a      	str	r2, [r3, #4]
	now->Dfactor = 0;
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	f04f 0200 	mov.w	r2, #0
 800cf60:	609a      	str	r2, [r3, #8]
	now->Error = 0;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	f04f 0200 	mov.w	r2, #0
 800cf68:	60da      	str	r2, [r3, #12]
	now->Tickdiff = 0;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	611a      	str	r2, [r3, #16]
	pid_ctl->prev = NULL;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
	pid_ctl->curr = now;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	605a      	str	r2, [r3, #4]
	return pid_ctl;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <pid_run>:

//for encoder to run
float pid_run(pid_control* pid_ctl, float reqvalue, float actvalue, uint32_t  tickdiff){
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b088      	sub	sp, #32
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	60f8      	str	r0, [r7, #12]
 800cf8e:	ed87 0a02 	vstr	s0, [r7, #8]
 800cf92:	edc7 0a01 	vstr	s1, [r7, #4]
 800cf96:	6039      	str	r1, [r7, #0]

	free(pid_ctl->prev);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f001 fc47 	bl	800e830 <free>
	pid_ctl->prev = pid_ctl->curr;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	601a      	str	r2, [r3, #0]
	pid_frame *now = malloc(sizeof(pid_frame));
 800cfaa:	2014      	movs	r0, #20
 800cfac:	f001 fc38 	bl	800e820 <malloc>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	61fb      	str	r3, [r7, #28]


	float Err = (reqvalue  - actvalue);
 800cfb4:	ed97 7a02 	vldr	s14, [r7, #8]
 800cfb8:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfc0:	edc7 7a06 	vstr	s15, [r7, #24]

	float Ifactor = *(pid_ctl->ki);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	617b      	str	r3, [r7, #20]
	float Pfactor = *(pid_ctl->kp);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	613b      	str	r3, [r7, #16]

	now->Error = Err;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	69ba      	ldr	r2, [r7, #24]
 800cfd8:	60da      	str	r2, [r3, #12]
	now->Tickdiff = tickdiff;
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	611a      	str	r2, [r3, #16]

	now->Pfactor = (Err) * Pfactor;
 800cfe0:	ed97 7a06 	vldr	s14, [r7, #24]
 800cfe4:	edd7 7a04 	vldr	s15, [r7, #16]
 800cfe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	edc3 7a00 	vstr	s15, [r3]
	now->Ifactor = (pid_ctl->prev->Ifactor + (Err * tickdiff)) * Ifactor;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	ed93 7a01 	vldr	s14, [r3, #4]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	ee07 3a90 	vmov	s15, r3
 800d000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d004:	edd7 7a06 	vldr	s15, [r7, #24]
 800d008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d00c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d010:	edd7 7a05 	vldr	s15, [r7, #20]
 800d014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	edc3 7a01 	vstr	s15, [r3, #4]
	now->Dfactor = ((pid_ctl->prev->Error - Err) / tickdiff) * Pfactor;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	ed93 7a03 	vldr	s14, [r3, #12]
 800d026:	edd7 7a06 	vldr	s15, [r7, #24]
 800d02a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	ee07 3a90 	vmov	s15, r3
 800d034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d03c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	edc3 7a02 	vstr	s15, [r3, #8]

	pid_ctl->curr = now;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	69fa      	ldr	r2, [r7, #28]
 800d04e:	605a      	str	r2, [r3, #4]


	return pid_get_curr_pid(pid_ctl) ; // return PWM
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	f000 f807 	bl	800d064 <pid_get_curr_pid>
 800d056:	eef0 7a40 	vmov.f32	s15, s0
}
 800d05a:	eeb0 0a67 	vmov.f32	s0, s15
 800d05e:	3720      	adds	r7, #32
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <pid_get_curr_pid>:

//for motor to call
float pid_get_curr_pid(pid_control* pid_ctl){
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
	return (float)round(pid_ctl->curr->Pfactor + pid_ctl->curr->Ifactor); //+ pidframe->Dfactor);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	ed93 7a00 	vldr	s14, [r3]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	edd3 7a01 	vldr	s15, [r3, #4]
 800d07c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d080:	ee17 0a90 	vmov	r0, s15
 800d084:	f7f3 fa58 	bl	8000538 <__aeabi_f2d>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	ec43 2b10 	vmov	d0, r2, r3
 800d090:	f002 f902 	bl	800f298 <round>
 800d094:	ec53 2b10 	vmov	r2, r3, d0
 800d098:	4610      	mov	r0, r2
 800d09a:	4619      	mov	r1, r3
 800d09c:	f7f3 fd9c 	bl	8000bd8 <__aeabi_d2f>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	ee07 3a90 	vmov	s15, r3
}
 800d0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <pid_reset_error>:

void pid_reset_error(pid_control* pid_ctl){
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
	free(pid_ctl->prev);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f001 fbb7 	bl	800e830 <free>
	pid_ctl->prev = pid_ctl->curr;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	601a      	str	r2, [r3, #0]
	pid_frame *now = malloc(sizeof(pid_frame));
 800d0ca:	2014      	movs	r0, #20
 800d0cc:	f001 fba8 	bl	800e820 <malloc>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	60fb      	str	r3, [r7, #12]

	now->Error = 0;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f04f 0200 	mov.w	r2, #0
 800d0da:	60da      	str	r2, [r3, #12]
	now->Tickdiff = 0;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	611a      	str	r2, [r3, #16]
	now->Pfactor = 0;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f04f 0200 	mov.w	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]
	now->Ifactor = 0;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f04f 0200 	mov.w	r2, #0
 800d0f0:	605a      	str	r2, [r3, #4]
	now->Dfactor = 0;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f04f 0200 	mov.w	r2, #0
 800d0f8:	609a      	str	r2, [r3, #8]
}
 800d0fa:	bf00      	nop
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <angle_subcontrol_init>:
 *      Author: skylivingston
 */

#include "speed.h"

angle_subcontrol* angle_subcontrol_init (pid_control* pid_ctl, vehicleservo_control* vehicleservo_ctl, I2C_HandleTypeDef *hi2c){
 800d102:	b580      	push	{r7, lr}
 800d104:	b086      	sub	sp, #24
 800d106:	af00      	add	r7, sp, #0
 800d108:	60f8      	str	r0, [r7, #12]
 800d10a:	60b9      	str	r1, [r7, #8]
 800d10c:	607a      	str	r2, [r7, #4]
	angle_subcontrol* angle_subctl = malloc(sizeof(angle_subcontrol));
 800d10e:	2038      	movs	r0, #56	; 0x38
 800d110:	f001 fb86 	bl	800e820 <malloc>
 800d114:	4603      	mov	r3, r0
 800d116:	617b      	str	r3, [r7, #20]
	angle_subctl->hi2c = hi2c;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	605a      	str	r2, [r3, #4]

	angle_subctl->pid_ctl = pid_ctl;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	609a      	str	r2, [r3, #8]


	angle_subctl->vehicleservo_ctl= vehicleservo_ctl;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	68ba      	ldr	r2, [r7, #8]
 800d128:	601a      	str	r2, [r3, #0]

	angle_subctl->prevsample = HAL_GetTick();
 800d12a:	f7f6 ffe7 	bl	80040fc <HAL_GetTick>
 800d12e:	4603      	mov	r3, r0
 800d130:	461a      	mov	r2, r3
 800d132:	f04f 0300 	mov.w	r3, #0
 800d136:	6979      	ldr	r1, [r7, #20]
 800d138:	e9c1 2304 	strd	r2, r3, [r1, #16]
	angle_subctl->gyrosum = 0;
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	619a      	str	r2, [r3, #24]

	angle_subctl->prevactualangle= 0;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	621a      	str	r2, [r3, #32]
	angle_subctl->curractualangle= 0;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	f04f 0200 	mov.w	r2, #0
 800d152:	61da      	str	r2, [r3, #28]
	angle_subctl->requestedangle = 0;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	f04f 0200 	mov.w	r2, #0
 800d15a:	625a      	str	r2, [r3, #36]	; 0x24


	angle_subctl->leftanglemul = 1;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d162:	629a      	str	r2, [r3, #40]	; 0x28
	angle_subctl->rightanglemul = 1;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d16a:	62da      	str	r2, [r3, #44]	; 0x2c

	angle_subctl->bais = 0;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	f04f 0200 	mov.w	r2, #0
 800d172:	631a      	str	r2, [r3, #48]	; 0x30
	angle_subctl->status = ANGLE_STATUS_NOT_RUNNING;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	2200      	movs	r2, #0
 800d178:	635a      	str	r2, [r3, #52]	; 0x34

	return angle_subctl;
 800d17a:	697b      	ldr	r3, [r7, #20]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <angle_subcontrol_set_leftanglemul>:



void angle_subcontrol_set_leftanglemul(angle_subcontrol * angle_subctl, float mul){
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	ed87 0a00 	vstr	s0, [r7]
	angle_subctl->leftanglemul = mul;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d196:	bf00      	nop
 800d198:	370c      	adds	r7, #12
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <angle_subcontrol_set_rightanglemul>:

void angle_subcontrol_set_rightanglemul(angle_subcontrol * angle_subctl, float mul){
 800d1a2:	b480      	push	{r7}
 800d1a4:	b083      	sub	sp, #12
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
 800d1aa:	ed87 0a00 	vstr	s0, [r7]
	angle_subctl->rightanglemul = mul;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr

0800d1c0 <angle_subcontrol_set_status>:

void  angle_subcontrol_set_status(angle_subcontrol * angle_subctl, int status){
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
	angle_subctl->status = status;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <angle_subcontrol_reset_degree>:

void angle_subcontrol_reset_degree(angle_subcontrol* angle_subctl, float preverror){
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	ed87 0a00 	vstr	s0, [r7]
	angle_subctl->prevsample = HAL_GetTick();
 800d1e8:	f7f6 ff88 	bl	80040fc <HAL_GetTick>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f04f 0300 	mov.w	r3, #0
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	angle_subctl->gyrosum =preverror;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	619a      	str	r2, [r3, #24]

	angle_subctl->prevactualangle= 0;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f04f 0200 	mov.w	r2, #0
 800d206:	621a      	str	r2, [r3, #32]
	angle_subctl->curractualangle= 0;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f04f 0200 	mov.w	r2, #0
 800d20e:	61da      	str	r2, [r3, #28]
	pid_reset_error(angle_subctl->pid_ctl);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	4618      	mov	r0, r3
 800d216:	f7ff ff4b 	bl	800d0b0 <pid_reset_error>
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <angle_subcontrol_set_angle>:

void angle_subcontrol_set_angle(angle_subcontrol* angle_subctl, float angle){
 800d222:	b480      	push	{r7}
 800d224:	b083      	sub	sp, #12
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	ed87 0a00 	vstr	s0, [r7]
	angle_subctl->requestedangle = angle;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	683a      	ldr	r2, [r7, #0]
 800d232:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <angle_subcontrol_get_gyro_Z_degree_sample>:


float angle_subcontrol_get_gyro_Z_degree_sample(angle_subcontrol* angle_subctl, uint64_t elapsedticks){
 800d240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d244:	b08a      	sub	sp, #40	; 0x28
 800d246:	af00      	add	r7, sp, #0
 800d248:	60f8      	str	r0, [r7, #12]
 800d24a:	e9c7 2300 	strd	r2, r3, [r7]
	axises ax;
	icm20948_gyro_read_dps(angle_subctl->hi2c,&ax);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f107 0210 	add.w	r2, r7, #16
 800d256:	4611      	mov	r1, r2
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fe ff91 	bl	800c180 <icm20948_gyro_read_dps>
	switch(angle_subctl->status){
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d262:	2b00      	cmp	r3, #0
 800d264:	d06b      	beq.n	800d33e <angle_subcontrol_get_gyro_Z_degree_sample+0xfe>
 800d266:	2b00      	cmp	r3, #0
 800d268:	f2c0 8098 	blt.w	800d39c <angle_subcontrol_get_gyro_Z_degree_sample+0x15c>
 800d26c:	3b01      	subs	r3, #1
 800d26e:	2b01      	cmp	r3, #1
 800d270:	f200 8094 	bhi.w	800d39c <angle_subcontrol_get_gyro_Z_degree_sample+0x15c>
		case ANGLE_STATUS_RUNNING_LINE: case ANGLE_STATUS_RUNNING_WHEEL:
			if(ax.z > 0 ) return -((ax.z*angle_subctl->leftanglemul)/1000)*elapsedticks;
 800d274:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d278:	f04f 0200 	mov.w	r2, #0
 800d27c:	f04f 0300 	mov.w	r3, #0
 800d280:	f7f3 fc42 	bl	8000b08 <__aeabi_dcmpgt>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d02c      	beq.n	800d2e4 <angle_subcontrol_get_gyro_Z_degree_sample+0xa4>
 800d28a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d292:	4618      	mov	r0, r3
 800d294:	f7f3 f950 	bl	8000538 <__aeabi_f2d>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	4620      	mov	r0, r4
 800d29e:	4629      	mov	r1, r5
 800d2a0:	f7f3 f9a2 	bl	80005e8 <__aeabi_dmul>
 800d2a4:	4602      	mov	r2, r0
 800d2a6:	460b      	mov	r3, r1
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	4b3f      	ldr	r3, [pc, #252]	; (800d3b0 <angle_subcontrol_get_gyro_Z_degree_sample+0x170>)
 800d2b2:	f7f3 fac3 	bl	800083c <__aeabi_ddiv>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4690      	mov	r8, r2
 800d2bc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800d2c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2c4:	f7f3 f95a 	bl	800057c <__aeabi_ul2d>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	4649      	mov	r1, r9
 800d2d0:	f7f3 f98a 	bl	80005e8 <__aeabi_dmul>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4610      	mov	r0, r2
 800d2da:	4619      	mov	r1, r3
 800d2dc:	f7f3 fc7c 	bl	8000bd8 <__aeabi_d2f>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	e05d      	b.n	800d3a0 <angle_subcontrol_get_gyro_Z_degree_sample+0x160>
			else return -((ax.z*angle_subctl->rightanglemul)/1000)*elapsedticks;
 800d2e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7f3 f923 	bl	8000538 <__aeabi_f2d>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	f7f3 f975 	bl	80005e8 <__aeabi_dmul>
 800d2fe:	4602      	mov	r2, r0
 800d300:	460b      	mov	r3, r1
 800d302:	4610      	mov	r0, r2
 800d304:	4619      	mov	r1, r3
 800d306:	f04f 0200 	mov.w	r2, #0
 800d30a:	4b29      	ldr	r3, [pc, #164]	; (800d3b0 <angle_subcontrol_get_gyro_Z_degree_sample+0x170>)
 800d30c:	f7f3 fa96 	bl	800083c <__aeabi_ddiv>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4614      	mov	r4, r2
 800d316:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800d31a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d31e:	f7f3 f92d 	bl	800057c <__aeabi_ul2d>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4620      	mov	r0, r4
 800d328:	4629      	mov	r1, r5
 800d32a:	f7f3 f95d 	bl	80005e8 <__aeabi_dmul>
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	4610      	mov	r0, r2
 800d334:	4619      	mov	r1, r3
 800d336:	f7f3 fc4f 	bl	8000bd8 <__aeabi_d2f>
 800d33a:	4603      	mov	r3, r0
 800d33c:	e030      	b.n	800d3a0 <angle_subcontrol_get_gyro_Z_degree_sample+0x160>
			break;
		case ANGLE_STATUS_NOT_RUNNING:
			if(angle_subctl->bais == 0) angle_subctl->bais = ax.z;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800d344:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34c:	d109      	bne.n	800d362 <angle_subcontrol_get_gyro_Z_degree_sample+0x122>
 800d34e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d352:	4610      	mov	r0, r2
 800d354:	4619      	mov	r1, r3
 800d356:	f7f3 fc3f 	bl	8000bd8 <__aeabi_d2f>
 800d35a:	4602      	mov	r2, r0
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	631a      	str	r2, [r3, #48]	; 0x30
			else angle_subctl->bais = (angle_subctl->bais + ax.z)/2;
			break;
 800d360:	e01b      	b.n	800d39a <angle_subcontrol_get_gyro_Z_degree_sample+0x15a>
			else angle_subctl->bais = (angle_subctl->bais + ax.z)/2;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d366:	4618      	mov	r0, r3
 800d368:	f7f3 f8e6 	bl	8000538 <__aeabi_f2d>
 800d36c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d370:	f7f2 ff84 	bl	800027c <__adddf3>
 800d374:	4602      	mov	r2, r0
 800d376:	460b      	mov	r3, r1
 800d378:	4610      	mov	r0, r2
 800d37a:	4619      	mov	r1, r3
 800d37c:	f04f 0200 	mov.w	r2, #0
 800d380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d384:	f7f3 fa5a 	bl	800083c <__aeabi_ddiv>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4610      	mov	r0, r2
 800d38e:	4619      	mov	r1, r3
 800d390:	f7f3 fc22 	bl	8000bd8 <__aeabi_d2f>
 800d394:	4602      	mov	r2, r0
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800d39a:	bf00      	nop
	}
	return 0;
 800d39c:	f04f 0300 	mov.w	r3, #0
 800d3a0:	ee07 3a90 	vmov	s15, r3
}
 800d3a4:	eeb0 0a67 	vmov.f32	s0, s15
 800d3a8:	3728      	adds	r7, #40	; 0x28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d3b0:	408f4000 	.word	0x408f4000

0800d3b4 <angle_subcontrol_get_gyrosum>:

float angle_subcontrol_get_gyrosum(angle_subcontrol* angle_subctl){
 800d3b4:	b480      	push	{r7}
 800d3b6:	b083      	sub	sp, #12
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
	return angle_subctl->gyrosum;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	ee07 3a90 	vmov	s15, r3
}
 800d3c4:	eeb0 0a67 	vmov.f32	s0, s15
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr
 800d3d2:	0000      	movs	r0, r0
 800d3d4:	0000      	movs	r0, r0
	...

0800d3d8 <angle_subcontrol_run>:



void angle_subcontrol_run(angle_subcontrol* angle_subctl, int rev, int ressize){
 800d3d8:	b5b0      	push	{r4, r5, r7, lr}
 800d3da:	ed2d 8b02 	vpush	{d8}
 800d3de:	b08a      	sub	sp, #40	; 0x28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]

	uint64_t elapsetick = HAL_GetTick() - angle_subctl->prevsample;
 800d3e8:	f7f6 fe88 	bl	80040fc <HAL_GetTick>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f04f 0100 	mov.w	r1, #0
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d3fa:	1a84      	subs	r4, r0, r2
 800d3fc:	eb61 0503 	sbc.w	r5, r1, r3
 800d400:	e9c7 4508 	strd	r4, r5, [r7, #32]
	angle_subctl->gyrosum += angle_subcontrol_get_gyro_Z_degree_sample(angle_subctl, elapsetick);
 800d404:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7ff ff19 	bl	800d240 <angle_subcontrol_get_gyro_Z_degree_sample>
 800d40e:	eeb0 7a40 	vmov.f32	s14, s0
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	edd3 7a06 	vldr	s15, [r3, #24]
 800d418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	edc3 7a06 	vstr	s15, [r3, #24]
	float relativeangle = angle_subctl->gyrosum;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	61fb      	str	r3, [r7, #28]
	float requestedangle = angle_subctl->requestedangle;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d42c:	61bb      	str	r3, [r7, #24]

	pid_run(angle_subctl->pid_ctl, requestedangle, relativeangle,elapsetick);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	6a3a      	ldr	r2, [r7, #32]
 800d434:	4611      	mov	r1, r2
 800d436:	edd7 0a07 	vldr	s1, [r7, #28]
 800d43a:	ed97 0a06 	vldr	s0, [r7, #24]
 800d43e:	4618      	mov	r0, r3
 800d440:	f7ff fda1 	bl	800cf86 <pid_run>
	float readjustment_PID = (rev/abs(rev))* pid_get_curr_pid(angle_subctl->pid_ctl);
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	da02      	bge.n	800d450 <angle_subcontrol_run+0x78>
 800d44a:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
 800d44e:	e001      	b.n	800d454 <angle_subcontrol_run+0x7c>
 800d450:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	4618      	mov	r0, r3
 800d45a:	f7ff fe03 	bl	800d064 <pid_get_curr_pid>
 800d45e:	eef0 7a40 	vmov.f32	s15, s0
 800d462:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d466:	edc7 7a05 	vstr	s15, [r7, #20]
	angle_subctl->prevactualangle = angle_subctl->curractualangle;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	69da      	ldr	r2, [r3, #28]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	621a      	str	r2, [r3, #32]
	float newvalue = angle_subctl->curractualangle + readjustment_PID;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	edd3 7a07 	vldr	s15, [r3, #28]
 800d478:	ed97 7a05 	vldr	s14, [r7, #20]
 800d47c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d480:	edc7 7a04 	vstr	s15, [r7, #16]
	if ( newvalue > -ressize && newvalue < ressize ) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	425b      	negs	r3, r3
 800d488:	ee07 3a90 	vmov	s15, r3
 800d48c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d490:	ed97 7a04 	vldr	s14, [r7, #16]
 800d494:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d49c:	dd0f      	ble.n	800d4be <angle_subcontrol_run+0xe6>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	ee07 3a90 	vmov	s15, r3
 800d4a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4a8:	ed97 7a04 	vldr	s14, [r7, #16]
 800d4ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4b4:	d503      	bpl.n	800d4be <angle_subcontrol_run+0xe6>
		angle_subctl->curractualangle = newvalue;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	693a      	ldr	r2, [r7, #16]
 800d4ba:	61da      	str	r2, [r3, #28]
 800d4bc:	e004      	b.n	800d4c8 <angle_subcontrol_run+0xf0>
	}
	else {
		pid_reset_error(angle_subctl->pid_ctl);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7ff fdf4 	bl	800d0b0 <pid_reset_error>
	}


	switch(angle_subctl->status){
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d014      	beq.n	800d4fa <angle_subcontrol_run+0x122>
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	dc29      	bgt.n	800d528 <angle_subcontrol_run+0x150>
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d01f      	beq.n	800d518 <angle_subcontrol_run+0x140>
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d125      	bne.n	800d528 <angle_subcontrol_run+0x150>
		case ANGLE_STATUS_RUNNING_LINE:
			vehicleservo_set_wheel_angle(angle_subctl->vehicleservo_ctl,angle_subctl->curractualangle);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	681c      	ldr	r4, [r3, #0]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	69db      	ldr	r3, [r3, #28]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7f3 f827 	bl	8000538 <__aeabi_f2d>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	ec43 2b10 	vmov	d0, r2, r3
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f001 f90a 	bl	800e70c <vehicleservo_set_wheel_angle>
			break;
 800d4f8:	e016      	b.n	800d528 <angle_subcontrol_run+0x150>
		case ANGLE_STATUS_RUNNING_WHEEL:
			vehicleservo_set_wheel_angle(angle_subctl->vehicleservo_ctl,angle_subctl->requestedangle);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681c      	ldr	r4, [r3, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	4618      	mov	r0, r3
 800d504:	f7f3 f818 	bl	8000538 <__aeabi_f2d>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	ec43 2b10 	vmov	d0, r2, r3
 800d510:	4620      	mov	r0, r4
 800d512:	f001 f8fb 	bl	800e70c <vehicleservo_set_wheel_angle>
			break;
 800d516:	e007      	b.n	800d528 <angle_subcontrol_run+0x150>
		case ANGLE_STATUS_NOT_RUNNING:
			vehicleservo_set_wheel_angle(angle_subctl->vehicleservo_ctl,0);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 800d548 <angle_subcontrol_run+0x170>
 800d520:	4618      	mov	r0, r3
 800d522:	f001 f8f3 	bl	800e70c <vehicleservo_set_wheel_angle>
			break;
 800d526:	bf00      	nop
	}

	angle_subctl->prevsample = HAL_GetTick();
 800d528:	f7f6 fde8 	bl	80040fc <HAL_GetTick>
 800d52c:	4603      	mov	r3, r0
 800d52e:	461a      	mov	r2, r3
 800d530:	f04f 0300 	mov.w	r3, #0
 800d534:	68f9      	ldr	r1, [r7, #12]
 800d536:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800d53a:	bf00      	nop
 800d53c:	3728      	adds	r7, #40	; 0x28
 800d53e:	46bd      	mov	sp, r7
 800d540:	ecbd 8b02 	vpop	{d8}
 800d544:	bdb0      	pop	{r4, r5, r7, pc}
 800d546:	bf00      	nop
	...

0800d550 <speed_subcontrol_init>:


speed_subcontrol* speed_subcontrol_init (pid_control* pid_ctl, motor_control* motor_ctl, encoder_control* encoder_ctl){
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
	speed_subcontrol* speed_subctl = malloc(sizeof(speed_subcontrol));
 800d55c:	2018      	movs	r0, #24
 800d55e:	f001 f95f 	bl	800e820 <malloc>
 800d562:	4603      	mov	r3, r0
 800d564:	617b      	str	r3, [r7, #20]
	speed_subctl->motor_ctl = motor_ctl;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	68ba      	ldr	r2, [r7, #8]
 800d56a:	601a      	str	r2, [r3, #0]
	speed_subctl->pid_ctl = pid_ctl;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	605a      	str	r2, [r3, #4]
	speed_subctl->encoder_ctl = encoder_ctl;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	687a      	ldr	r2, [r7, #4]
 800d576:	609a      	str	r2, [r3, #8]

	speed_subctl->prevpwm = 0;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	2200      	movs	r2, #0
 800d57c:	60da      	str	r2, [r3, #12]
	speed_subctl->currpwm = 0;
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	2200      	movs	r2, #0
 800d582:	611a      	str	r2, [r3, #16]

	speed_subctl->speed = 0;
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f04f 0200 	mov.w	r2, #0
 800d58a:	615a      	str	r2, [r3, #20]

	return speed_subctl;
 800d58c:	697b      	ldr	r3, [r7, #20]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <speed_subcontrol_reset_PWM>:

void speed_subcontrol_reset_PWM(speed_subcontrol* speed_subctl){
 800d596:	b580      	push	{r7, lr}
 800d598:	b082      	sub	sp, #8
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	6078      	str	r0, [r7, #4]
	speed_subctl->prevpwm = 0;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	60da      	str	r2, [r3, #12]
	speed_subctl->currpwm = 0;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	611a      	str	r2, [r3, #16]

	pid_reset_error(speed_subctl->pid_ctl);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7ff fd7e 	bl	800d0b0 <pid_reset_error>
}
 800d5b4:	bf00      	nop
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <speed_subcontrol_set_speed>:

void speed_subcontrol_set_speed(speed_subcontrol* speed_subctl, float speed){
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	ed87 0a00 	vstr	s0, [r7]
	speed_subctl->speed = speed;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	615a      	str	r2, [r3, #20]
}
 800d5ce:	bf00      	nop
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr

0800d5da <speed_subcontrol_run>:

void speed_subcontrol_run(speed_subcontrol* speed_subctl){
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b086      	sub	sp, #24
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]

	uint32_t accurate_tickdiff = (uint32_t) encoder_getTickDiff(speed_subctl->encoder_ctl);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fe fc02 	bl	800bdf0 <encoder_getTickDiff>
 800d5ec:	6178      	str	r0, [r7, #20]
	float accurate_pulsediff = (float)speed_subctl->encoder_ctl->currFrame->pulseDiff;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	ee07 3a90 	vmov	s15, r3
 800d5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5fe:	edc7 7a04 	vstr	s15, [r7, #16]
	float speed = speed_subctl->speed;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	60fb      	str	r3, [r7, #12]

	int readjustment_PID = (int) round(pid_run(speed_subctl->pid_ctl, speed, accurate_pulsediff, accurate_tickdiff));
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	6979      	ldr	r1, [r7, #20]
 800d60e:	edd7 0a04 	vldr	s1, [r7, #16]
 800d612:	ed97 0a03 	vldr	s0, [r7, #12]
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff fcb5 	bl	800cf86 <pid_run>
 800d61c:	ee10 3a10 	vmov	r3, s0
 800d620:	4618      	mov	r0, r3
 800d622:	f7f2 ff89 	bl	8000538 <__aeabi_f2d>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	ec43 2b10 	vmov	d0, r2, r3
 800d62e:	f001 fe33 	bl	800f298 <round>
 800d632:	ec53 2b10 	vmov	r2, r3, d0
 800d636:	4610      	mov	r0, r2
 800d638:	4619      	mov	r1, r3
 800d63a:	f7f3 fa85 	bl	8000b48 <__aeabi_d2iz>
 800d63e:	4603      	mov	r3, r0
 800d640:	60bb      	str	r3, [r7, #8]
	speed_subctl->prevpwm = speed_subctl->currpwm;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	691a      	ldr	r2, [r3, #16]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	60da      	str	r2, [r3, #12]
	speed_subctl->currpwm += readjustment_PID;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	691a      	ldr	r2, [r3, #16]
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	441a      	add	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	611a      	str	r2, [r3, #16]

	if (speed != 0){
 800d656:	edd7 7a03 	vldr	s15, [r7, #12]
 800d65a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d662:	d008      	beq.n	800d676 <speed_subcontrol_run+0x9c>
		motor_set_pwm(speed_subctl->motor_ctl,speed_subctl->currpwm,MOTOR_PWM_NORMAL);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6818      	ldr	r0, [r3, #0]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	2200      	movs	r2, #0
 800d66e:	4619      	mov	r1, r3
 800d670:	f7ff f92c 	bl	800c8cc <motor_set_pwm>
			motor_set_pwm(speed_subctl->motor_ctl,10000,MOTOR_PWM_BRAKE);
		}else{
			motor_set_pwm(speed_subctl->motor_ctl,0,MOTOR_PWM_NORMAL);
		}
	}
}
 800d674:	e016      	b.n	800d6a4 <speed_subcontrol_run+0xca>
		if(accurate_pulsediff != 0){
 800d676:	edd7 7a04 	vldr	s15, [r7, #16]
 800d67a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d682:	d008      	beq.n	800d696 <speed_subcontrol_run+0xbc>
			motor_set_pwm(speed_subctl->motor_ctl,10000,MOTOR_PWM_BRAKE);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2201      	movs	r2, #1
 800d68a:	f242 7110 	movw	r1, #10000	; 0x2710
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff f91c 	bl	800c8cc <motor_set_pwm>
}
 800d694:	e006      	b.n	800d6a4 <speed_subcontrol_run+0xca>
			motor_set_pwm(speed_subctl->motor_ctl,0,MOTOR_PWM_NORMAL);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	2100      	movs	r1, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff f914 	bl	800c8cc <motor_set_pwm>
}
 800d6a4:	bf00      	nop
 800d6a6:	3718      	adds	r7, #24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <speed_control_init>:





speed_control* speed_control_init(speed_subcontrol* Lmotor_ctl, speed_subcontrol* Rmotor_ctl, angle_subcontrol* angle_ctl  ,UART_HandleTypeDef *huart){
 800d6ac:	b5b0      	push	{r4, r5, r7, lr}
 800d6ae:	b086      	sub	sp, #24
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	603b      	str	r3, [r7, #0]
	speed_control * speed_ctl = malloc(sizeof(speed_control));
 800d6ba:	2078      	movs	r0, #120	; 0x78
 800d6bc:	f001 f8b0 	bl	800e820 <malloc>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	617b      	str	r3, [r7, #20]
	speed_ctl->Lmotor_speed_subctl = Lmotor_ctl;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	601a      	str	r2, [r3, #0]
	speed_ctl->Rmotor_speed_subctl = Rmotor_ctl;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	68ba      	ldr	r2, [r7, #8]
 800d6ce:	605a      	str	r2, [r3, #4]
	speed_ctl->angle_subctl = angle_ctl;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	609a      	str	r2, [r3, #8]
	speed_ctl->huart = huart;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	60da      	str	r2, [r3, #12]

	speed_ctl->requestedRevDistance =  0;
 800d6dc:	6979      	ldr	r1, [r7, #20]
 800d6de:	f04f 0200 	mov.w	r2, #0
 800d6e2:	f04f 0300 	mov.w	r3, #0
 800d6e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	speed_ctl->requestedAngle = 0;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	f04f 0200 	mov.w	r2, #0
 800d6f0:	61da      	str	r2, [r3, #28]
	speed_ctl->requestedIdealMaxSpeed = 8;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 800d6f8:	619a      	str	r2, [r3, #24]
	speed_ctl->requestedEncoderTickRate = 100;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2264      	movs	r2, #100	; 0x64
 800d6fe:	629a      	str	r2, [r3, #40]	; 0x28

	//default value for oled show
	speed_ctl->neededTotalTick = (speed_ctl->requestedRevDistance / speed_ctl->requestedIdealMaxSpeed) * 1.5 * speed_ctl->requestedEncoderTickRate;
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	699b      	ldr	r3, [r3, #24]
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7f2 ff14 	bl	8000538 <__aeabi_f2d>
 800d710:	4602      	mov	r2, r0
 800d712:	460b      	mov	r3, r1
 800d714:	4620      	mov	r0, r4
 800d716:	4629      	mov	r1, r5
 800d718:	f7f3 f890 	bl	800083c <__aeabi_ddiv>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4610      	mov	r0, r2
 800d722:	4619      	mov	r1, r3
 800d724:	f04f 0200 	mov.w	r2, #0
 800d728:	4b31      	ldr	r3, [pc, #196]	; (800d7f0 <speed_control_init+0x144>)
 800d72a:	f7f2 ff5d 	bl	80005e8 <__aeabi_dmul>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	4614      	mov	r4, r2
 800d734:	461d      	mov	r5, r3
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7f2 feea 	bl	8000514 <__aeabi_i2d>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4620      	mov	r0, r4
 800d746:	4629      	mov	r1, r5
 800d748:	f7f2 ff4e 	bl	80005e8 <__aeabi_dmul>
 800d74c:	4602      	mov	r2, r0
 800d74e:	460b      	mov	r3, r1
 800d750:	4610      	mov	r0, r2
 800d752:	4619      	mov	r1, r3
 800d754:	f7f3 fbb6 	bl	8000ec4 <__aeabi_d2ulz>
 800d758:	4602      	mov	r2, r0
 800d75a:	460b      	mov	r3, r1
 800d75c:	6979      	ldr	r1, [r7, #20]
 800d75e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	speed_ctl->neededTotalPulse = speed_ctl->requestedRevDistance;
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d768:	4610      	mov	r0, r2
 800d76a:	4619      	mov	r1, r3
 800d76c:	f7f3 fbaa 	bl	8000ec4 <__aeabi_d2ulz>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	6979      	ldr	r1, [r7, #20]
 800d776:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	speed_ctl->LmotorProgressTick = 0;
 800d77a:	6979      	ldr	r1, [r7, #20]
 800d77c:	f04f 0200 	mov.w	r2, #0
 800d780:	f04f 0300 	mov.w	r3, #0
 800d784:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    speed_ctl->RmotorProgressTick = 0;
 800d788:	6979      	ldr	r1, [r7, #20]
 800d78a:	f04f 0200 	mov.w	r2, #0
 800d78e:	f04f 0300 	mov.w	r3, #0
 800d792:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    speed_ctl->LmotorProgressPulse = 0;
 800d796:	6979      	ldr	r1, [r7, #20]
 800d798:	f04f 0200 	mov.w	r2, #0
 800d79c:	f04f 0300 	mov.w	r3, #0
 800d7a0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    speed_ctl->RmotorProgressPulse = 0;
 800d7a4:	6979      	ldr	r1, [r7, #20]
 800d7a6:	f04f 0200 	mov.w	r2, #0
 800d7aa:	f04f 0300 	mov.w	r3, #0
 800d7ae:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

	speed_ctl->runStatus = STATUS_FREE;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	631a      	str	r2, [r3, #48]	; 0x30
	speed_ctl->pathMode = PATH_MODE_CURVE;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	635a      	str	r2, [r3, #52]	; 0x34
	speed_ctl->endpathtilterr = 0;
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	f04f 0200 	mov.w	r2, #0
 800d7c4:	669a      	str	r2, [r3, #104]	; 0x68


	speed_ctl->correctionEnable = 1;
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	66da      	str	r2, [r3, #108]	; 0x6c
	speed_ctl->correctionRange = 5;
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	2205      	movs	r2, #5
 800d7d0:	671a      	str	r2, [r3, #112]	; 0x70

	speed_ctl->requestedOrientation = 0;
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	621a      	str	r2, [r3, #32]
	speed_ctl->requestedOrientationRange = 10;
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	4a05      	ldr	r2, [pc, #20]	; (800d7f4 <speed_control_init+0x148>)
 800d7de:	625a      	str	r2, [r3, #36]	; 0x24

	speed_ctl->callbackdistptr = NULL;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	675a      	str	r2, [r3, #116]	; 0x74

	return speed_ctl;
 800d7e6:	697b      	ldr	r3, [r7, #20]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3718      	adds	r7, #24
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d7f0:	3ff80000 	.word	0x3ff80000
 800d7f4:	41200000 	.word	0x41200000

0800d7f8 <speed_control_toggle_correction>:

void speed_control_toggle_correction(speed_control* speed_ctl, float correctionRange ){
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	ed87 0a00 	vstr	s0, [r7]
	if (speed_ctl->correctionEnable == 1) speed_ctl->correctionEnable = 0 ;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d103      	bne.n	800d814 <speed_control_toggle_correction+0x1c>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	66da      	str	r2, [r3, #108]	; 0x6c
 800d812:	e002      	b.n	800d81a <speed_control_toggle_correction+0x22>
	else speed_ctl->correctionEnable = 1;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	66da      	str	r2, [r3, #108]	; 0x6c
	speed_ctl->correctionRange = correctionRange;
 800d81a:	edd7 7a00 	vldr	s15, [r7]
 800d81e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d822:	ee17 2a90 	vmov	r2, s15
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d82a:	bf00      	nop
 800d82c:	370c      	adds	r7, #12
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <speed_control_set_callbackdistptr>:

void speed_control_set_status(speed_control* speed_ctl, int status){
	speed_ctl->runStatus = status;
}

void speed_control_set_callbackdistptr (speed_control* speed_ctl, double* callbackdistptr){
 800d836:	b480      	push	{r7}
 800d838:	b083      	sub	sp, #12
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
	speed_ctl->callbackdistptr = callbackdistptr;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	683a      	ldr	r2, [r7, #0]
 800d844:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d846:	bf00      	nop
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <speed_control_path_setup>:

void speed_control_path_setup(speed_control* speed_ctl, float MaxSpeed ,int EncoderTickRate, double RevDistance, float Angle, float Orientation, float OrientationRange, int pathmode){
 800d852:	b480      	push	{r7}
 800d854:	b08b      	sub	sp, #44	; 0x2c
 800d856:	af00      	add	r7, sp, #0
 800d858:	6278      	str	r0, [r7, #36]	; 0x24
 800d85a:	ed87 0a08 	vstr	s0, [r7, #32]
 800d85e:	61f9      	str	r1, [r7, #28]
 800d860:	ed87 1b04 	vstr	d1, [r7, #16]
 800d864:	edc7 0a06 	vstr	s1, [r7, #24]
 800d868:	ed87 2a03 	vstr	s4, [r7, #12]
 800d86c:	edc7 2a02 	vstr	s5, [r7, #8]
 800d870:	607a      	str	r2, [r7, #4]

	if(speed_ctl->runStatus != STATUS_FREE) return;
 800d872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d876:	2b00      	cmp	r3, #0
 800d878:	d11b      	bne.n	800d8b2 <speed_control_path_setup+0x60>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	3b01      	subs	r3, #1
	switch(pathmode){
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d818      	bhi.n	800d8b4 <speed_control_path_setup+0x62>
		case PATH_MODE_STR: case PATH_MODE_CURVE:
			speed_ctl->pathMode = pathmode;
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	635a      	str	r2, [r3, #52]	; 0x34
			speed_ctl->requestedRevDistance =  RevDistance;
 800d888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d88a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d88e:	e9c1 2304 	strd	r2, r3, [r1, #16]
			speed_ctl->requestedAngle = Angle;
 800d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d894:	69ba      	ldr	r2, [r7, #24]
 800d896:	61da      	str	r2, [r3, #28]
			speed_ctl->requestedIdealMaxSpeed = MaxSpeed;
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	6a3a      	ldr	r2, [r7, #32]
 800d89c:	619a      	str	r2, [r3, #24]
			speed_ctl->requestedEncoderTickRate = EncoderTickRate;
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	69fa      	ldr	r2, [r7, #28]
 800d8a2:	629a      	str	r2, [r3, #40]	; 0x28
			speed_ctl->requestedOrientation = Orientation;
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	621a      	str	r2, [r3, #32]
			speed_ctl->requestedOrientationRange = OrientationRange;
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800d8b0:	e000      	b.n	800d8b4 <speed_control_path_setup+0x62>
	if(speed_ctl->runStatus != STATUS_FREE) return;
 800d8b2:	bf00      	nop
	}
}
 800d8b4:	372c      	adds	r7, #44	; 0x2c
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
	...

0800d8c0 <speed_control_path_start>:

void speed_control_path_start(speed_control* speed_ctl){
 800d8c0:	b5b0      	push	{r4, r5, r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]

	if(speed_ctl->runStatus != STATUS_FREE) return;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d170      	bne.n	800d9b2 <speed_control_path_start+0xf2>

	speed_ctl->runStatus = STATUS_PATH_RUNNING;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	631a      	str	r2, [r3, #48]	; 0x30

	//reset pwm value
	speed_subcontrol_reset_PWM(speed_ctl->Lmotor_speed_subctl);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff fe5b 	bl	800d596 <speed_subcontrol_reset_PWM>
	speed_subcontrol_reset_PWM(speed_ctl->Rmotor_speed_subctl);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7ff fe56 	bl	800d596 <speed_subcontrol_reset_PWM>

	angle_subcontrol_reset_degree(speed_ctl->angle_subctl,speed_ctl->endpathtilterr);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	689a      	ldr	r2, [r3, #8]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800d8f4:	eeb0 0a67 	vmov.f32	s0, s15
 800d8f8:	4610      	mov	r0, r2
 800d8fa:	f7ff fc6f 	bl	800d1dc <angle_subcontrol_reset_degree>

	speed_ctl->neededTotalTick = (speed_ctl->requestedRevDistance / speed_ctl->requestedIdealMaxSpeed) * 1.5 * speed_ctl->requestedEncoderTickRate;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f2 fe15 	bl	8000538 <__aeabi_f2d>
 800d90e:	4602      	mov	r2, r0
 800d910:	460b      	mov	r3, r1
 800d912:	4620      	mov	r0, r4
 800d914:	4629      	mov	r1, r5
 800d916:	f7f2 ff91 	bl	800083c <__aeabi_ddiv>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	4610      	mov	r0, r2
 800d920:	4619      	mov	r1, r3
 800d922:	f04f 0200 	mov.w	r2, #0
 800d926:	4b25      	ldr	r3, [pc, #148]	; (800d9bc <speed_control_path_start+0xfc>)
 800d928:	f7f2 fe5e 	bl	80005e8 <__aeabi_dmul>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4614      	mov	r4, r2
 800d932:	461d      	mov	r5, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d938:	4618      	mov	r0, r3
 800d93a:	f7f2 fdeb 	bl	8000514 <__aeabi_i2d>
 800d93e:	4602      	mov	r2, r0
 800d940:	460b      	mov	r3, r1
 800d942:	4620      	mov	r0, r4
 800d944:	4629      	mov	r1, r5
 800d946:	f7f2 fe4f 	bl	80005e8 <__aeabi_dmul>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4610      	mov	r0, r2
 800d950:	4619      	mov	r1, r3
 800d952:	f7f3 fab7 	bl	8000ec4 <__aeabi_d2ulz>
 800d956:	4602      	mov	r2, r0
 800d958:	460b      	mov	r3, r1
 800d95a:	6879      	ldr	r1, [r7, #4]
 800d95c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	speed_ctl->neededTotalPulse = speed_ctl->requestedRevDistance;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d966:	4610      	mov	r0, r2
 800d968:	4619      	mov	r1, r3
 800d96a:	f7f3 faab 	bl	8000ec4 <__aeabi_d2ulz>
 800d96e:	4602      	mov	r2, r0
 800d970:	460b      	mov	r3, r1
 800d972:	6879      	ldr	r1, [r7, #4]
 800d974:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	speed_ctl->LmotorProgressTick = 0;
 800d978:	6879      	ldr	r1, [r7, #4]
 800d97a:	f04f 0200 	mov.w	r2, #0
 800d97e:	f04f 0300 	mov.w	r3, #0
 800d982:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    speed_ctl->RmotorProgressTick = 0;
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	f04f 0200 	mov.w	r2, #0
 800d98c:	f04f 0300 	mov.w	r3, #0
 800d990:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    speed_ctl->LmotorProgressPulse = 0;
 800d994:	6879      	ldr	r1, [r7, #4]
 800d996:	f04f 0200 	mov.w	r2, #0
 800d99a:	f04f 0300 	mov.w	r3, #0
 800d99e:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    speed_ctl->RmotorProgressPulse = 0;
 800d9a2:	6879      	ldr	r1, [r7, #4]
 800d9a4:	f04f 0200 	mov.w	r2, #0
 800d9a8:	f04f 0300 	mov.w	r3, #0
 800d9ac:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 800d9b0:	e000      	b.n	800d9b4 <speed_control_path_start+0xf4>
	if(speed_ctl->runStatus != STATUS_FREE) return;
 800d9b2:	bf00      	nop

};
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bdb0      	pop	{r4, r5, r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	3ff80000 	.word	0x3ff80000

0800d9c0 <speed_control_path_end>:

//for internal use
void speed_control_path_end(speed_control* speed_ctl){
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
	if(speed_ctl->runStatus != STATUS_PATH_RUNNING) return;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d10f      	bne.n	800d9f0 <speed_control_path_end+0x30>

	speed_ctl->runStatus = STATUS_FREE;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	631a      	str	r2, [r3, #48]	; 0x30
	angle_subcontrol_set_status(speed_ctl->angle_subctl,ANGLE_STATUS_NOT_RUNNING);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7ff fbef 	bl	800d1c0 <angle_subcontrol_set_status>

	speed_control_path_return(speed_ctl, speed_ctl->callbackdistptr);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f805 	bl	800d9f8 <speed_control_path_return>
 800d9ee:	e000      	b.n	800d9f2 <speed_control_path_end+0x32>
	if(speed_ctl->runStatus != STATUS_PATH_RUNNING) return;
 800d9f0:	bf00      	nop

}
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <speed_control_path_return>:
	angle_subcontrol_set_status(speed_ctl->angle_subctl,ANGLE_STATUS_NOT_RUNNING);

	speed_control_path_return(speed_ctl,retdist);
}

void speed_control_path_return(speed_control* speed_ctl, double* retdist){
 800d9f8:	b5b0      	push	{r4, r5, r7, lr}
 800d9fa:	b084      	sub	sp, #16
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
 800da00:	6039      	str	r1, [r7, #0]

	double distance = (double)(((double)speed_ctl->LmotorProgressTick + (double)speed_ctl->RmotorProgressTick)/2);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800da08:	4610      	mov	r0, r2
 800da0a:	4619      	mov	r1, r3
 800da0c:	f7f2 fdb6 	bl	800057c <__aeabi_ul2d>
 800da10:	4604      	mov	r4, r0
 800da12:	460d      	mov	r5, r1
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800da1a:	4610      	mov	r0, r2
 800da1c:	4619      	mov	r1, r3
 800da1e:	f7f2 fdad 	bl	800057c <__aeabi_ul2d>
 800da22:	4602      	mov	r2, r0
 800da24:	460b      	mov	r3, r1
 800da26:	4620      	mov	r0, r4
 800da28:	4629      	mov	r1, r5
 800da2a:	f7f2 fc27 	bl	800027c <__adddf3>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4610      	mov	r0, r2
 800da34:	4619      	mov	r1, r3
 800da36:	f04f 0200 	mov.w	r2, #0
 800da3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da3e:	f7f2 fefd 	bl	800083c <__aeabi_ddiv>
 800da42:	4602      	mov	r2, r0
 800da44:	460b      	mov	r3, r1
 800da46:	e9c7 2302 	strd	r2, r3, [r7, #8]
//	sprintf(str1[1], "%lu", distance);
//
//	HAL_UART_Transmit(speed_ctl->huart,(uint8_t *)str1, 10, 0xFFFF);
//	/* return rpi infomation*/

	*retdist = distance;
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da50:	e9c1 2300 	strd	r2, r3, [r1]


}
 800da54:	bf00      	nop
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bdb0      	pop	{r4, r5, r7, pc}

0800da5c <speed_control_cal_idealspeed_tick>:


float speed_control_cal_idealspeed_tick(speed_control* speed_ctl, float progress){
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	ed87 0a00 	vstr	s0, [r7]
//	if (progress <= 0 && progress >= 1) return 0;
//	if (progress > 0  && progress <= onethird) return (progress / onethird) * speed_ctl->requestedIdealMaxSpeed;
//	if (progress > onethird   && progress <= twothird) return speed_ctl->requestedIdealMaxSpeed;
//	if (progress > twothird  && progress < 1) return (1 - ((progress - twothird) / onethird)) * speed_ctl->requestedIdealMaxSpeed;

	return speed_ctl->requestedIdealMaxSpeed;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	ee07 3a90 	vmov	s15, r3
}
 800da70:	eeb0 0a67 	vmov.f32	s0, s15
 800da74:	370c      	adds	r7, #12
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr

0800da7e <speed_control_get_tickprogress_L>:
	if (progress >= 1) return 0;
	return 0;
//	return speed_ctl->requestedIdealMaxSpeed;
}

float speed_control_get_tickprogress_L(speed_control* speed_ctl){
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
	float difftick  = (float) diff_get_Lmotor_values(speed_ctl->requestedAngle, speed_ctl->neededTotalTick);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	edd3 7a07 	vldr	s15, [r3, #28]
 800da8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800da96:	4613      	mov	r3, r2
 800da98:	4619      	mov	r1, r3
 800da9a:	ee17 0a90 	vmov	r0, s15
 800da9e:	f7fd ffe7 	bl	800ba70 <diff_get_Lmotor_values>
 800daa2:	ec53 2b10 	vmov	r2, r3, d0
 800daa6:	4610      	mov	r0, r2
 800daa8:	4619      	mov	r1, r3
 800daaa:	f7f3 f895 	bl	8000bd8 <__aeabi_d2f>
 800daae:	4603      	mov	r3, r0
 800dab0:	60fb      	str	r3, [r7, #12]
	return (float)speed_ctl->LmotorProgressTick / (float)difftick;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800dab8:	4610      	mov	r0, r2
 800daba:	4619      	mov	r1, r3
 800dabc:	f7f3 f9a4 	bl	8000e08 <__aeabi_ul2f>
 800dac0:	ee06 0a90 	vmov	s13, r0
 800dac4:	edd7 7a03 	vldr	s15, [r7, #12]
 800dac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dacc:	eef0 7a47 	vmov.f32	s15, s14
}
 800dad0:	eeb0 0a67 	vmov.f32	s0, s15
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <speed_control_get_tickprogress_R>:

float speed_control_get_tickprogress_R(speed_control* speed_ctl){
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
	float difftick  = (float) diff_get_Rmotor_values(speed_ctl->requestedAngle, speed_ctl->neededTotalTick);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	edd3 7a07 	vldr	s15, [r3, #28]
 800dae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800daf2:	4613      	mov	r3, r2
 800daf4:	4619      	mov	r1, r3
 800daf6:	ee17 0a90 	vmov	r0, s15
 800dafa:	f7fe f839 	bl	800bb70 <diff_get_Rmotor_values>
 800dafe:	ec53 2b10 	vmov	r2, r3, d0
 800db02:	4610      	mov	r0, r2
 800db04:	4619      	mov	r1, r3
 800db06:	f7f3 f867 	bl	8000bd8 <__aeabi_d2f>
 800db0a:	4603      	mov	r3, r0
 800db0c:	60fb      	str	r3, [r7, #12]
	return (float)speed_ctl->RmotorProgressTick / (float)difftick;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800db14:	4610      	mov	r0, r2
 800db16:	4619      	mov	r1, r3
 800db18:	f7f3 f976 	bl	8000e08 <__aeabi_ul2f>
 800db1c:	ee06 0a90 	vmov	s13, r0
 800db20:	edd7 7a03 	vldr	s15, [r7, #12]
 800db24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db28:	eef0 7a47 	vmov.f32	s15, s14
}
 800db2c:	eeb0 0a67 	vmov.f32	s0, s15
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <speed_control_get_pulseprogress_L>:

float speed_control_get_pulseprogress_L(speed_control* speed_ctl){
 800db36:	b580      	push	{r7, lr}
 800db38:	b084      	sub	sp, #16
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
	float diffpulse = (float) diff_get_Lmotor_values(speed_ctl->requestedAngle, speed_ctl->neededTotalPulse);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	edd3 7a07 	vldr	s15, [r3, #28]
 800db44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800db4e:	4613      	mov	r3, r2
 800db50:	4619      	mov	r1, r3
 800db52:	ee17 0a90 	vmov	r0, s15
 800db56:	f7fd ff8b 	bl	800ba70 <diff_get_Lmotor_values>
 800db5a:	ec53 2b10 	vmov	r2, r3, d0
 800db5e:	4610      	mov	r0, r2
 800db60:	4619      	mov	r1, r3
 800db62:	f7f3 f839 	bl	8000bd8 <__aeabi_d2f>
 800db66:	4603      	mov	r3, r0
 800db68:	60fb      	str	r3, [r7, #12]
	return (float)speed_ctl->LmotorProgressPulse / (float)diffpulse;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800db70:	4610      	mov	r0, r2
 800db72:	4619      	mov	r1, r3
 800db74:	f7f3 f948 	bl	8000e08 <__aeabi_ul2f>
 800db78:	ee06 0a90 	vmov	s13, r0
 800db7c:	edd7 7a03 	vldr	s15, [r7, #12]
 800db80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db84:	eef0 7a47 	vmov.f32	s15, s14
}
 800db88:	eeb0 0a67 	vmov.f32	s0, s15
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <speed_control_get_pulseprogress_R>:

float speed_control_get_pulseprogress_R(speed_control* speed_ctl){
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
	float diffpulse  = (float) diff_get_Rmotor_values(speed_ctl->requestedAngle, speed_ctl->neededTotalPulse);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	edd3 7a07 	vldr	s15, [r3, #28]
 800dba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dbaa:	4613      	mov	r3, r2
 800dbac:	4619      	mov	r1, r3
 800dbae:	ee17 0a90 	vmov	r0, s15
 800dbb2:	f7fd ffdd 	bl	800bb70 <diff_get_Rmotor_values>
 800dbb6:	ec53 2b10 	vmov	r2, r3, d0
 800dbba:	4610      	mov	r0, r2
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	f7f3 f80b 	bl	8000bd8 <__aeabi_d2f>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	60fb      	str	r3, [r7, #12]
	return (float)speed_ctl->RmotorProgressPulse / (float)diffpulse;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800dbcc:	4610      	mov	r0, r2
 800dbce:	4619      	mov	r1, r3
 800dbd0:	f7f3 f91a 	bl	8000e08 <__aeabi_ul2f>
 800dbd4:	ee06 0a90 	vmov	s13, r0
 800dbd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800dbdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbe0:	eef0 7a47 	vmov.f32	s15, s14
}
 800dbe4:	eeb0 0a67 	vmov.f32	s0, s15
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
	...

0800dbf0 <speed_control_run>:


void speed_control_run(speed_control* speed_ctl){
 800dbf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dbf4:	b09a      	sub	sp, #104	; 0x68
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6178      	str	r0, [r7, #20]

	speed_subcontrol* Lmotor_ctl = speed_ctl->Lmotor_speed_subctl;
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
	speed_subcontrol* Rmotor_ctl = speed_ctl->Rmotor_speed_subctl;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	64bb      	str	r3, [r7, #72]	; 0x48
	angle_subcontrol* angle_ctl = speed_ctl->angle_subctl;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	647b      	str	r3, [r7, #68]	; 0x44

	encoder_run(Lmotor_ctl->encoder_ctl,speed_ctl->requestedEncoderTickRate,ENCODER_DIRECTION_NATURAL);
 800dc0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc0e:	6898      	ldr	r0, [r3, #8]
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc14:	2201      	movs	r2, #1
 800dc16:	4619      	mov	r1, r3
 800dc18:	f7fe f85b 	bl	800bcd2 <encoder_run>
	encoder_run(Rmotor_ctl->encoder_ctl,speed_ctl->requestedEncoderTickRate,ENCODER_DIRECTION_FLIPPED);
 800dc1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc1e:	6898      	ldr	r0, [r3, #8]
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc28:	4619      	mov	r1, r3
 800dc2a:	f7fe f852 	bl	800bcd2 <encoder_run>

	float ltickprogress = 0; float lspeedtick = 0; float lpulseprogress = 0; float lspeedpulse = 0;
 800dc2e:	f04f 0300 	mov.w	r3, #0
 800dc32:	643b      	str	r3, [r7, #64]	; 0x40
 800dc34:	f04f 0300 	mov.w	r3, #0
 800dc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc3a:	f04f 0300 	mov.w	r3, #0
 800dc3e:	667b      	str	r3, [r7, #100]	; 0x64
 800dc40:	f04f 0300 	mov.w	r3, #0
 800dc44:	63bb      	str	r3, [r7, #56]	; 0x38
	float rtickprogress = 0; float rspeedtick = 0; float rpulseprogress = 0; float rspeedpulse = 0;
 800dc46:	f04f 0300 	mov.w	r3, #0
 800dc4a:	637b      	str	r3, [r7, #52]	; 0x34
 800dc4c:	f04f 0300 	mov.w	r3, #0
 800dc50:	633b      	str	r3, [r7, #48]	; 0x30
 800dc52:	f04f 0300 	mov.w	r3, #0
 800dc56:	663b      	str	r3, [r7, #96]	; 0x60
 800dc58:	f04f 0300 	mov.w	r3, #0
 800dc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ldiffspeed = 0; float rdiffspeed = 0;
 800dc5e:	f04f 0300 	mov.w	r3, #0
 800dc62:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc64:	f04f 0300 	mov.w	r3, #0
 800dc68:	65bb      	str	r3, [r7, #88]	; 0x58

	if(speed_ctl->runStatus != STATUS_FREE) {
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f000 80a4 	beq.w	800ddbc <speed_control_run+0x1cc>

	//	float lerror = 0; float rerror = 0;

		//Tick based Information
		speed_ctl->LmotorProgressTick  = speed_ctl->LmotorProgressTick + encoder_getTickDiff(Lmotor_ctl->encoder_ctl);
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800dc7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe f8b6 	bl	800bdf0 <encoder_getTickDiff>
 800dc84:	4603      	mov	r3, r0
 800dc86:	461a      	mov	r2, r3
 800dc88:	f04f 0300 	mov.w	r3, #0
 800dc8c:	18a1      	adds	r1, r4, r2
 800dc8e:	60b9      	str	r1, [r7, #8]
 800dc90:	eb45 0303 	adc.w	r3, r5, r3
 800dc94:	60fb      	str	r3, [r7, #12]
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dc9c:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
		speed_ctl->RmotorProgressTick  = speed_ctl->RmotorProgressTick + encoder_getTickDiff(Rmotor_ctl->encoder_ctl);
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800dca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fe f8a0 	bl	800bdf0 <encoder_getTickDiff>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	f04f 0300 	mov.w	r3, #0
 800dcb8:	18a1      	adds	r1, r4, r2
 800dcba:	6039      	str	r1, [r7, #0]
 800dcbc:	eb45 0303 	adc.w	r3, r5, r3
 800dcc0:	607b      	str	r3, [r7, #4]
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dcc8:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50

		ltickprogress =  speed_control_get_tickprogress_L(speed_ctl);
 800dccc:	6978      	ldr	r0, [r7, #20]
 800dcce:	f7ff fed6 	bl	800da7e <speed_control_get_tickprogress_L>
 800dcd2:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		rtickprogress =  speed_control_get_tickprogress_R(speed_ctl);
 800dcd6:	6978      	ldr	r0, [r7, #20]
 800dcd8:	f7ff feff 	bl	800dada <speed_control_get_tickprogress_R>
 800dcdc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34

		lspeedtick = speed_control_cal_idealspeed_tick(speed_ctl,ltickprogress);
 800dce0:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 800dce4:	6978      	ldr	r0, [r7, #20]
 800dce6:	f7ff feb9 	bl	800da5c <speed_control_cal_idealspeed_tick>
 800dcea:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		rspeedtick = speed_control_cal_idealspeed_tick(speed_ctl,rtickprogress);
 800dcee:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800dcf2:	6978      	ldr	r0, [r7, #20]
 800dcf4:	f7ff feb2 	bl	800da5c <speed_control_cal_idealspeed_tick>
 800dcf8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

//		ldiffspeed = diff_get_Lmotor_values(speed_ctl->requestedAngle,lspeedtick);
//		rdiffspeed = diff_get_Rmotor_values(speed_ctl->requestedAngle,rspeedtick);

		//pulse based information
		speed_ctl->LmotorProgressPulse  = speed_ctl->LmotorProgressPulse + abs(Lmotor_ctl->encoder_ctl->currFrame->pulseDiff);
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800dd02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	bfb8      	it	lt
 800dd0e:	425b      	neglt	r3, r3
 800dd10:	461a      	mov	r2, r3
 800dd12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dd16:	eb10 0a02 	adds.w	sl, r0, r2
 800dd1a:	eb41 0b03 	adc.w	fp, r1, r3
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
		speed_ctl->RmotorProgressPulse  = speed_ctl->RmotorProgressPulse + abs(Rmotor_ctl->encoder_ctl->currFrame->pulseDiff);
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800dd2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	685b      	ldr	r3, [r3, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	bfb8      	it	lt
 800dd36:	425b      	neglt	r3, r3
 800dd38:	461a      	mov	r2, r3
 800dd3a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800dd3e:	eb10 0802 	adds.w	r8, r0, r2
 800dd42:	eb41 0903 	adc.w	r9, r1, r3
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	e9c3 8918 	strd	r8, r9, [r3, #96]	; 0x60

		lpulseprogress =  speed_control_get_pulseprogress_L(speed_ctl);
 800dd4c:	6978      	ldr	r0, [r7, #20]
 800dd4e:	f7ff fef2 	bl	800db36 <speed_control_get_pulseprogress_L>
 800dd52:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		rpulseprogress =  speed_control_get_pulseprogress_R(speed_ctl);
 800dd56:	6978      	ldr	r0, [r7, #20]
 800dd58:	f7ff ff1b 	bl	800db92 <speed_control_get_pulseprogress_R>
 800dd5c:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60

//		lspeedpulse = speed_control_cal_idealspeed_pulse(speed_ctl,lpulseprogress);
//		rspeedpulse = speed_control_cal_idealspeed_pulse(speed_ctl,rpulseprogress);

		ldiffspeed = diff_get_Lmotor_values(speed_ctl->requestedAngle,lspeedtick);
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	edd3 7a07 	vldr	s15, [r3, #28]
 800dd66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dd6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800dd6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd72:	ee17 1a90 	vmov	r1, s15
 800dd76:	ee17 0a10 	vmov	r0, s14
 800dd7a:	f7fd fe79 	bl	800ba70 <diff_get_Lmotor_values>
 800dd7e:	ec53 2b10 	vmov	r2, r3, d0
 800dd82:	4610      	mov	r0, r2
 800dd84:	4619      	mov	r1, r3
 800dd86:	f7f2 ff27 	bl	8000bd8 <__aeabi_d2f>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	65fb      	str	r3, [r7, #92]	; 0x5c
		rdiffspeed = diff_get_Rmotor_values(speed_ctl->requestedAngle,rspeedtick);
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	edd3 7a07 	vldr	s15, [r3, #28]
 800dd94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dd98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dd9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dda0:	ee17 1a90 	vmov	r1, s15
 800dda4:	ee17 0a10 	vmov	r0, s14
 800dda8:	f7fd fee2 	bl	800bb70 <diff_get_Rmotor_values>
 800ddac:	ec53 2b10 	vmov	r2, r3, d0
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	f7f2 ff10 	bl	8000bd8 <__aeabi_d2f>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	65bb      	str	r3, [r7, #88]	; 0x58

	}

	float correctionrange = speed_ctl->correctionRange; int correctionenable = speed_ctl->correctionEnable; int needscorrection = 0;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc0:	ee07 3a90 	vmov	s15, r3
 800ddc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddc8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd0:	627b      	str	r3, [r7, #36]	; 0x24
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	657b      	str	r3, [r7, #84]	; 0x54
	float orientation = speed_ctl->requestedOrientation; float orientationrange = speed_ctl->requestedOrientationRange; int orientationdirection = 0;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	6a1b      	ldr	r3, [r3, #32]
 800ddda:	623b      	str	r3, [r7, #32]
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde0:	61fb      	str	r3, [r7, #28]
 800dde2:	2300      	movs	r3, #0
 800dde4:	653b      	str	r3, [r7, #80]	; 0x50
	float lowerOrientation = abs(orientation) - abs(orientationrange);
 800dde6:	edd7 7a08 	vldr	s15, [r7, #32]
 800ddea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddee:	ee17 3a90 	vmov	r3, s15
 800ddf2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800ddf6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800ddfa:	edd7 7a07 	vldr	s15, [r7, #28]
 800ddfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de02:	ee17 3a90 	vmov	r3, s15
 800de06:	2b00      	cmp	r3, #0
 800de08:	bfb8      	it	lt
 800de0a:	425b      	neglt	r3, r3
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	ee07 3a90 	vmov	s15, r3
 800de12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de16:	edc7 7a06 	vstr	s15, [r7, #24]

	switch(speed_ctl->runStatus){
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de1e:	2b00      	cmp	r3, #0
 800de20:	f000 813e 	beq.w	800e0a0 <speed_control_run+0x4b0>
 800de24:	2b01      	cmp	r3, #1
 800de26:	f040 8151 	bne.w	800e0cc <speed_control_run+0x4dc>


		case STATUS_PATH_RUNNING:

			switch(speed_ctl->pathMode){
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d003      	beq.n	800de3a <speed_control_run+0x24a>
 800de32:	2b02      	cmp	r3, #2
 800de34:	f000 80f5 	beq.w	800e022 <speed_control_run+0x432>
						speed_control_path_end(speed_ctl);
						speed_ctl->endpathtilterr = 0;
					}
					break;
			}
			break;
 800de38:	e148      	b.n	800e0cc <speed_control_run+0x4dc>
					angle_subcontrol_set_status(speed_ctl->angle_subctl,ANGLE_STATUS_RUNNING_WHEEL);
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	2102      	movs	r1, #2
 800de40:	4618      	mov	r0, r3
 800de42:	f7ff f9bd 	bl	800d1c0 <angle_subcontrol_set_status>
					angle_subcontrol_set_angle(angle_ctl,speed_ctl->requestedAngle);
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	edd3 7a07 	vldr	s15, [r3, #28]
 800de4c:	eeb0 0a67 	vmov.f32	s0, s15
 800de50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800de52:	f7ff f9e6 	bl	800d222 <angle_subcontrol_set_angle>
					if       ((speed_ctl->requestedAngle > 0 && speed_ctl->requestedIdealMaxSpeed > 0)
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	edd3 7a07 	vldr	s15, [r3, #28]
 800de5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de64:	dd07      	ble.n	800de76 <speed_control_run+0x286>
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	edd3 7a06 	vldr	s15, [r3, #24]
 800de6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de74:	dc0f      	bgt.n	800de96 <speed_control_run+0x2a6>
					      ||  (speed_ctl->requestedAngle < 0 && speed_ctl->requestedIdealMaxSpeed < 0)){
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	edd3 7a07 	vldr	s15, [r3, #28]
 800de7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de84:	d50a      	bpl.n	800de9c <speed_control_run+0x2ac>
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	edd3 7a06 	vldr	s15, [r3, #24]
 800de8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de94:	d502      	bpl.n	800de9c <speed_control_run+0x2ac>
						orientationdirection = 1;
 800de96:	2301      	movs	r3, #1
 800de98:	653b      	str	r3, [r7, #80]	; 0x50
 800de9a:	e022      	b.n	800dee2 <speed_control_run+0x2f2>
					}else if ((speed_ctl->requestedAngle < 0 && speed_ctl->requestedIdealMaxSpeed > 0)
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	edd3 7a07 	vldr	s15, [r3, #28]
 800dea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deaa:	d507      	bpl.n	800debc <speed_control_run+0x2cc>
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	edd3 7a06 	vldr	s15, [r3, #24]
 800deb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800deb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deba:	dc0f      	bgt.n	800dedc <speed_control_run+0x2ec>
						  ||  (speed_ctl->requestedAngle > 0 && speed_ctl->requestedIdealMaxSpeed < 0)){
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	edd3 7a07 	vldr	s15, [r3, #28]
 800dec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deca:	dd0a      	ble.n	800dee2 <speed_control_run+0x2f2>
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	edd3 7a06 	vldr	s15, [r3, #24]
 800ded2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ded6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deda:	d502      	bpl.n	800dee2 <speed_control_run+0x2f2>
						orientationdirection = -1;
 800dedc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dee0:	653b      	str	r3, [r7, #80]	; 0x50
					if (abs(orientationdirection)){
 800dee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f000 80d9 	beq.w	800e09c <speed_control_run+0x4ac>
						if((lpulseprogress < 1 && rpulseprogress < 1)){
 800deea:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800deee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800def2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800def6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defa:	d51f      	bpl.n	800df3c <speed_control_run+0x34c>
 800defc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800df00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df04:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df0c:	d516      	bpl.n	800df3c <speed_control_run+0x34c>
							speed_subcontrol_set_speed(Lmotor_ctl,ldiffspeed/1.5);
 800df0e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800df12:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800df16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800df1a:	eeb0 0a47 	vmov.f32	s0, s14
 800df1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df20:	f7ff fb4c 	bl	800d5bc <speed_subcontrol_set_speed>
							speed_subcontrol_set_speed(Rmotor_ctl,rdiffspeed/1.5);
 800df24:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800df28:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800df2c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800df30:	eeb0 0a47 	vmov.f32	s0, s14
 800df34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800df36:	f7ff fb41 	bl	800d5bc <speed_subcontrol_set_speed>
 800df3a:	e071      	b.n	800e020 <speed_control_run+0x430>
							if(abs(angle_subcontrol_get_gyrosum(angle_ctl)) < (lowerOrientation)) needscorrection = 1;
 800df3c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df3e:	f7ff fa39 	bl	800d3b4 <angle_subcontrol_get_gyrosum>
 800df42:	eef0 7a40 	vmov.f32	s15, s0
 800df46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df4a:	ee17 3a90 	vmov	r3, s15
 800df4e:	2b00      	cmp	r3, #0
 800df50:	bfb8      	it	lt
 800df52:	425b      	neglt	r3, r3
 800df54:	ee07 3a90 	vmov	s15, r3
 800df58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df5c:	ed97 7a06 	vldr	s14, [r7, #24]
 800df60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df68:	dd02      	ble.n	800df70 <speed_control_run+0x380>
 800df6a:	2301      	movs	r3, #1
 800df6c:	657b      	str	r3, [r7, #84]	; 0x54
 800df6e:	e001      	b.n	800df74 <speed_control_run+0x384>
							else needscorrection = 0;
 800df70:	2300      	movs	r3, #0
 800df72:	657b      	str	r3, [r7, #84]	; 0x54
							if(abs(angle_subcontrol_get_gyrosum(angle_ctl)) < (lowerOrientation) && correctionenable && needscorrection){
 800df74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800df76:	f7ff fa1d 	bl	800d3b4 <angle_subcontrol_get_gyrosum>
 800df7a:	eef0 7a40 	vmov.f32	s15, s0
 800df7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df82:	ee17 3a90 	vmov	r3, s15
 800df86:	2b00      	cmp	r3, #0
 800df88:	bfb8      	it	lt
 800df8a:	425b      	neglt	r3, r3
 800df8c:	ee07 3a90 	vmov	s15, r3
 800df90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df94:	ed97 7a06 	vldr	s14, [r7, #24]
 800df98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfa0:	dd1c      	ble.n	800dfdc <speed_control_run+0x3ec>
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d019      	beq.n	800dfdc <speed_control_run+0x3ec>
 800dfa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d016      	beq.n	800dfdc <speed_control_run+0x3ec>
								speed_subcontrol_set_speed(Lmotor_ctl,ldiffspeed/2);
 800dfae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800dfb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800dfb6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dfba:	eeb0 0a47 	vmov.f32	s0, s14
 800dfbe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dfc0:	f7ff fafc 	bl	800d5bc <speed_subcontrol_set_speed>
								speed_subcontrol_set_speed(Rmotor_ctl,rdiffspeed/2);
 800dfc4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800dfc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800dfcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800dfd0:	eeb0 0a47 	vmov.f32	s0, s14
 800dfd4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800dfd6:	f7ff faf1 	bl	800d5bc <speed_subcontrol_set_speed>
 800dfda:	e021      	b.n	800e020 <speed_control_run+0x430>
								speed_control_path_end(speed_ctl);
 800dfdc:	6978      	ldr	r0, [r7, #20]
 800dfde:	f7ff fcef 	bl	800d9c0 <speed_control_path_end>
								if ( correctionenable == 0 || needscorrection == 0) speed_ctl->endpathtilterr = 0; // use encoder to turn and perfect then angle is set to 0
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <speed_control_run+0x3fe>
 800dfe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d104      	bne.n	800dff8 <speed_control_run+0x408>
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f04f 0200 	mov.w	r2, #0
 800dff4:	669a      	str	r2, [r3, #104]	; 0x68
 800dff6:	e013      	b.n	800e020 <speed_control_run+0x430>
								else speed_ctl->endpathtilterr = angle_subcontrol_get_gyrosum(angle_ctl) - (orientationdirection*lowerOrientation);  // if we use gyro then get error
 800dff8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800dffa:	f7ff f9db 	bl	800d3b4 <angle_subcontrol_get_gyrosum>
 800dffe:	eef0 6a40 	vmov.f32	s13, s0
 800e002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e004:	ee07 3a90 	vmov	s15, r3
 800e008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e00c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e014:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
					break;
 800e01e:	e03d      	b.n	800e09c <speed_control_run+0x4ac>
 800e020:	e03c      	b.n	800e09c <speed_control_run+0x4ac>
					if (correctionenable== 0){
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	2b00      	cmp	r3, #0
 800e026:	d106      	bne.n	800e036 <speed_control_run+0x446>
						angle_subcontrol_set_status(speed_ctl->angle_subctl,ANGLE_STATUS_RUNNING_WHEEL);
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	2102      	movs	r1, #2
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff f8c6 	bl	800d1c0 <angle_subcontrol_set_status>
 800e034:	e005      	b.n	800e042 <speed_control_run+0x452>
						angle_subcontrol_set_status(speed_ctl->angle_subctl,ANGLE_STATUS_RUNNING_LINE);
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	689b      	ldr	r3, [r3, #8]
 800e03a:	2101      	movs	r1, #1
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7ff f8bf 	bl	800d1c0 <angle_subcontrol_set_status>
					angle_subcontrol_set_angle(angle_ctl,speed_ctl->requestedAngle);
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	edd3 7a07 	vldr	s15, [r3, #28]
 800e048:	eeb0 0a67 	vmov.f32	s0, s15
 800e04c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e04e:	f7ff f8e8 	bl	800d222 <angle_subcontrol_set_angle>
					if((lpulseprogress < 1 && rpulseprogress < 1)){
 800e052:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800e056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e05a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e062:	d513      	bpl.n	800e08c <speed_control_run+0x49c>
 800e064:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800e068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e06c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e074:	d50a      	bpl.n	800e08c <speed_control_run+0x49c>
						speed_subcontrol_set_speed(Lmotor_ctl,ldiffspeed);
 800e076:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800e07a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e07c:	f7ff fa9e 	bl	800d5bc <speed_subcontrol_set_speed>
						speed_subcontrol_set_speed(Rmotor_ctl,rdiffspeed);
 800e080:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 800e084:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e086:	f7ff fa99 	bl	800d5bc <speed_subcontrol_set_speed>
					break;
 800e08a:	e008      	b.n	800e09e <speed_control_run+0x4ae>
						speed_control_path_end(speed_ctl);
 800e08c:	6978      	ldr	r0, [r7, #20]
 800e08e:	f7ff fc97 	bl	800d9c0 <speed_control_path_end>
						speed_ctl->endpathtilterr = 0;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f04f 0200 	mov.w	r2, #0
 800e098:	669a      	str	r2, [r3, #104]	; 0x68
					break;
 800e09a:	e000      	b.n	800e09e <speed_control_run+0x4ae>
					break;
 800e09c:	bf00      	nop
			break;
 800e09e:	e015      	b.n	800e0cc <speed_control_run+0x4dc>

		case STATUS_FREE:
			// set 0 if there is no command or command is executed
			angle_subcontrol_set_status(speed_ctl->angle_subctl,ANGLE_STATUS_NOT_RUNNING);
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff f88a 	bl	800d1c0 <angle_subcontrol_set_status>
			angle_subcontrol_set_angle(angle_ctl,0);
 800e0ac:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800e104 <speed_control_run+0x514>
 800e0b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e0b2:	f7ff f8b6 	bl	800d222 <angle_subcontrol_set_angle>

			speed_subcontrol_set_speed(Lmotor_ctl,0);
 800e0b6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800e104 <speed_control_run+0x514>
 800e0ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e0bc:	f7ff fa7e 	bl	800d5bc <speed_subcontrol_set_speed>
			speed_subcontrol_set_speed(Rmotor_ctl,0);
 800e0c0:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e104 <speed_control_run+0x514>
 800e0c4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e0c6:	f7ff fa79 	bl	800d5bc <speed_subcontrol_set_speed>

			break;
 800e0ca:	bf00      	nop
	}

	angle_subcontrol_run(angle_ctl,speed_ctl->requestedIdealMaxSpeed, correctionrange);
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	edd3 7a06 	vldr	s15, [r3, #24]
 800e0d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e0d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e0da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0de:	ee17 2a90 	vmov	r2, s15
 800e0e2:	ee17 1a10 	vmov	r1, s14
 800e0e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e0e8:	f7ff f976 	bl	800d3d8 <angle_subcontrol_run>
	speed_subcontrol_run(Lmotor_ctl);
 800e0ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e0ee:	f7ff fa74 	bl	800d5da <speed_subcontrol_run>
	speed_subcontrol_run(Rmotor_ctl);
 800e0f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e0f4:	f7ff fa71 	bl	800d5da <speed_subcontrol_run>

}
 800e0f8:	bf00      	nop
 800e0fa:	3768      	adds	r7, #104	; 0x68
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e102:	bf00      	nop
 800e104:	00000000 	.word	0x00000000

0800e108 <vehicleservo_radian>:

#include "vehicleservo.h"



double vehicleservo_radian(float degree){
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree/360)*(M_PI*2);
 800e112:	edd7 7a01 	vldr	s15, [r7, #4]
 800e116:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e150 <vehicleservo_radian+0x48>
 800e11a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e11e:	ee16 0a90 	vmov	r0, s13
 800e122:	f7f2 fa09 	bl	8000538 <__aeabi_f2d>
 800e126:	a308      	add	r3, pc, #32	; (adr r3, 800e148 <vehicleservo_radian+0x40>)
 800e128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12c:	f7f2 fa5c 	bl	80005e8 <__aeabi_dmul>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	ec43 2b17 	vmov	d7, r2, r3
};
 800e138:	eeb0 0a47 	vmov.f32	s0, s14
 800e13c:	eef0 0a67 	vmov.f32	s1, s15
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	54442d18 	.word	0x54442d18
 800e14c:	401921fb 	.word	0x401921fb
 800e150:	43b40000 	.word	0x43b40000
 800e154:	00000000 	.word	0x00000000

0800e158 <vehicleservo_degree>:

double vehicleservo_degree(float radian){
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (radian/(M_PI*2)) * 360;
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7f2 f9e8 	bl	8000538 <__aeabi_f2d>
 800e168:	a30e      	add	r3, pc, #56	; (adr r3, 800e1a4 <vehicleservo_degree+0x4c>)
 800e16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16e:	f7f2 fb65 	bl	800083c <__aeabi_ddiv>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	4610      	mov	r0, r2
 800e178:	4619      	mov	r1, r3
 800e17a:	f04f 0200 	mov.w	r2, #0
 800e17e:	4b08      	ldr	r3, [pc, #32]	; (800e1a0 <vehicleservo_degree+0x48>)
 800e180:	f7f2 fa32 	bl	80005e8 <__aeabi_dmul>
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	ec43 2b17 	vmov	d7, r2, r3
};
 800e18c:	eeb0 0a47 	vmov.f32	s0, s14
 800e190:	eef0 0a67 	vmov.f32	s1, s15
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	f3af 8000 	nop.w
 800e1a0:	40768000 	.word	0x40768000
 800e1a4:	54442d18 	.word	0x54442d18
 800e1a8:	401921fb 	.word	0x401921fb
 800e1ac:	00000000 	.word	0x00000000

0800e1b0 <_vehicleservo_max_shaft_range_l>:

//assume max R is 0; get most left
double _vehicleservo_max_shaft_range_l(void){
 800e1b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e1b4:	b086      	sub	sp, #24
 800e1b6:	af00      	add	r7, sp, #0
	double h = SERVO_SHAFT;
 800e1b8:	f04f 0200 	mov.w	r2, #0
 800e1bc:	4b40      	ldr	r3, [pc, #256]	; (800e2c0 <_vehicleservo_max_shaft_range_l+0x110>)
 800e1be:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double r = SERVO_RADIUS;
 800e1c2:	f04f 0200 	mov.w	r2, #0
 800e1c6:	4b3f      	ldr	r3, [pc, #252]	; (800e2c4 <_vehicleservo_max_shaft_range_l+0x114>)
 800e1c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double o = r * sin(M_PI - vehicleservo_radian(SERVO_MAX_L_SERVO_ANGLE));
 800e1cc:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800e2c8 <_vehicleservo_max_shaft_range_l+0x118>
 800e1d0:	f7ff ff9a 	bl	800e108 <vehicleservo_radian>
 800e1d4:	ec53 2b10 	vmov	r2, r3, d0
 800e1d8:	a137      	add	r1, pc, #220	; (adr r1, 800e2b8 <_vehicleservo_max_shaft_range_l+0x108>)
 800e1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1de:	f7f2 f84b 	bl	8000278 <__aeabi_dsub>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	ec43 2b17 	vmov	d7, r2, r3
 800e1ea:	eeb0 0a47 	vmov.f32	s0, s14
 800e1ee:	eef0 0a67 	vmov.f32	s1, s15
 800e1f2:	f001 f899 	bl	800f328 <sin>
 800e1f6:	ec53 2b10 	vmov	r2, r3, d0
 800e1fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e1fe:	f7f2 f9f3 	bl	80005e8 <__aeabi_dmul>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	e9c7 2300 	strd	r2, r3, [r7]
	return sqrt(h*h - o*o) + sqrt(r*r - o*o);
 800e20a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e20e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e212:	f7f2 f9e9 	bl	80005e8 <__aeabi_dmul>
 800e216:	4602      	mov	r2, r0
 800e218:	460b      	mov	r3, r1
 800e21a:	4614      	mov	r4, r2
 800e21c:	461d      	mov	r5, r3
 800e21e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e222:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e226:	f7f2 f9df 	bl	80005e8 <__aeabi_dmul>
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	4620      	mov	r0, r4
 800e230:	4629      	mov	r1, r5
 800e232:	f7f2 f821 	bl	8000278 <__aeabi_dsub>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	ec43 2b17 	vmov	d7, r2, r3
 800e23e:	eeb0 0a47 	vmov.f32	s0, s14
 800e242:	eef0 0a67 	vmov.f32	s1, s15
 800e246:	f001 f92d 	bl	800f4a4 <sqrt>
 800e24a:	ec59 8b10 	vmov	r8, r9, d0
 800e24e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e256:	f7f2 f9c7 	bl	80005e8 <__aeabi_dmul>
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	4614      	mov	r4, r2
 800e260:	461d      	mov	r5, r3
 800e262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e266:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e26a:	f7f2 f9bd 	bl	80005e8 <__aeabi_dmul>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	4620      	mov	r0, r4
 800e274:	4629      	mov	r1, r5
 800e276:	f7f1 ffff 	bl	8000278 <__aeabi_dsub>
 800e27a:	4602      	mov	r2, r0
 800e27c:	460b      	mov	r3, r1
 800e27e:	ec43 2b17 	vmov	d7, r2, r3
 800e282:	eeb0 0a47 	vmov.f32	s0, s14
 800e286:	eef0 0a67 	vmov.f32	s1, s15
 800e28a:	f001 f90b 	bl	800f4a4 <sqrt>
 800e28e:	ec53 2b10 	vmov	r2, r3, d0
 800e292:	4640      	mov	r0, r8
 800e294:	4649      	mov	r1, r9
 800e296:	f7f1 fff1 	bl	800027c <__adddf3>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	ec43 2b17 	vmov	d7, r2, r3
};
 800e2a2:	eeb0 0a47 	vmov.f32	s0, s14
 800e2a6:	eef0 0a67 	vmov.f32	s1, s15
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e2b2:	bf00      	nop
 800e2b4:	f3af 8000 	nop.w
 800e2b8:	54442d18 	.word	0x54442d18
 800e2bc:	400921fb 	.word	0x400921fb
 800e2c0:	404e0000 	.word	0x404e0000
 800e2c4:	40340000 	.word	0x40340000
 800e2c8:	42fa0000 	.word	0x42fa0000

0800e2cc <_vehicleservo_max_shaft_range_r>:
double _vehicleservo_max_shaft_range_r(void){
 800e2cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e2d0:	b086      	sub	sp, #24
 800e2d2:	af00      	add	r7, sp, #0
	double h = SERVO_SHAFT;
 800e2d4:	f04f 0200 	mov.w	r2, #0
 800e2d8:	4b39      	ldr	r3, [pc, #228]	; (800e3c0 <_vehicleservo_max_shaft_range_r+0xf4>)
 800e2da:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double r = SERVO_RADIUS;
 800e2de:	f04f 0200 	mov.w	r2, #0
 800e2e2:	4b38      	ldr	r3, [pc, #224]	; (800e3c4 <_vehicleservo_max_shaft_range_r+0xf8>)
 800e2e4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double o = r * sin(vehicleservo_radian(SERVO_MAX_R_SERVO_ANGLE));
 800e2e8:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800e3c8 <_vehicleservo_max_shaft_range_r+0xfc>
 800e2ec:	f7ff ff0c 	bl	800e108 <vehicleservo_radian>
 800e2f0:	eeb0 7a40 	vmov.f32	s14, s0
 800e2f4:	eef0 7a60 	vmov.f32	s15, s1
 800e2f8:	eeb0 0a47 	vmov.f32	s0, s14
 800e2fc:	eef0 0a67 	vmov.f32	s1, s15
 800e300:	f001 f812 	bl	800f328 <sin>
 800e304:	ec53 2b10 	vmov	r2, r3, d0
 800e308:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e30c:	f7f2 f96c 	bl	80005e8 <__aeabi_dmul>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	e9c7 2300 	strd	r2, r3, [r7]
	return sqrt(h*h - o*o) - sqrt(r*r - o*o);
 800e318:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e31c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e320:	f7f2 f962 	bl	80005e8 <__aeabi_dmul>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	4614      	mov	r4, r2
 800e32a:	461d      	mov	r5, r3
 800e32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e330:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e334:	f7f2 f958 	bl	80005e8 <__aeabi_dmul>
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	4620      	mov	r0, r4
 800e33e:	4629      	mov	r1, r5
 800e340:	f7f1 ff9a 	bl	8000278 <__aeabi_dsub>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	ec43 2b17 	vmov	d7, r2, r3
 800e34c:	eeb0 0a47 	vmov.f32	s0, s14
 800e350:	eef0 0a67 	vmov.f32	s1, s15
 800e354:	f001 f8a6 	bl	800f4a4 <sqrt>
 800e358:	ec59 8b10 	vmov	r8, r9, d0
 800e35c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e360:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e364:	f7f2 f940 	bl	80005e8 <__aeabi_dmul>
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	4614      	mov	r4, r2
 800e36e:	461d      	mov	r5, r3
 800e370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e374:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e378:	f7f2 f936 	bl	80005e8 <__aeabi_dmul>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4620      	mov	r0, r4
 800e382:	4629      	mov	r1, r5
 800e384:	f7f1 ff78 	bl	8000278 <__aeabi_dsub>
 800e388:	4602      	mov	r2, r0
 800e38a:	460b      	mov	r3, r1
 800e38c:	ec43 2b17 	vmov	d7, r2, r3
 800e390:	eeb0 0a47 	vmov.f32	s0, s14
 800e394:	eef0 0a67 	vmov.f32	s1, s15
 800e398:	f001 f884 	bl	800f4a4 <sqrt>
 800e39c:	ec53 2b10 	vmov	r2, r3, d0
 800e3a0:	4640      	mov	r0, r8
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	f7f1 ff68 	bl	8000278 <__aeabi_dsub>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	ec43 2b17 	vmov	d7, r2, r3
};
 800e3b0:	eeb0 0a47 	vmov.f32	s0, s14
 800e3b4:	eef0 0a67 	vmov.f32	s1, s15
 800e3b8:	3718      	adds	r7, #24
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e3c0:	404e0000 	.word	0x404e0000
 800e3c4:	40340000 	.word	0x40340000
 800e3c8:	00000000 	.word	0x00000000

0800e3cc <vehicleservo_get_required_shaft_shift>:



double vehicleservo_get_required_shaft_shift(vehicleservo_control* vehicleservo_ctl, double turn_degree){
 800e3cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e3d0:	b08a      	sub	sp, #40	; 0x28
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	60f8      	str	r0, [r7, #12]
 800e3d6:	ed87 0b00 	vstr	d0, [r7]
	double angle_range = SERVO_MAX_R_WHEEL_ANGLE - SERVO_MAX_L_WHEEL_ANGLE ;
 800e3da:	f04f 0200 	mov.w	r2, #0
 800e3de:	4b2e      	ldr	r3, [pc, #184]	; (800e498 <vehicleservo_get_required_shaft_shift+0xcc>)
 800e3e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle_turn =  turn_degree - SERVO_MAX_L_WHEEL_ANGLE;
 800e3e4:	f04f 0200 	mov.w	r2, #0
 800e3e8:	4b2c      	ldr	r3, [pc, #176]	; (800e49c <vehicleservo_get_required_shaft_shift+0xd0>)
 800e3ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3ee:	f7f1 ff45 	bl	800027c <__adddf3>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double turn_ratio = (angle_turn/angle_range);
 800e3fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e3fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e402:	f7f2 fa1b 	bl	800083c <__aeabi_ddiv>
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if(turn_ratio > 1) turn_ratio = 1;
 800e40e:	f04f 0200 	mov.w	r2, #0
 800e412:	4b23      	ldr	r3, [pc, #140]	; (800e4a0 <vehicleservo_get_required_shaft_shift+0xd4>)
 800e414:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e418:	f7f2 fb76 	bl	8000b08 <__aeabi_dcmpgt>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d004      	beq.n	800e42c <vehicleservo_get_required_shaft_shift+0x60>
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	4b1e      	ldr	r3, [pc, #120]	; (800e4a0 <vehicleservo_get_required_shaft_shift+0xd4>)
 800e428:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return (vehicleservo_ctl->max_shaft_range_r + (1 - turn_ratio) * (vehicleservo_ctl->max_shaft_range_l - vehicleservo_ctl->max_shaft_range_r));
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	4618      	mov	r0, r3
 800e432:	f7f2 f881 	bl	8000538 <__aeabi_f2d>
 800e436:	4604      	mov	r4, r0
 800e438:	460d      	mov	r5, r1
 800e43a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e43e:	f04f 0000 	mov.w	r0, #0
 800e442:	4917      	ldr	r1, [pc, #92]	; (800e4a0 <vehicleservo_get_required_shaft_shift+0xd4>)
 800e444:	f7f1 ff18 	bl	8000278 <__aeabi_dsub>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	4690      	mov	r8, r2
 800e44e:	4699      	mov	r9, r3
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	ed93 7a00 	vldr	s14, [r3]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	edd3 7a01 	vldr	s15, [r3, #4]
 800e45c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e460:	ee17 0a90 	vmov	r0, s15
 800e464:	f7f2 f868 	bl	8000538 <__aeabi_f2d>
 800e468:	4602      	mov	r2, r0
 800e46a:	460b      	mov	r3, r1
 800e46c:	4640      	mov	r0, r8
 800e46e:	4649      	mov	r1, r9
 800e470:	f7f2 f8ba 	bl	80005e8 <__aeabi_dmul>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	4620      	mov	r0, r4
 800e47a:	4629      	mov	r1, r5
 800e47c:	f7f1 fefe 	bl	800027c <__adddf3>
 800e480:	4602      	mov	r2, r0
 800e482:	460b      	mov	r3, r1
 800e484:	ec43 2b17 	vmov	d7, r2, r3
};
 800e488:	eeb0 0a47 	vmov.f32	s0, s14
 800e48c:	eef0 0a67 	vmov.f32	s1, s15
 800e490:	3728      	adds	r7, #40	; 0x28
 800e492:	46bd      	mov	sp, r7
 800e494:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e498:	404e0000 	.word	0x404e0000
 800e49c:	403e0000 	.word	0x403e0000
 800e4a0:	3ff00000 	.word	0x3ff00000
 800e4a4:	00000000 	.word	0x00000000

0800e4a8 <vehicleservo_get_required_servo_angle>:

double vehicleservo_get_required_servo_angle (vehicleservo_control* vehicleservo_ctl, double shaft_shift){
 800e4a8:	b5b0      	push	{r4, r5, r7, lr}
 800e4aa:	b08a      	sub	sp, #40	; 0x28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	ed87 0b00 	vstr	d0, [r7]
	double h =  SERVO_SHAFT;
 800e4b4:	f04f 0200 	mov.w	r2, #0
 800e4b8:	4b35      	ldr	r3, [pc, #212]	; (800e590 <vehicleservo_get_required_servo_angle+0xe8>)
 800e4ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double ss = shaft_shift;
 800e4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double  r = SERVO_RADIUS;
 800e4c6:	f04f 0200 	mov.w	r2, #0
 800e4ca:	4b32      	ldr	r3, [pc, #200]	; (800e594 <vehicleservo_get_required_servo_angle+0xec>)
 800e4cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return (M_PI - acos((-(h*h)+(ss*ss)+(r*r))/(2*ss*r)));
 800e4d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e4d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e4d8:	f7f2 f886 	bl	80005e8 <__aeabi_dmul>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	4614      	mov	r4, r2
 800e4e2:	461d      	mov	r5, r3
 800e4e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e4e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e4ec:	f7f2 f87c 	bl	80005e8 <__aeabi_dmul>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	f7f1 febe 	bl	8000278 <__aeabi_dsub>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	4614      	mov	r4, r2
 800e502:	461d      	mov	r5, r3
 800e504:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e508:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e50c:	f7f2 f86c 	bl	80005e8 <__aeabi_dmul>
 800e510:	4602      	mov	r2, r0
 800e512:	460b      	mov	r3, r1
 800e514:	4620      	mov	r0, r4
 800e516:	4629      	mov	r1, r5
 800e518:	f7f1 feb0 	bl	800027c <__adddf3>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	4614      	mov	r4, r2
 800e522:	461d      	mov	r5, r3
 800e524:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	f7f1 fea6 	bl	800027c <__adddf3>
 800e530:	4602      	mov	r2, r0
 800e532:	460b      	mov	r3, r1
 800e534:	4610      	mov	r0, r2
 800e536:	4619      	mov	r1, r3
 800e538:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e53c:	f7f2 f854 	bl	80005e8 <__aeabi_dmul>
 800e540:	4602      	mov	r2, r0
 800e542:	460b      	mov	r3, r1
 800e544:	4620      	mov	r0, r4
 800e546:	4629      	mov	r1, r5
 800e548:	f7f2 f978 	bl	800083c <__aeabi_ddiv>
 800e54c:	4602      	mov	r2, r0
 800e54e:	460b      	mov	r3, r1
 800e550:	ec43 2b17 	vmov	d7, r2, r3
 800e554:	eeb0 0a47 	vmov.f32	s0, s14
 800e558:	eef0 0a67 	vmov.f32	s1, s15
 800e55c:	f000 ff68 	bl	800f430 <acos>
 800e560:	ec53 2b10 	vmov	r2, r3, d0
 800e564:	a108      	add	r1, pc, #32	; (adr r1, 800e588 <vehicleservo_get_required_servo_angle+0xe0>)
 800e566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e56a:	f7f1 fe85 	bl	8000278 <__aeabi_dsub>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	ec43 2b17 	vmov	d7, r2, r3
};
 800e576:	eeb0 0a47 	vmov.f32	s0, s14
 800e57a:	eef0 0a67 	vmov.f32	s1, s15
 800e57e:	3728      	adds	r7, #40	; 0x28
 800e580:	46bd      	mov	sp, r7
 800e582:	bdb0      	pop	{r4, r5, r7, pc}
 800e584:	f3af 8000 	nop.w
 800e588:	54442d18 	.word	0x54442d18
 800e58c:	400921fb 	.word	0x400921fb
 800e590:	404e0000 	.word	0x404e0000
 800e594:	40340000 	.word	0x40340000

0800e598 <vehicleservo_get_required_servo_pwm>:


double vehicleservo_get_required_servo_pwm (vehicleservo_control* vehicleservo_ctl, double servo_degree){
 800e598:	b580      	push	{r7, lr}
 800e59a:	b08a      	sub	sp, #40	; 0x28
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	ed87 0b00 	vstr	d0, [r7]
	double angle_range = SERVO_MAX_L_SERVO_ANGLE;
 800e5a4:	f04f 0200 	mov.w	r2, #0
 800e5a8:	4b23      	ldr	r3, [pc, #140]	; (800e638 <vehicleservo_get_required_servo_pwm+0xa0>)
 800e5aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double angle_turn =  servo_degree;
 800e5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double turn_ratio = (angle_turn/angle_range);
 800e5b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e5ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e5be:	f7f2 f93d 	bl	800083c <__aeabi_ddiv>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if(turn_ratio > 1) turn_ratio = 1;
 800e5ca:	f04f 0200 	mov.w	r2, #0
 800e5ce:	4b1b      	ldr	r3, [pc, #108]	; (800e63c <vehicleservo_get_required_servo_pwm+0xa4>)
 800e5d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e5d4:	f7f2 fa98 	bl	8000b08 <__aeabi_dcmpgt>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d004      	beq.n	800e5e8 <vehicleservo_get_required_servo_pwm+0x50>
 800e5de:	f04f 0200 	mov.w	r2, #0
 800e5e2:	4b16      	ldr	r3, [pc, #88]	; (800e63c <vehicleservo_get_required_servo_pwm+0xa4>)
 800e5e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	return (SERVO_MAX_L_PWM +  (1- turn_ratio) * (SERVO_MAX_R_PWM - SERVO_MAX_L_PWM)); //SERVO_MAX_L_PWM +  + ((servo_ratio)*(135))
 800e5e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e5ec:	f04f 0000 	mov.w	r0, #0
 800e5f0:	4912      	ldr	r1, [pc, #72]	; (800e63c <vehicleservo_get_required_servo_pwm+0xa4>)
 800e5f2:	f7f1 fe41 	bl	8000278 <__aeabi_dsub>
 800e5f6:	4602      	mov	r2, r0
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	4610      	mov	r0, r2
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	a30c      	add	r3, pc, #48	; (adr r3, 800e630 <vehicleservo_get_required_servo_pwm+0x98>)
 800e600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e604:	f7f1 fff0 	bl	80005e8 <__aeabi_dmul>
 800e608:	4602      	mov	r2, r0
 800e60a:	460b      	mov	r3, r1
 800e60c:	4610      	mov	r0, r2
 800e60e:	4619      	mov	r1, r3
 800e610:	f04f 0200 	mov.w	r2, #0
 800e614:	4b0a      	ldr	r3, [pc, #40]	; (800e640 <vehicleservo_get_required_servo_pwm+0xa8>)
 800e616:	f7f1 fe31 	bl	800027c <__adddf3>
 800e61a:	4602      	mov	r2, r0
 800e61c:	460b      	mov	r3, r1
 800e61e:	ec43 2b17 	vmov	d7, r2, r3
};
 800e622:	eeb0 0a47 	vmov.f32	s0, s14
 800e626:	eef0 0a67 	vmov.f32	s1, s15
 800e62a:	3728      	adds	r7, #40	; 0x28
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	00000000 	.word	0x00000000
 800e634:	4060e000 	.word	0x4060e000
 800e638:	405f4000 	.word	0x405f4000
 800e63c:	3ff00000 	.word	0x3ff00000
 800e640:	405a4000 	.word	0x405a4000

0800e644 <vehicleservo_get_required_servo_pwm_simple>:

double vehicleservo_get_required_servo_pwm_simple(vehicleservo_control* vehicleservo_ctl, double turn_degree){
 800e644:	b580      	push	{r7, lr}
 800e646:	b08a      	sub	sp, #40	; 0x28
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	ed87 0b00 	vstr	d0, [r7]
	 double shaft_shift = vehicleservo_get_required_shaft_shift(vehicleservo_ctl, turn_degree);
 800e650:	ed97 0b00 	vldr	d0, [r7]
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f7ff feb9 	bl	800e3cc <vehicleservo_get_required_shaft_shift>
 800e65a:	ed87 0b08 	vstr	d0, [r7, #32]
	 double servo_angle = vehicleservo_get_required_servo_angle(vehicleservo_ctl, shaft_shift);
 800e65e:	ed97 0b08 	vldr	d0, [r7, #32]
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f7ff ff20 	bl	800e4a8 <vehicleservo_get_required_servo_angle>
 800e668:	ed87 0b06 	vstr	d0, [r7, #24]
	 double val = vehicleservo_get_required_servo_pwm(vehicleservo_ctl,vehicleservo_degree(servo_angle));
 800e66c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e670:	f7f2 fab2 	bl	8000bd8 <__aeabi_d2f>
 800e674:	4603      	mov	r3, r0
 800e676:	ee00 3a10 	vmov	s0, r3
 800e67a:	f7ff fd6d 	bl	800e158 <vehicleservo_degree>
 800e67e:	eeb0 7a40 	vmov.f32	s14, s0
 800e682:	eef0 7a60 	vmov.f32	s15, s1
 800e686:	eeb0 0a47 	vmov.f32	s0, s14
 800e68a:	eef0 0a67 	vmov.f32	s1, s15
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7ff ff82 	bl	800e598 <vehicleservo_get_required_servo_pwm>
 800e694:	ed87 0b04 	vstr	d0, [r7, #16]
	 return val;
 800e698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e69c:	ec43 2b17 	vmov	d7, r2, r3
};
 800e6a0:	eeb0 0a47 	vmov.f32	s0, s14
 800e6a4:	eef0 0a67 	vmov.f32	s1, s15
 800e6a8:	3728      	adds	r7, #40	; 0x28
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <vehicleservo_init>:

vehicleservo_control* vehicleservo_init(TIM_HandleTypeDef *htim, uint32_t channel){
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b084      	sub	sp, #16
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	6039      	str	r1, [r7, #0]
	vehicleservo_control *vsc = malloc(sizeof(vehicleservo_control));
 800e6b8:	2010      	movs	r0, #16
 800e6ba:	f000 f8b1 	bl	800e820 <malloc>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	60fb      	str	r3, [r7, #12]
	vsc->max_shaft_range_l = _vehicleservo_max_shaft_range_l();
 800e6c2:	f7ff fd75 	bl	800e1b0 <_vehicleservo_max_shaft_range_l>
 800e6c6:	ec53 2b10 	vmov	r2, r3, d0
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	f7f2 fa83 	bl	8000bd8 <__aeabi_d2f>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	601a      	str	r2, [r3, #0]
	vsc->max_shaft_range_r = _vehicleservo_max_shaft_range_r();
 800e6d8:	f7ff fdf8 	bl	800e2cc <_vehicleservo_max_shaft_range_r>
 800e6dc:	ec53 2b10 	vmov	r2, r3, d0
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	f7f2 fa78 	bl	8000bd8 <__aeabi_d2f>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	605a      	str	r2, [r3, #4]
	vsc->timer = htim;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	609a      	str	r2, [r3, #8]
	vsc->channel= channel;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Start(htim, channel);
 800e6fa:	6839      	ldr	r1, [r7, #0]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7f8 f903 	bl	8006908 <HAL_TIM_PWM_Start>

	return vsc;
 800e702:	68fb      	ldr	r3, [r7, #12]
};
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}

0800e70c <vehicleservo_set_wheel_angle>:

void vehicleservo_set_wheel_angle(vehicleservo_control* vehicleservo_ctl, double turn_degree){
 800e70c:	b590      	push	{r4, r7, lr}
 800e70e:	b087      	sub	sp, #28
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	ed87 0b00 	vstr	d0, [r7]
	double pwm_value = vehicleservo_get_required_servo_pwm_simple(vehicleservo_ctl,turn_degree);
 800e718:	ed97 0b00 	vldr	d0, [r7]
 800e71c:	68f8      	ldr	r0, [r7, #12]
 800e71e:	f7ff ff91 	bl	800e644 <vehicleservo_get_required_servo_pwm_simple>
 800e722:	ed87 0b04 	vstr	d0, [r7, #16]

	switch(vehicleservo_ctl->channel){
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	2b0c      	cmp	r3, #12
 800e72c:	d844      	bhi.n	800e7b8 <vehicleservo_set_wheel_angle+0xac>
 800e72e:	a201      	add	r2, pc, #4	; (adr r2, 800e734 <vehicleservo_set_wheel_angle+0x28>)
 800e730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e734:	0800e769 	.word	0x0800e769
 800e738:	0800e7b9 	.word	0x0800e7b9
 800e73c:	0800e7b9 	.word	0x0800e7b9
 800e740:	0800e7b9 	.word	0x0800e7b9
 800e744:	0800e77d 	.word	0x0800e77d
 800e748:	0800e7b9 	.word	0x0800e7b9
 800e74c:	0800e7b9 	.word	0x0800e7b9
 800e750:	0800e7b9 	.word	0x0800e7b9
 800e754:	0800e791 	.word	0x0800e791
 800e758:	0800e7b9 	.word	0x0800e7b9
 800e75c:	0800e7b9 	.word	0x0800e7b9
 800e760:	0800e7b9 	.word	0x0800e7b9
 800e764:	0800e7a5 	.word	0x0800e7a5
		case TIM_CHANNEL_1:
			vehicleservo_ctl->timer->Instance->CCR1 = pwm_value;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	681c      	ldr	r4, [r3, #0]
 800e76e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e772:	f7f2 fa11 	bl	8000b98 <__aeabi_d2uiz>
 800e776:	4603      	mov	r3, r0
 800e778:	6363      	str	r3, [r4, #52]	; 0x34
		break;
 800e77a:	e01d      	b.n	800e7b8 <vehicleservo_set_wheel_angle+0xac>
		case TIM_CHANNEL_2:
			vehicleservo_ctl->timer->Instance->CCR2 = pwm_value;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	681c      	ldr	r4, [r3, #0]
 800e782:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e786:	f7f2 fa07 	bl	8000b98 <__aeabi_d2uiz>
 800e78a:	4603      	mov	r3, r0
 800e78c:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800e78e:	e013      	b.n	800e7b8 <vehicleservo_set_wheel_angle+0xac>
		case TIM_CHANNEL_3:
			vehicleservo_ctl->timer->Instance->CCR3 = pwm_value;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	681c      	ldr	r4, [r3, #0]
 800e796:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e79a:	f7f2 f9fd 	bl	8000b98 <__aeabi_d2uiz>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800e7a2:	e009      	b.n	800e7b8 <vehicleservo_set_wheel_angle+0xac>
		case TIM_CHANNEL_4:
			vehicleservo_ctl->timer->Instance->CCR4 = pwm_value;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	681c      	ldr	r4, [r3, #0]
 800e7aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e7ae:	f7f2 f9f3 	bl	8000b98 <__aeabi_d2uiz>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800e7b6:	bf00      	nop
	}

};
 800e7b8:	bf00      	nop
 800e7ba:	371c      	adds	r7, #28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd90      	pop	{r4, r7, pc}

0800e7c0 <atoi>:
 800e7c0:	220a      	movs	r2, #10
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	f000 ba1a 	b.w	800ebfc <strtol>

0800e7c8 <__errno>:
 800e7c8:	4b01      	ldr	r3, [pc, #4]	; (800e7d0 <__errno+0x8>)
 800e7ca:	6818      	ldr	r0, [r3, #0]
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop
 800e7d0:	20000010 	.word	0x20000010

0800e7d4 <__libc_init_array>:
 800e7d4:	b570      	push	{r4, r5, r6, lr}
 800e7d6:	4d0d      	ldr	r5, [pc, #52]	; (800e80c <__libc_init_array+0x38>)
 800e7d8:	4c0d      	ldr	r4, [pc, #52]	; (800e810 <__libc_init_array+0x3c>)
 800e7da:	1b64      	subs	r4, r4, r5
 800e7dc:	10a4      	asrs	r4, r4, #2
 800e7de:	2600      	movs	r6, #0
 800e7e0:	42a6      	cmp	r6, r4
 800e7e2:	d109      	bne.n	800e7f8 <__libc_init_array+0x24>
 800e7e4:	4d0b      	ldr	r5, [pc, #44]	; (800e814 <__libc_init_array+0x40>)
 800e7e6:	4c0c      	ldr	r4, [pc, #48]	; (800e818 <__libc_init_array+0x44>)
 800e7e8:	f002 fb68 	bl	8010ebc <_init>
 800e7ec:	1b64      	subs	r4, r4, r5
 800e7ee:	10a4      	asrs	r4, r4, #2
 800e7f0:	2600      	movs	r6, #0
 800e7f2:	42a6      	cmp	r6, r4
 800e7f4:	d105      	bne.n	800e802 <__libc_init_array+0x2e>
 800e7f6:	bd70      	pop	{r4, r5, r6, pc}
 800e7f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7fc:	4798      	blx	r3
 800e7fe:	3601      	adds	r6, #1
 800e800:	e7ee      	b.n	800e7e0 <__libc_init_array+0xc>
 800e802:	f855 3b04 	ldr.w	r3, [r5], #4
 800e806:	4798      	blx	r3
 800e808:	3601      	adds	r6, #1
 800e80a:	e7f2      	b.n	800e7f2 <__libc_init_array+0x1e>
 800e80c:	08011e98 	.word	0x08011e98
 800e810:	08011e98 	.word	0x08011e98
 800e814:	08011e98 	.word	0x08011e98
 800e818:	08011e9c 	.word	0x08011e9c

0800e81c <__retarget_lock_acquire_recursive>:
 800e81c:	4770      	bx	lr

0800e81e <__retarget_lock_release_recursive>:
 800e81e:	4770      	bx	lr

0800e820 <malloc>:
 800e820:	4b02      	ldr	r3, [pc, #8]	; (800e82c <malloc+0xc>)
 800e822:	4601      	mov	r1, r0
 800e824:	6818      	ldr	r0, [r3, #0]
 800e826:	f000 b871 	b.w	800e90c <_malloc_r>
 800e82a:	bf00      	nop
 800e82c:	20000010 	.word	0x20000010

0800e830 <free>:
 800e830:	4b02      	ldr	r3, [pc, #8]	; (800e83c <free+0xc>)
 800e832:	4601      	mov	r1, r0
 800e834:	6818      	ldr	r0, [r3, #0]
 800e836:	f000 b819 	b.w	800e86c <_free_r>
 800e83a:	bf00      	nop
 800e83c:	20000010 	.word	0x20000010

0800e840 <memcpy>:
 800e840:	440a      	add	r2, r1
 800e842:	4291      	cmp	r1, r2
 800e844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e848:	d100      	bne.n	800e84c <memcpy+0xc>
 800e84a:	4770      	bx	lr
 800e84c:	b510      	push	{r4, lr}
 800e84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e852:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e856:	4291      	cmp	r1, r2
 800e858:	d1f9      	bne.n	800e84e <memcpy+0xe>
 800e85a:	bd10      	pop	{r4, pc}

0800e85c <memset>:
 800e85c:	4402      	add	r2, r0
 800e85e:	4603      	mov	r3, r0
 800e860:	4293      	cmp	r3, r2
 800e862:	d100      	bne.n	800e866 <memset+0xa>
 800e864:	4770      	bx	lr
 800e866:	f803 1b01 	strb.w	r1, [r3], #1
 800e86a:	e7f9      	b.n	800e860 <memset+0x4>

0800e86c <_free_r>:
 800e86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e86e:	2900      	cmp	r1, #0
 800e870:	d048      	beq.n	800e904 <_free_r+0x98>
 800e872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e876:	9001      	str	r0, [sp, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f1a1 0404 	sub.w	r4, r1, #4
 800e87e:	bfb8      	it	lt
 800e880:	18e4      	addlt	r4, r4, r3
 800e882:	f000 f9c5 	bl	800ec10 <__malloc_lock>
 800e886:	4a20      	ldr	r2, [pc, #128]	; (800e908 <_free_r+0x9c>)
 800e888:	9801      	ldr	r0, [sp, #4]
 800e88a:	6813      	ldr	r3, [r2, #0]
 800e88c:	4615      	mov	r5, r2
 800e88e:	b933      	cbnz	r3, 800e89e <_free_r+0x32>
 800e890:	6063      	str	r3, [r4, #4]
 800e892:	6014      	str	r4, [r2, #0]
 800e894:	b003      	add	sp, #12
 800e896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e89a:	f000 b9bf 	b.w	800ec1c <__malloc_unlock>
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	d90b      	bls.n	800e8ba <_free_r+0x4e>
 800e8a2:	6821      	ldr	r1, [r4, #0]
 800e8a4:	1862      	adds	r2, r4, r1
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	bf04      	itt	eq
 800e8aa:	681a      	ldreq	r2, [r3, #0]
 800e8ac:	685b      	ldreq	r3, [r3, #4]
 800e8ae:	6063      	str	r3, [r4, #4]
 800e8b0:	bf04      	itt	eq
 800e8b2:	1852      	addeq	r2, r2, r1
 800e8b4:	6022      	streq	r2, [r4, #0]
 800e8b6:	602c      	str	r4, [r5, #0]
 800e8b8:	e7ec      	b.n	800e894 <_free_r+0x28>
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	b10b      	cbz	r3, 800e8c4 <_free_r+0x58>
 800e8c0:	42a3      	cmp	r3, r4
 800e8c2:	d9fa      	bls.n	800e8ba <_free_r+0x4e>
 800e8c4:	6811      	ldr	r1, [r2, #0]
 800e8c6:	1855      	adds	r5, r2, r1
 800e8c8:	42a5      	cmp	r5, r4
 800e8ca:	d10b      	bne.n	800e8e4 <_free_r+0x78>
 800e8cc:	6824      	ldr	r4, [r4, #0]
 800e8ce:	4421      	add	r1, r4
 800e8d0:	1854      	adds	r4, r2, r1
 800e8d2:	42a3      	cmp	r3, r4
 800e8d4:	6011      	str	r1, [r2, #0]
 800e8d6:	d1dd      	bne.n	800e894 <_free_r+0x28>
 800e8d8:	681c      	ldr	r4, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	6053      	str	r3, [r2, #4]
 800e8de:	4421      	add	r1, r4
 800e8e0:	6011      	str	r1, [r2, #0]
 800e8e2:	e7d7      	b.n	800e894 <_free_r+0x28>
 800e8e4:	d902      	bls.n	800e8ec <_free_r+0x80>
 800e8e6:	230c      	movs	r3, #12
 800e8e8:	6003      	str	r3, [r0, #0]
 800e8ea:	e7d3      	b.n	800e894 <_free_r+0x28>
 800e8ec:	6825      	ldr	r5, [r4, #0]
 800e8ee:	1961      	adds	r1, r4, r5
 800e8f0:	428b      	cmp	r3, r1
 800e8f2:	bf04      	itt	eq
 800e8f4:	6819      	ldreq	r1, [r3, #0]
 800e8f6:	685b      	ldreq	r3, [r3, #4]
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	bf04      	itt	eq
 800e8fc:	1949      	addeq	r1, r1, r5
 800e8fe:	6021      	streq	r1, [r4, #0]
 800e900:	6054      	str	r4, [r2, #4]
 800e902:	e7c7      	b.n	800e894 <_free_r+0x28>
 800e904:	b003      	add	sp, #12
 800e906:	bd30      	pop	{r4, r5, pc}
 800e908:	20004a7c 	.word	0x20004a7c

0800e90c <_malloc_r>:
 800e90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90e:	1ccd      	adds	r5, r1, #3
 800e910:	f025 0503 	bic.w	r5, r5, #3
 800e914:	3508      	adds	r5, #8
 800e916:	2d0c      	cmp	r5, #12
 800e918:	bf38      	it	cc
 800e91a:	250c      	movcc	r5, #12
 800e91c:	2d00      	cmp	r5, #0
 800e91e:	4606      	mov	r6, r0
 800e920:	db01      	blt.n	800e926 <_malloc_r+0x1a>
 800e922:	42a9      	cmp	r1, r5
 800e924:	d903      	bls.n	800e92e <_malloc_r+0x22>
 800e926:	230c      	movs	r3, #12
 800e928:	6033      	str	r3, [r6, #0]
 800e92a:	2000      	movs	r0, #0
 800e92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e92e:	f000 f96f 	bl	800ec10 <__malloc_lock>
 800e932:	4921      	ldr	r1, [pc, #132]	; (800e9b8 <_malloc_r+0xac>)
 800e934:	680a      	ldr	r2, [r1, #0]
 800e936:	4614      	mov	r4, r2
 800e938:	b99c      	cbnz	r4, 800e962 <_malloc_r+0x56>
 800e93a:	4f20      	ldr	r7, [pc, #128]	; (800e9bc <_malloc_r+0xb0>)
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	b923      	cbnz	r3, 800e94a <_malloc_r+0x3e>
 800e940:	4621      	mov	r1, r4
 800e942:	4630      	mov	r0, r6
 800e944:	f000 f8a6 	bl	800ea94 <_sbrk_r>
 800e948:	6038      	str	r0, [r7, #0]
 800e94a:	4629      	mov	r1, r5
 800e94c:	4630      	mov	r0, r6
 800e94e:	f000 f8a1 	bl	800ea94 <_sbrk_r>
 800e952:	1c43      	adds	r3, r0, #1
 800e954:	d123      	bne.n	800e99e <_malloc_r+0x92>
 800e956:	230c      	movs	r3, #12
 800e958:	6033      	str	r3, [r6, #0]
 800e95a:	4630      	mov	r0, r6
 800e95c:	f000 f95e 	bl	800ec1c <__malloc_unlock>
 800e960:	e7e3      	b.n	800e92a <_malloc_r+0x1e>
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	1b5b      	subs	r3, r3, r5
 800e966:	d417      	bmi.n	800e998 <_malloc_r+0x8c>
 800e968:	2b0b      	cmp	r3, #11
 800e96a:	d903      	bls.n	800e974 <_malloc_r+0x68>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	441c      	add	r4, r3
 800e970:	6025      	str	r5, [r4, #0]
 800e972:	e004      	b.n	800e97e <_malloc_r+0x72>
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	42a2      	cmp	r2, r4
 800e978:	bf0c      	ite	eq
 800e97a:	600b      	streq	r3, [r1, #0]
 800e97c:	6053      	strne	r3, [r2, #4]
 800e97e:	4630      	mov	r0, r6
 800e980:	f000 f94c 	bl	800ec1c <__malloc_unlock>
 800e984:	f104 000b 	add.w	r0, r4, #11
 800e988:	1d23      	adds	r3, r4, #4
 800e98a:	f020 0007 	bic.w	r0, r0, #7
 800e98e:	1ac2      	subs	r2, r0, r3
 800e990:	d0cc      	beq.n	800e92c <_malloc_r+0x20>
 800e992:	1a1b      	subs	r3, r3, r0
 800e994:	50a3      	str	r3, [r4, r2]
 800e996:	e7c9      	b.n	800e92c <_malloc_r+0x20>
 800e998:	4622      	mov	r2, r4
 800e99a:	6864      	ldr	r4, [r4, #4]
 800e99c:	e7cc      	b.n	800e938 <_malloc_r+0x2c>
 800e99e:	1cc4      	adds	r4, r0, #3
 800e9a0:	f024 0403 	bic.w	r4, r4, #3
 800e9a4:	42a0      	cmp	r0, r4
 800e9a6:	d0e3      	beq.n	800e970 <_malloc_r+0x64>
 800e9a8:	1a21      	subs	r1, r4, r0
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f000 f872 	bl	800ea94 <_sbrk_r>
 800e9b0:	3001      	adds	r0, #1
 800e9b2:	d1dd      	bne.n	800e970 <_malloc_r+0x64>
 800e9b4:	e7cf      	b.n	800e956 <_malloc_r+0x4a>
 800e9b6:	bf00      	nop
 800e9b8:	20004a7c 	.word	0x20004a7c
 800e9bc:	20004a80 	.word	0x20004a80

0800e9c0 <cleanup_glue>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	6809      	ldr	r1, [r1, #0]
 800e9c6:	4605      	mov	r5, r0
 800e9c8:	b109      	cbz	r1, 800e9ce <cleanup_glue+0xe>
 800e9ca:	f7ff fff9 	bl	800e9c0 <cleanup_glue>
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9d6:	f7ff bf49 	b.w	800e86c <_free_r>
	...

0800e9dc <_reclaim_reent>:
 800e9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ea90 <_reclaim_reent+0xb4>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4283      	cmp	r3, r0
 800e9e2:	b570      	push	{r4, r5, r6, lr}
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	d051      	beq.n	800ea8c <_reclaim_reent+0xb0>
 800e9e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e9ea:	b143      	cbz	r3, 800e9fe <_reclaim_reent+0x22>
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d14a      	bne.n	800ea88 <_reclaim_reent+0xac>
 800e9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9f4:	6819      	ldr	r1, [r3, #0]
 800e9f6:	b111      	cbz	r1, 800e9fe <_reclaim_reent+0x22>
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	f7ff ff37 	bl	800e86c <_free_r>
 800e9fe:	6961      	ldr	r1, [r4, #20]
 800ea00:	b111      	cbz	r1, 800ea08 <_reclaim_reent+0x2c>
 800ea02:	4620      	mov	r0, r4
 800ea04:	f7ff ff32 	bl	800e86c <_free_r>
 800ea08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ea0a:	b111      	cbz	r1, 800ea12 <_reclaim_reent+0x36>
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f7ff ff2d 	bl	800e86c <_free_r>
 800ea12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ea14:	b111      	cbz	r1, 800ea1c <_reclaim_reent+0x40>
 800ea16:	4620      	mov	r0, r4
 800ea18:	f7ff ff28 	bl	800e86c <_free_r>
 800ea1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ea1e:	b111      	cbz	r1, 800ea26 <_reclaim_reent+0x4a>
 800ea20:	4620      	mov	r0, r4
 800ea22:	f7ff ff23 	bl	800e86c <_free_r>
 800ea26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ea28:	b111      	cbz	r1, 800ea30 <_reclaim_reent+0x54>
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f7ff ff1e 	bl	800e86c <_free_r>
 800ea30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ea32:	b111      	cbz	r1, 800ea3a <_reclaim_reent+0x5e>
 800ea34:	4620      	mov	r0, r4
 800ea36:	f7ff ff19 	bl	800e86c <_free_r>
 800ea3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ea3c:	b111      	cbz	r1, 800ea44 <_reclaim_reent+0x68>
 800ea3e:	4620      	mov	r0, r4
 800ea40:	f7ff ff14 	bl	800e86c <_free_r>
 800ea44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea46:	b111      	cbz	r1, 800ea4e <_reclaim_reent+0x72>
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f7ff ff0f 	bl	800e86c <_free_r>
 800ea4e:	69a3      	ldr	r3, [r4, #24]
 800ea50:	b1e3      	cbz	r3, 800ea8c <_reclaim_reent+0xb0>
 800ea52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea54:	4620      	mov	r0, r4
 800ea56:	4798      	blx	r3
 800ea58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ea5a:	b1b9      	cbz	r1, 800ea8c <_reclaim_reent+0xb0>
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea62:	f7ff bfad 	b.w	800e9c0 <cleanup_glue>
 800ea66:	5949      	ldr	r1, [r1, r5]
 800ea68:	b941      	cbnz	r1, 800ea7c <_reclaim_reent+0xa0>
 800ea6a:	3504      	adds	r5, #4
 800ea6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea6e:	2d80      	cmp	r5, #128	; 0x80
 800ea70:	68d9      	ldr	r1, [r3, #12]
 800ea72:	d1f8      	bne.n	800ea66 <_reclaim_reent+0x8a>
 800ea74:	4620      	mov	r0, r4
 800ea76:	f7ff fef9 	bl	800e86c <_free_r>
 800ea7a:	e7ba      	b.n	800e9f2 <_reclaim_reent+0x16>
 800ea7c:	680e      	ldr	r6, [r1, #0]
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f7ff fef4 	bl	800e86c <_free_r>
 800ea84:	4631      	mov	r1, r6
 800ea86:	e7ef      	b.n	800ea68 <_reclaim_reent+0x8c>
 800ea88:	2500      	movs	r5, #0
 800ea8a:	e7ef      	b.n	800ea6c <_reclaim_reent+0x90>
 800ea8c:	bd70      	pop	{r4, r5, r6, pc}
 800ea8e:	bf00      	nop
 800ea90:	20000010 	.word	0x20000010

0800ea94 <_sbrk_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	4d06      	ldr	r5, [pc, #24]	; (800eab0 <_sbrk_r+0x1c>)
 800ea98:	2300      	movs	r3, #0
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	4608      	mov	r0, r1
 800ea9e:	602b      	str	r3, [r5, #0]
 800eaa0:	f7f5 fa84 	bl	8003fac <_sbrk>
 800eaa4:	1c43      	adds	r3, r0, #1
 800eaa6:	d102      	bne.n	800eaae <_sbrk_r+0x1a>
 800eaa8:	682b      	ldr	r3, [r5, #0]
 800eaaa:	b103      	cbz	r3, 800eaae <_sbrk_r+0x1a>
 800eaac:	6023      	str	r3, [r4, #0]
 800eaae:	bd38      	pop	{r3, r4, r5, pc}
 800eab0:	20005220 	.word	0x20005220

0800eab4 <siprintf>:
 800eab4:	b40e      	push	{r1, r2, r3}
 800eab6:	b500      	push	{lr}
 800eab8:	b09c      	sub	sp, #112	; 0x70
 800eaba:	ab1d      	add	r3, sp, #116	; 0x74
 800eabc:	9002      	str	r0, [sp, #8]
 800eabe:	9006      	str	r0, [sp, #24]
 800eac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eac4:	4809      	ldr	r0, [pc, #36]	; (800eaec <siprintf+0x38>)
 800eac6:	9107      	str	r1, [sp, #28]
 800eac8:	9104      	str	r1, [sp, #16]
 800eaca:	4909      	ldr	r1, [pc, #36]	; (800eaf0 <siprintf+0x3c>)
 800eacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead0:	9105      	str	r1, [sp, #20]
 800ead2:	6800      	ldr	r0, [r0, #0]
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	a902      	add	r1, sp, #8
 800ead8:	f000 f902 	bl	800ece0 <_svfiprintf_r>
 800eadc:	9b02      	ldr	r3, [sp, #8]
 800eade:	2200      	movs	r2, #0
 800eae0:	701a      	strb	r2, [r3, #0]
 800eae2:	b01c      	add	sp, #112	; 0x70
 800eae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eae8:	b003      	add	sp, #12
 800eaea:	4770      	bx	lr
 800eaec:	20000010 	.word	0x20000010
 800eaf0:	ffff0208 	.word	0xffff0208

0800eaf4 <_strtol_l.isra.0>:
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eafa:	d001      	beq.n	800eb00 <_strtol_l.isra.0+0xc>
 800eafc:	2b24      	cmp	r3, #36	; 0x24
 800eafe:	d906      	bls.n	800eb0e <_strtol_l.isra.0+0x1a>
 800eb00:	f7ff fe62 	bl	800e7c8 <__errno>
 800eb04:	2316      	movs	r3, #22
 800eb06:	6003      	str	r3, [r0, #0]
 800eb08:	2000      	movs	r0, #0
 800eb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb0e:	4f3a      	ldr	r7, [pc, #232]	; (800ebf8 <_strtol_l.isra.0+0x104>)
 800eb10:	468e      	mov	lr, r1
 800eb12:	4676      	mov	r6, lr
 800eb14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eb18:	5de5      	ldrb	r5, [r4, r7]
 800eb1a:	f015 0508 	ands.w	r5, r5, #8
 800eb1e:	d1f8      	bne.n	800eb12 <_strtol_l.isra.0+0x1e>
 800eb20:	2c2d      	cmp	r4, #45	; 0x2d
 800eb22:	d134      	bne.n	800eb8e <_strtol_l.isra.0+0x9a>
 800eb24:	f89e 4000 	ldrb.w	r4, [lr]
 800eb28:	f04f 0801 	mov.w	r8, #1
 800eb2c:	f106 0e02 	add.w	lr, r6, #2
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d05c      	beq.n	800ebee <_strtol_l.isra.0+0xfa>
 800eb34:	2b10      	cmp	r3, #16
 800eb36:	d10c      	bne.n	800eb52 <_strtol_l.isra.0+0x5e>
 800eb38:	2c30      	cmp	r4, #48	; 0x30
 800eb3a:	d10a      	bne.n	800eb52 <_strtol_l.isra.0+0x5e>
 800eb3c:	f89e 4000 	ldrb.w	r4, [lr]
 800eb40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb44:	2c58      	cmp	r4, #88	; 0x58
 800eb46:	d14d      	bne.n	800ebe4 <_strtol_l.isra.0+0xf0>
 800eb48:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800eb4c:	2310      	movs	r3, #16
 800eb4e:	f10e 0e02 	add.w	lr, lr, #2
 800eb52:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800eb56:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800eb5a:	2600      	movs	r6, #0
 800eb5c:	fbbc f9f3 	udiv	r9, ip, r3
 800eb60:	4635      	mov	r5, r6
 800eb62:	fb03 ca19 	mls	sl, r3, r9, ip
 800eb66:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800eb6a:	2f09      	cmp	r7, #9
 800eb6c:	d818      	bhi.n	800eba0 <_strtol_l.isra.0+0xac>
 800eb6e:	463c      	mov	r4, r7
 800eb70:	42a3      	cmp	r3, r4
 800eb72:	dd24      	ble.n	800ebbe <_strtol_l.isra.0+0xca>
 800eb74:	2e00      	cmp	r6, #0
 800eb76:	db1f      	blt.n	800ebb8 <_strtol_l.isra.0+0xc4>
 800eb78:	45a9      	cmp	r9, r5
 800eb7a:	d31d      	bcc.n	800ebb8 <_strtol_l.isra.0+0xc4>
 800eb7c:	d101      	bne.n	800eb82 <_strtol_l.isra.0+0x8e>
 800eb7e:	45a2      	cmp	sl, r4
 800eb80:	db1a      	blt.n	800ebb8 <_strtol_l.isra.0+0xc4>
 800eb82:	fb05 4503 	mla	r5, r5, r3, r4
 800eb86:	2601      	movs	r6, #1
 800eb88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800eb8c:	e7eb      	b.n	800eb66 <_strtol_l.isra.0+0x72>
 800eb8e:	2c2b      	cmp	r4, #43	; 0x2b
 800eb90:	bf08      	it	eq
 800eb92:	f89e 4000 	ldrbeq.w	r4, [lr]
 800eb96:	46a8      	mov	r8, r5
 800eb98:	bf08      	it	eq
 800eb9a:	f106 0e02 	addeq.w	lr, r6, #2
 800eb9e:	e7c7      	b.n	800eb30 <_strtol_l.isra.0+0x3c>
 800eba0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800eba4:	2f19      	cmp	r7, #25
 800eba6:	d801      	bhi.n	800ebac <_strtol_l.isra.0+0xb8>
 800eba8:	3c37      	subs	r4, #55	; 0x37
 800ebaa:	e7e1      	b.n	800eb70 <_strtol_l.isra.0+0x7c>
 800ebac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ebb0:	2f19      	cmp	r7, #25
 800ebb2:	d804      	bhi.n	800ebbe <_strtol_l.isra.0+0xca>
 800ebb4:	3c57      	subs	r4, #87	; 0x57
 800ebb6:	e7db      	b.n	800eb70 <_strtol_l.isra.0+0x7c>
 800ebb8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ebbc:	e7e4      	b.n	800eb88 <_strtol_l.isra.0+0x94>
 800ebbe:	2e00      	cmp	r6, #0
 800ebc0:	da05      	bge.n	800ebce <_strtol_l.isra.0+0xda>
 800ebc2:	2322      	movs	r3, #34	; 0x22
 800ebc4:	6003      	str	r3, [r0, #0]
 800ebc6:	4665      	mov	r5, ip
 800ebc8:	b942      	cbnz	r2, 800ebdc <_strtol_l.isra.0+0xe8>
 800ebca:	4628      	mov	r0, r5
 800ebcc:	e79d      	b.n	800eb0a <_strtol_l.isra.0+0x16>
 800ebce:	f1b8 0f00 	cmp.w	r8, #0
 800ebd2:	d000      	beq.n	800ebd6 <_strtol_l.isra.0+0xe2>
 800ebd4:	426d      	negs	r5, r5
 800ebd6:	2a00      	cmp	r2, #0
 800ebd8:	d0f7      	beq.n	800ebca <_strtol_l.isra.0+0xd6>
 800ebda:	b10e      	cbz	r6, 800ebe0 <_strtol_l.isra.0+0xec>
 800ebdc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800ebe0:	6011      	str	r1, [r2, #0]
 800ebe2:	e7f2      	b.n	800ebca <_strtol_l.isra.0+0xd6>
 800ebe4:	2430      	movs	r4, #48	; 0x30
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1b3      	bne.n	800eb52 <_strtol_l.isra.0+0x5e>
 800ebea:	2308      	movs	r3, #8
 800ebec:	e7b1      	b.n	800eb52 <_strtol_l.isra.0+0x5e>
 800ebee:	2c30      	cmp	r4, #48	; 0x30
 800ebf0:	d0a4      	beq.n	800eb3c <_strtol_l.isra.0+0x48>
 800ebf2:	230a      	movs	r3, #10
 800ebf4:	e7ad      	b.n	800eb52 <_strtol_l.isra.0+0x5e>
 800ebf6:	bf00      	nop
 800ebf8:	08011b85 	.word	0x08011b85

0800ebfc <strtol>:
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	460a      	mov	r2, r1
 800ec00:	4601      	mov	r1, r0
 800ec02:	4802      	ldr	r0, [pc, #8]	; (800ec0c <strtol+0x10>)
 800ec04:	6800      	ldr	r0, [r0, #0]
 800ec06:	f7ff bf75 	b.w	800eaf4 <_strtol_l.isra.0>
 800ec0a:	bf00      	nop
 800ec0c:	20000010 	.word	0x20000010

0800ec10 <__malloc_lock>:
 800ec10:	4801      	ldr	r0, [pc, #4]	; (800ec18 <__malloc_lock+0x8>)
 800ec12:	f7ff be03 	b.w	800e81c <__retarget_lock_acquire_recursive>
 800ec16:	bf00      	nop
 800ec18:	20005218 	.word	0x20005218

0800ec1c <__malloc_unlock>:
 800ec1c:	4801      	ldr	r0, [pc, #4]	; (800ec24 <__malloc_unlock+0x8>)
 800ec1e:	f7ff bdfe 	b.w	800e81e <__retarget_lock_release_recursive>
 800ec22:	bf00      	nop
 800ec24:	20005218 	.word	0x20005218

0800ec28 <__ssputs_r>:
 800ec28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec2c:	688e      	ldr	r6, [r1, #8]
 800ec2e:	429e      	cmp	r6, r3
 800ec30:	4682      	mov	sl, r0
 800ec32:	460c      	mov	r4, r1
 800ec34:	4690      	mov	r8, r2
 800ec36:	461f      	mov	r7, r3
 800ec38:	d838      	bhi.n	800ecac <__ssputs_r+0x84>
 800ec3a:	898a      	ldrh	r2, [r1, #12]
 800ec3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec40:	d032      	beq.n	800eca8 <__ssputs_r+0x80>
 800ec42:	6825      	ldr	r5, [r4, #0]
 800ec44:	6909      	ldr	r1, [r1, #16]
 800ec46:	eba5 0901 	sub.w	r9, r5, r1
 800ec4a:	6965      	ldr	r5, [r4, #20]
 800ec4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec54:	3301      	adds	r3, #1
 800ec56:	444b      	add	r3, r9
 800ec58:	106d      	asrs	r5, r5, #1
 800ec5a:	429d      	cmp	r5, r3
 800ec5c:	bf38      	it	cc
 800ec5e:	461d      	movcc	r5, r3
 800ec60:	0553      	lsls	r3, r2, #21
 800ec62:	d531      	bpl.n	800ecc8 <__ssputs_r+0xa0>
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7ff fe51 	bl	800e90c <_malloc_r>
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	b950      	cbnz	r0, 800ec84 <__ssputs_r+0x5c>
 800ec6e:	230c      	movs	r3, #12
 800ec70:	f8ca 3000 	str.w	r3, [sl]
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec7a:	81a3      	strh	r3, [r4, #12]
 800ec7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec84:	6921      	ldr	r1, [r4, #16]
 800ec86:	464a      	mov	r2, r9
 800ec88:	f7ff fdda 	bl	800e840 <memcpy>
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec96:	81a3      	strh	r3, [r4, #12]
 800ec98:	6126      	str	r6, [r4, #16]
 800ec9a:	6165      	str	r5, [r4, #20]
 800ec9c:	444e      	add	r6, r9
 800ec9e:	eba5 0509 	sub.w	r5, r5, r9
 800eca2:	6026      	str	r6, [r4, #0]
 800eca4:	60a5      	str	r5, [r4, #8]
 800eca6:	463e      	mov	r6, r7
 800eca8:	42be      	cmp	r6, r7
 800ecaa:	d900      	bls.n	800ecae <__ssputs_r+0x86>
 800ecac:	463e      	mov	r6, r7
 800ecae:	4632      	mov	r2, r6
 800ecb0:	6820      	ldr	r0, [r4, #0]
 800ecb2:	4641      	mov	r1, r8
 800ecb4:	f000 faa8 	bl	800f208 <memmove>
 800ecb8:	68a3      	ldr	r3, [r4, #8]
 800ecba:	6822      	ldr	r2, [r4, #0]
 800ecbc:	1b9b      	subs	r3, r3, r6
 800ecbe:	4432      	add	r2, r6
 800ecc0:	60a3      	str	r3, [r4, #8]
 800ecc2:	6022      	str	r2, [r4, #0]
 800ecc4:	2000      	movs	r0, #0
 800ecc6:	e7db      	b.n	800ec80 <__ssputs_r+0x58>
 800ecc8:	462a      	mov	r2, r5
 800ecca:	f000 fab7 	bl	800f23c <_realloc_r>
 800ecce:	4606      	mov	r6, r0
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d1e1      	bne.n	800ec98 <__ssputs_r+0x70>
 800ecd4:	6921      	ldr	r1, [r4, #16]
 800ecd6:	4650      	mov	r0, sl
 800ecd8:	f7ff fdc8 	bl	800e86c <_free_r>
 800ecdc:	e7c7      	b.n	800ec6e <__ssputs_r+0x46>
	...

0800ece0 <_svfiprintf_r>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	4698      	mov	r8, r3
 800ece6:	898b      	ldrh	r3, [r1, #12]
 800ece8:	061b      	lsls	r3, r3, #24
 800ecea:	b09d      	sub	sp, #116	; 0x74
 800ecec:	4607      	mov	r7, r0
 800ecee:	460d      	mov	r5, r1
 800ecf0:	4614      	mov	r4, r2
 800ecf2:	d50e      	bpl.n	800ed12 <_svfiprintf_r+0x32>
 800ecf4:	690b      	ldr	r3, [r1, #16]
 800ecf6:	b963      	cbnz	r3, 800ed12 <_svfiprintf_r+0x32>
 800ecf8:	2140      	movs	r1, #64	; 0x40
 800ecfa:	f7ff fe07 	bl	800e90c <_malloc_r>
 800ecfe:	6028      	str	r0, [r5, #0]
 800ed00:	6128      	str	r0, [r5, #16]
 800ed02:	b920      	cbnz	r0, 800ed0e <_svfiprintf_r+0x2e>
 800ed04:	230c      	movs	r3, #12
 800ed06:	603b      	str	r3, [r7, #0]
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed0c:	e0d1      	b.n	800eeb2 <_svfiprintf_r+0x1d2>
 800ed0e:	2340      	movs	r3, #64	; 0x40
 800ed10:	616b      	str	r3, [r5, #20]
 800ed12:	2300      	movs	r3, #0
 800ed14:	9309      	str	r3, [sp, #36]	; 0x24
 800ed16:	2320      	movs	r3, #32
 800ed18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed20:	2330      	movs	r3, #48	; 0x30
 800ed22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eecc <_svfiprintf_r+0x1ec>
 800ed26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed2a:	f04f 0901 	mov.w	r9, #1
 800ed2e:	4623      	mov	r3, r4
 800ed30:	469a      	mov	sl, r3
 800ed32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed36:	b10a      	cbz	r2, 800ed3c <_svfiprintf_r+0x5c>
 800ed38:	2a25      	cmp	r2, #37	; 0x25
 800ed3a:	d1f9      	bne.n	800ed30 <_svfiprintf_r+0x50>
 800ed3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ed40:	d00b      	beq.n	800ed5a <_svfiprintf_r+0x7a>
 800ed42:	465b      	mov	r3, fp
 800ed44:	4622      	mov	r2, r4
 800ed46:	4629      	mov	r1, r5
 800ed48:	4638      	mov	r0, r7
 800ed4a:	f7ff ff6d 	bl	800ec28 <__ssputs_r>
 800ed4e:	3001      	adds	r0, #1
 800ed50:	f000 80aa 	beq.w	800eea8 <_svfiprintf_r+0x1c8>
 800ed54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed56:	445a      	add	r2, fp
 800ed58:	9209      	str	r2, [sp, #36]	; 0x24
 800ed5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	f000 80a2 	beq.w	800eea8 <_svfiprintf_r+0x1c8>
 800ed64:	2300      	movs	r3, #0
 800ed66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed6e:	f10a 0a01 	add.w	sl, sl, #1
 800ed72:	9304      	str	r3, [sp, #16]
 800ed74:	9307      	str	r3, [sp, #28]
 800ed76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed7a:	931a      	str	r3, [sp, #104]	; 0x68
 800ed7c:	4654      	mov	r4, sl
 800ed7e:	2205      	movs	r2, #5
 800ed80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed84:	4851      	ldr	r0, [pc, #324]	; (800eecc <_svfiprintf_r+0x1ec>)
 800ed86:	f7f1 fa23 	bl	80001d0 <memchr>
 800ed8a:	9a04      	ldr	r2, [sp, #16]
 800ed8c:	b9d8      	cbnz	r0, 800edc6 <_svfiprintf_r+0xe6>
 800ed8e:	06d0      	lsls	r0, r2, #27
 800ed90:	bf44      	itt	mi
 800ed92:	2320      	movmi	r3, #32
 800ed94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed98:	0711      	lsls	r1, r2, #28
 800ed9a:	bf44      	itt	mi
 800ed9c:	232b      	movmi	r3, #43	; 0x2b
 800ed9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eda2:	f89a 3000 	ldrb.w	r3, [sl]
 800eda6:	2b2a      	cmp	r3, #42	; 0x2a
 800eda8:	d015      	beq.n	800edd6 <_svfiprintf_r+0xf6>
 800edaa:	9a07      	ldr	r2, [sp, #28]
 800edac:	4654      	mov	r4, sl
 800edae:	2000      	movs	r0, #0
 800edb0:	f04f 0c0a 	mov.w	ip, #10
 800edb4:	4621      	mov	r1, r4
 800edb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edba:	3b30      	subs	r3, #48	; 0x30
 800edbc:	2b09      	cmp	r3, #9
 800edbe:	d94e      	bls.n	800ee5e <_svfiprintf_r+0x17e>
 800edc0:	b1b0      	cbz	r0, 800edf0 <_svfiprintf_r+0x110>
 800edc2:	9207      	str	r2, [sp, #28]
 800edc4:	e014      	b.n	800edf0 <_svfiprintf_r+0x110>
 800edc6:	eba0 0308 	sub.w	r3, r0, r8
 800edca:	fa09 f303 	lsl.w	r3, r9, r3
 800edce:	4313      	orrs	r3, r2
 800edd0:	9304      	str	r3, [sp, #16]
 800edd2:	46a2      	mov	sl, r4
 800edd4:	e7d2      	b.n	800ed7c <_svfiprintf_r+0x9c>
 800edd6:	9b03      	ldr	r3, [sp, #12]
 800edd8:	1d19      	adds	r1, r3, #4
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	9103      	str	r1, [sp, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	bfbb      	ittet	lt
 800ede2:	425b      	neglt	r3, r3
 800ede4:	f042 0202 	orrlt.w	r2, r2, #2
 800ede8:	9307      	strge	r3, [sp, #28]
 800edea:	9307      	strlt	r3, [sp, #28]
 800edec:	bfb8      	it	lt
 800edee:	9204      	strlt	r2, [sp, #16]
 800edf0:	7823      	ldrb	r3, [r4, #0]
 800edf2:	2b2e      	cmp	r3, #46	; 0x2e
 800edf4:	d10c      	bne.n	800ee10 <_svfiprintf_r+0x130>
 800edf6:	7863      	ldrb	r3, [r4, #1]
 800edf8:	2b2a      	cmp	r3, #42	; 0x2a
 800edfa:	d135      	bne.n	800ee68 <_svfiprintf_r+0x188>
 800edfc:	9b03      	ldr	r3, [sp, #12]
 800edfe:	1d1a      	adds	r2, r3, #4
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	9203      	str	r2, [sp, #12]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	bfb8      	it	lt
 800ee08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ee0c:	3402      	adds	r4, #2
 800ee0e:	9305      	str	r3, [sp, #20]
 800ee10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eedc <_svfiprintf_r+0x1fc>
 800ee14:	7821      	ldrb	r1, [r4, #0]
 800ee16:	2203      	movs	r2, #3
 800ee18:	4650      	mov	r0, sl
 800ee1a:	f7f1 f9d9 	bl	80001d0 <memchr>
 800ee1e:	b140      	cbz	r0, 800ee32 <_svfiprintf_r+0x152>
 800ee20:	2340      	movs	r3, #64	; 0x40
 800ee22:	eba0 000a 	sub.w	r0, r0, sl
 800ee26:	fa03 f000 	lsl.w	r0, r3, r0
 800ee2a:	9b04      	ldr	r3, [sp, #16]
 800ee2c:	4303      	orrs	r3, r0
 800ee2e:	3401      	adds	r4, #1
 800ee30:	9304      	str	r3, [sp, #16]
 800ee32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee36:	4826      	ldr	r0, [pc, #152]	; (800eed0 <_svfiprintf_r+0x1f0>)
 800ee38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee3c:	2206      	movs	r2, #6
 800ee3e:	f7f1 f9c7 	bl	80001d0 <memchr>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d038      	beq.n	800eeb8 <_svfiprintf_r+0x1d8>
 800ee46:	4b23      	ldr	r3, [pc, #140]	; (800eed4 <_svfiprintf_r+0x1f4>)
 800ee48:	bb1b      	cbnz	r3, 800ee92 <_svfiprintf_r+0x1b2>
 800ee4a:	9b03      	ldr	r3, [sp, #12]
 800ee4c:	3307      	adds	r3, #7
 800ee4e:	f023 0307 	bic.w	r3, r3, #7
 800ee52:	3308      	adds	r3, #8
 800ee54:	9303      	str	r3, [sp, #12]
 800ee56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee58:	4433      	add	r3, r6
 800ee5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee5c:	e767      	b.n	800ed2e <_svfiprintf_r+0x4e>
 800ee5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee62:	460c      	mov	r4, r1
 800ee64:	2001      	movs	r0, #1
 800ee66:	e7a5      	b.n	800edb4 <_svfiprintf_r+0xd4>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	3401      	adds	r4, #1
 800ee6c:	9305      	str	r3, [sp, #20]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	f04f 0c0a 	mov.w	ip, #10
 800ee74:	4620      	mov	r0, r4
 800ee76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee7a:	3a30      	subs	r2, #48	; 0x30
 800ee7c:	2a09      	cmp	r2, #9
 800ee7e:	d903      	bls.n	800ee88 <_svfiprintf_r+0x1a8>
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d0c5      	beq.n	800ee10 <_svfiprintf_r+0x130>
 800ee84:	9105      	str	r1, [sp, #20]
 800ee86:	e7c3      	b.n	800ee10 <_svfiprintf_r+0x130>
 800ee88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e7f0      	b.n	800ee74 <_svfiprintf_r+0x194>
 800ee92:	ab03      	add	r3, sp, #12
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	462a      	mov	r2, r5
 800ee98:	4b0f      	ldr	r3, [pc, #60]	; (800eed8 <_svfiprintf_r+0x1f8>)
 800ee9a:	a904      	add	r1, sp, #16
 800ee9c:	4638      	mov	r0, r7
 800ee9e:	f3af 8000 	nop.w
 800eea2:	1c42      	adds	r2, r0, #1
 800eea4:	4606      	mov	r6, r0
 800eea6:	d1d6      	bne.n	800ee56 <_svfiprintf_r+0x176>
 800eea8:	89ab      	ldrh	r3, [r5, #12]
 800eeaa:	065b      	lsls	r3, r3, #25
 800eeac:	f53f af2c 	bmi.w	800ed08 <_svfiprintf_r+0x28>
 800eeb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeb2:	b01d      	add	sp, #116	; 0x74
 800eeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb8:	ab03      	add	r3, sp, #12
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	462a      	mov	r2, r5
 800eebe:	4b06      	ldr	r3, [pc, #24]	; (800eed8 <_svfiprintf_r+0x1f8>)
 800eec0:	a904      	add	r1, sp, #16
 800eec2:	4638      	mov	r0, r7
 800eec4:	f000 f87a 	bl	800efbc <_printf_i>
 800eec8:	e7eb      	b.n	800eea2 <_svfiprintf_r+0x1c2>
 800eeca:	bf00      	nop
 800eecc:	08011c85 	.word	0x08011c85
 800eed0:	08011c8f 	.word	0x08011c8f
 800eed4:	00000000 	.word	0x00000000
 800eed8:	0800ec29 	.word	0x0800ec29
 800eedc:	08011c8b 	.word	0x08011c8b

0800eee0 <_printf_common>:
 800eee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	4616      	mov	r6, r2
 800eee6:	4699      	mov	r9, r3
 800eee8:	688a      	ldr	r2, [r1, #8]
 800eeea:	690b      	ldr	r3, [r1, #16]
 800eeec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eef0:	4293      	cmp	r3, r2
 800eef2:	bfb8      	it	lt
 800eef4:	4613      	movlt	r3, r2
 800eef6:	6033      	str	r3, [r6, #0]
 800eef8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eefc:	4607      	mov	r7, r0
 800eefe:	460c      	mov	r4, r1
 800ef00:	b10a      	cbz	r2, 800ef06 <_printf_common+0x26>
 800ef02:	3301      	adds	r3, #1
 800ef04:	6033      	str	r3, [r6, #0]
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	0699      	lsls	r1, r3, #26
 800ef0a:	bf42      	ittt	mi
 800ef0c:	6833      	ldrmi	r3, [r6, #0]
 800ef0e:	3302      	addmi	r3, #2
 800ef10:	6033      	strmi	r3, [r6, #0]
 800ef12:	6825      	ldr	r5, [r4, #0]
 800ef14:	f015 0506 	ands.w	r5, r5, #6
 800ef18:	d106      	bne.n	800ef28 <_printf_common+0x48>
 800ef1a:	f104 0a19 	add.w	sl, r4, #25
 800ef1e:	68e3      	ldr	r3, [r4, #12]
 800ef20:	6832      	ldr	r2, [r6, #0]
 800ef22:	1a9b      	subs	r3, r3, r2
 800ef24:	42ab      	cmp	r3, r5
 800ef26:	dc26      	bgt.n	800ef76 <_printf_common+0x96>
 800ef28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef2c:	1e13      	subs	r3, r2, #0
 800ef2e:	6822      	ldr	r2, [r4, #0]
 800ef30:	bf18      	it	ne
 800ef32:	2301      	movne	r3, #1
 800ef34:	0692      	lsls	r2, r2, #26
 800ef36:	d42b      	bmi.n	800ef90 <_printf_common+0xb0>
 800ef38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef3c:	4649      	mov	r1, r9
 800ef3e:	4638      	mov	r0, r7
 800ef40:	47c0      	blx	r8
 800ef42:	3001      	adds	r0, #1
 800ef44:	d01e      	beq.n	800ef84 <_printf_common+0xa4>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	68e5      	ldr	r5, [r4, #12]
 800ef4a:	6832      	ldr	r2, [r6, #0]
 800ef4c:	f003 0306 	and.w	r3, r3, #6
 800ef50:	2b04      	cmp	r3, #4
 800ef52:	bf08      	it	eq
 800ef54:	1aad      	subeq	r5, r5, r2
 800ef56:	68a3      	ldr	r3, [r4, #8]
 800ef58:	6922      	ldr	r2, [r4, #16]
 800ef5a:	bf0c      	ite	eq
 800ef5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef60:	2500      	movne	r5, #0
 800ef62:	4293      	cmp	r3, r2
 800ef64:	bfc4      	itt	gt
 800ef66:	1a9b      	subgt	r3, r3, r2
 800ef68:	18ed      	addgt	r5, r5, r3
 800ef6a:	2600      	movs	r6, #0
 800ef6c:	341a      	adds	r4, #26
 800ef6e:	42b5      	cmp	r5, r6
 800ef70:	d11a      	bne.n	800efa8 <_printf_common+0xc8>
 800ef72:	2000      	movs	r0, #0
 800ef74:	e008      	b.n	800ef88 <_printf_common+0xa8>
 800ef76:	2301      	movs	r3, #1
 800ef78:	4652      	mov	r2, sl
 800ef7a:	4649      	mov	r1, r9
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	47c0      	blx	r8
 800ef80:	3001      	adds	r0, #1
 800ef82:	d103      	bne.n	800ef8c <_printf_common+0xac>
 800ef84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef8c:	3501      	adds	r5, #1
 800ef8e:	e7c6      	b.n	800ef1e <_printf_common+0x3e>
 800ef90:	18e1      	adds	r1, r4, r3
 800ef92:	1c5a      	adds	r2, r3, #1
 800ef94:	2030      	movs	r0, #48	; 0x30
 800ef96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef9a:	4422      	add	r2, r4
 800ef9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efa4:	3302      	adds	r3, #2
 800efa6:	e7c7      	b.n	800ef38 <_printf_common+0x58>
 800efa8:	2301      	movs	r3, #1
 800efaa:	4622      	mov	r2, r4
 800efac:	4649      	mov	r1, r9
 800efae:	4638      	mov	r0, r7
 800efb0:	47c0      	blx	r8
 800efb2:	3001      	adds	r0, #1
 800efb4:	d0e6      	beq.n	800ef84 <_printf_common+0xa4>
 800efb6:	3601      	adds	r6, #1
 800efb8:	e7d9      	b.n	800ef6e <_printf_common+0x8e>
	...

0800efbc <_printf_i>:
 800efbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efc0:	460c      	mov	r4, r1
 800efc2:	4691      	mov	r9, r2
 800efc4:	7e27      	ldrb	r7, [r4, #24]
 800efc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800efc8:	2f78      	cmp	r7, #120	; 0x78
 800efca:	4680      	mov	r8, r0
 800efcc:	469a      	mov	sl, r3
 800efce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efd2:	d807      	bhi.n	800efe4 <_printf_i+0x28>
 800efd4:	2f62      	cmp	r7, #98	; 0x62
 800efd6:	d80a      	bhi.n	800efee <_printf_i+0x32>
 800efd8:	2f00      	cmp	r7, #0
 800efda:	f000 80d8 	beq.w	800f18e <_printf_i+0x1d2>
 800efde:	2f58      	cmp	r7, #88	; 0x58
 800efe0:	f000 80a3 	beq.w	800f12a <_printf_i+0x16e>
 800efe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800efe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efec:	e03a      	b.n	800f064 <_printf_i+0xa8>
 800efee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eff2:	2b15      	cmp	r3, #21
 800eff4:	d8f6      	bhi.n	800efe4 <_printf_i+0x28>
 800eff6:	a001      	add	r0, pc, #4	; (adr r0, 800effc <_printf_i+0x40>)
 800eff8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800effc:	0800f055 	.word	0x0800f055
 800f000:	0800f069 	.word	0x0800f069
 800f004:	0800efe5 	.word	0x0800efe5
 800f008:	0800efe5 	.word	0x0800efe5
 800f00c:	0800efe5 	.word	0x0800efe5
 800f010:	0800efe5 	.word	0x0800efe5
 800f014:	0800f069 	.word	0x0800f069
 800f018:	0800efe5 	.word	0x0800efe5
 800f01c:	0800efe5 	.word	0x0800efe5
 800f020:	0800efe5 	.word	0x0800efe5
 800f024:	0800efe5 	.word	0x0800efe5
 800f028:	0800f175 	.word	0x0800f175
 800f02c:	0800f099 	.word	0x0800f099
 800f030:	0800f157 	.word	0x0800f157
 800f034:	0800efe5 	.word	0x0800efe5
 800f038:	0800efe5 	.word	0x0800efe5
 800f03c:	0800f197 	.word	0x0800f197
 800f040:	0800efe5 	.word	0x0800efe5
 800f044:	0800f099 	.word	0x0800f099
 800f048:	0800efe5 	.word	0x0800efe5
 800f04c:	0800efe5 	.word	0x0800efe5
 800f050:	0800f15f 	.word	0x0800f15f
 800f054:	680b      	ldr	r3, [r1, #0]
 800f056:	1d1a      	adds	r2, r3, #4
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	600a      	str	r2, [r1, #0]
 800f05c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f064:	2301      	movs	r3, #1
 800f066:	e0a3      	b.n	800f1b0 <_printf_i+0x1f4>
 800f068:	6825      	ldr	r5, [r4, #0]
 800f06a:	6808      	ldr	r0, [r1, #0]
 800f06c:	062e      	lsls	r6, r5, #24
 800f06e:	f100 0304 	add.w	r3, r0, #4
 800f072:	d50a      	bpl.n	800f08a <_printf_i+0xce>
 800f074:	6805      	ldr	r5, [r0, #0]
 800f076:	600b      	str	r3, [r1, #0]
 800f078:	2d00      	cmp	r5, #0
 800f07a:	da03      	bge.n	800f084 <_printf_i+0xc8>
 800f07c:	232d      	movs	r3, #45	; 0x2d
 800f07e:	426d      	negs	r5, r5
 800f080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f084:	485e      	ldr	r0, [pc, #376]	; (800f200 <_printf_i+0x244>)
 800f086:	230a      	movs	r3, #10
 800f088:	e019      	b.n	800f0be <_printf_i+0x102>
 800f08a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f08e:	6805      	ldr	r5, [r0, #0]
 800f090:	600b      	str	r3, [r1, #0]
 800f092:	bf18      	it	ne
 800f094:	b22d      	sxthne	r5, r5
 800f096:	e7ef      	b.n	800f078 <_printf_i+0xbc>
 800f098:	680b      	ldr	r3, [r1, #0]
 800f09a:	6825      	ldr	r5, [r4, #0]
 800f09c:	1d18      	adds	r0, r3, #4
 800f09e:	6008      	str	r0, [r1, #0]
 800f0a0:	0628      	lsls	r0, r5, #24
 800f0a2:	d501      	bpl.n	800f0a8 <_printf_i+0xec>
 800f0a4:	681d      	ldr	r5, [r3, #0]
 800f0a6:	e002      	b.n	800f0ae <_printf_i+0xf2>
 800f0a8:	0669      	lsls	r1, r5, #25
 800f0aa:	d5fb      	bpl.n	800f0a4 <_printf_i+0xe8>
 800f0ac:	881d      	ldrh	r5, [r3, #0]
 800f0ae:	4854      	ldr	r0, [pc, #336]	; (800f200 <_printf_i+0x244>)
 800f0b0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0b2:	bf0c      	ite	eq
 800f0b4:	2308      	moveq	r3, #8
 800f0b6:	230a      	movne	r3, #10
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0be:	6866      	ldr	r6, [r4, #4]
 800f0c0:	60a6      	str	r6, [r4, #8]
 800f0c2:	2e00      	cmp	r6, #0
 800f0c4:	bfa2      	ittt	ge
 800f0c6:	6821      	ldrge	r1, [r4, #0]
 800f0c8:	f021 0104 	bicge.w	r1, r1, #4
 800f0cc:	6021      	strge	r1, [r4, #0]
 800f0ce:	b90d      	cbnz	r5, 800f0d4 <_printf_i+0x118>
 800f0d0:	2e00      	cmp	r6, #0
 800f0d2:	d04d      	beq.n	800f170 <_printf_i+0x1b4>
 800f0d4:	4616      	mov	r6, r2
 800f0d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0da:	fb03 5711 	mls	r7, r3, r1, r5
 800f0de:	5dc7      	ldrb	r7, [r0, r7]
 800f0e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0e4:	462f      	mov	r7, r5
 800f0e6:	42bb      	cmp	r3, r7
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	d9f4      	bls.n	800f0d6 <_printf_i+0x11a>
 800f0ec:	2b08      	cmp	r3, #8
 800f0ee:	d10b      	bne.n	800f108 <_printf_i+0x14c>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	07df      	lsls	r7, r3, #31
 800f0f4:	d508      	bpl.n	800f108 <_printf_i+0x14c>
 800f0f6:	6923      	ldr	r3, [r4, #16]
 800f0f8:	6861      	ldr	r1, [r4, #4]
 800f0fa:	4299      	cmp	r1, r3
 800f0fc:	bfde      	ittt	le
 800f0fe:	2330      	movle	r3, #48	; 0x30
 800f100:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f104:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f108:	1b92      	subs	r2, r2, r6
 800f10a:	6122      	str	r2, [r4, #16]
 800f10c:	f8cd a000 	str.w	sl, [sp]
 800f110:	464b      	mov	r3, r9
 800f112:	aa03      	add	r2, sp, #12
 800f114:	4621      	mov	r1, r4
 800f116:	4640      	mov	r0, r8
 800f118:	f7ff fee2 	bl	800eee0 <_printf_common>
 800f11c:	3001      	adds	r0, #1
 800f11e:	d14c      	bne.n	800f1ba <_printf_i+0x1fe>
 800f120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f124:	b004      	add	sp, #16
 800f126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12a:	4835      	ldr	r0, [pc, #212]	; (800f200 <_printf_i+0x244>)
 800f12c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	680e      	ldr	r6, [r1, #0]
 800f134:	061f      	lsls	r7, r3, #24
 800f136:	f856 5b04 	ldr.w	r5, [r6], #4
 800f13a:	600e      	str	r6, [r1, #0]
 800f13c:	d514      	bpl.n	800f168 <_printf_i+0x1ac>
 800f13e:	07d9      	lsls	r1, r3, #31
 800f140:	bf44      	itt	mi
 800f142:	f043 0320 	orrmi.w	r3, r3, #32
 800f146:	6023      	strmi	r3, [r4, #0]
 800f148:	b91d      	cbnz	r5, 800f152 <_printf_i+0x196>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	f023 0320 	bic.w	r3, r3, #32
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	2310      	movs	r3, #16
 800f154:	e7b0      	b.n	800f0b8 <_printf_i+0xfc>
 800f156:	6823      	ldr	r3, [r4, #0]
 800f158:	f043 0320 	orr.w	r3, r3, #32
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	2378      	movs	r3, #120	; 0x78
 800f160:	4828      	ldr	r0, [pc, #160]	; (800f204 <_printf_i+0x248>)
 800f162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f166:	e7e3      	b.n	800f130 <_printf_i+0x174>
 800f168:	065e      	lsls	r6, r3, #25
 800f16a:	bf48      	it	mi
 800f16c:	b2ad      	uxthmi	r5, r5
 800f16e:	e7e6      	b.n	800f13e <_printf_i+0x182>
 800f170:	4616      	mov	r6, r2
 800f172:	e7bb      	b.n	800f0ec <_printf_i+0x130>
 800f174:	680b      	ldr	r3, [r1, #0]
 800f176:	6826      	ldr	r6, [r4, #0]
 800f178:	6960      	ldr	r0, [r4, #20]
 800f17a:	1d1d      	adds	r5, r3, #4
 800f17c:	600d      	str	r5, [r1, #0]
 800f17e:	0635      	lsls	r5, r6, #24
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	d501      	bpl.n	800f188 <_printf_i+0x1cc>
 800f184:	6018      	str	r0, [r3, #0]
 800f186:	e002      	b.n	800f18e <_printf_i+0x1d2>
 800f188:	0671      	lsls	r1, r6, #25
 800f18a:	d5fb      	bpl.n	800f184 <_printf_i+0x1c8>
 800f18c:	8018      	strh	r0, [r3, #0]
 800f18e:	2300      	movs	r3, #0
 800f190:	6123      	str	r3, [r4, #16]
 800f192:	4616      	mov	r6, r2
 800f194:	e7ba      	b.n	800f10c <_printf_i+0x150>
 800f196:	680b      	ldr	r3, [r1, #0]
 800f198:	1d1a      	adds	r2, r3, #4
 800f19a:	600a      	str	r2, [r1, #0]
 800f19c:	681e      	ldr	r6, [r3, #0]
 800f19e:	6862      	ldr	r2, [r4, #4]
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	f7f1 f814 	bl	80001d0 <memchr>
 800f1a8:	b108      	cbz	r0, 800f1ae <_printf_i+0x1f2>
 800f1aa:	1b80      	subs	r0, r0, r6
 800f1ac:	6060      	str	r0, [r4, #4]
 800f1ae:	6863      	ldr	r3, [r4, #4]
 800f1b0:	6123      	str	r3, [r4, #16]
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1b8:	e7a8      	b.n	800f10c <_printf_i+0x150>
 800f1ba:	6923      	ldr	r3, [r4, #16]
 800f1bc:	4632      	mov	r2, r6
 800f1be:	4649      	mov	r1, r9
 800f1c0:	4640      	mov	r0, r8
 800f1c2:	47d0      	blx	sl
 800f1c4:	3001      	adds	r0, #1
 800f1c6:	d0ab      	beq.n	800f120 <_printf_i+0x164>
 800f1c8:	6823      	ldr	r3, [r4, #0]
 800f1ca:	079b      	lsls	r3, r3, #30
 800f1cc:	d413      	bmi.n	800f1f6 <_printf_i+0x23a>
 800f1ce:	68e0      	ldr	r0, [r4, #12]
 800f1d0:	9b03      	ldr	r3, [sp, #12]
 800f1d2:	4298      	cmp	r0, r3
 800f1d4:	bfb8      	it	lt
 800f1d6:	4618      	movlt	r0, r3
 800f1d8:	e7a4      	b.n	800f124 <_printf_i+0x168>
 800f1da:	2301      	movs	r3, #1
 800f1dc:	4632      	mov	r2, r6
 800f1de:	4649      	mov	r1, r9
 800f1e0:	4640      	mov	r0, r8
 800f1e2:	47d0      	blx	sl
 800f1e4:	3001      	adds	r0, #1
 800f1e6:	d09b      	beq.n	800f120 <_printf_i+0x164>
 800f1e8:	3501      	adds	r5, #1
 800f1ea:	68e3      	ldr	r3, [r4, #12]
 800f1ec:	9903      	ldr	r1, [sp, #12]
 800f1ee:	1a5b      	subs	r3, r3, r1
 800f1f0:	42ab      	cmp	r3, r5
 800f1f2:	dcf2      	bgt.n	800f1da <_printf_i+0x21e>
 800f1f4:	e7eb      	b.n	800f1ce <_printf_i+0x212>
 800f1f6:	2500      	movs	r5, #0
 800f1f8:	f104 0619 	add.w	r6, r4, #25
 800f1fc:	e7f5      	b.n	800f1ea <_printf_i+0x22e>
 800f1fe:	bf00      	nop
 800f200:	08011c96 	.word	0x08011c96
 800f204:	08011ca7 	.word	0x08011ca7

0800f208 <memmove>:
 800f208:	4288      	cmp	r0, r1
 800f20a:	b510      	push	{r4, lr}
 800f20c:	eb01 0402 	add.w	r4, r1, r2
 800f210:	d902      	bls.n	800f218 <memmove+0x10>
 800f212:	4284      	cmp	r4, r0
 800f214:	4623      	mov	r3, r4
 800f216:	d807      	bhi.n	800f228 <memmove+0x20>
 800f218:	1e43      	subs	r3, r0, #1
 800f21a:	42a1      	cmp	r1, r4
 800f21c:	d008      	beq.n	800f230 <memmove+0x28>
 800f21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f222:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f226:	e7f8      	b.n	800f21a <memmove+0x12>
 800f228:	4402      	add	r2, r0
 800f22a:	4601      	mov	r1, r0
 800f22c:	428a      	cmp	r2, r1
 800f22e:	d100      	bne.n	800f232 <memmove+0x2a>
 800f230:	bd10      	pop	{r4, pc}
 800f232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f23a:	e7f7      	b.n	800f22c <memmove+0x24>

0800f23c <_realloc_r>:
 800f23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f23e:	4607      	mov	r7, r0
 800f240:	4614      	mov	r4, r2
 800f242:	460e      	mov	r6, r1
 800f244:	b921      	cbnz	r1, 800f250 <_realloc_r+0x14>
 800f246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f24a:	4611      	mov	r1, r2
 800f24c:	f7ff bb5e 	b.w	800e90c <_malloc_r>
 800f250:	b922      	cbnz	r2, 800f25c <_realloc_r+0x20>
 800f252:	f7ff fb0b 	bl	800e86c <_free_r>
 800f256:	4625      	mov	r5, r4
 800f258:	4628      	mov	r0, r5
 800f25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f25c:	f000 f814 	bl	800f288 <_malloc_usable_size_r>
 800f260:	42a0      	cmp	r0, r4
 800f262:	d20f      	bcs.n	800f284 <_realloc_r+0x48>
 800f264:	4621      	mov	r1, r4
 800f266:	4638      	mov	r0, r7
 800f268:	f7ff fb50 	bl	800e90c <_malloc_r>
 800f26c:	4605      	mov	r5, r0
 800f26e:	2800      	cmp	r0, #0
 800f270:	d0f2      	beq.n	800f258 <_realloc_r+0x1c>
 800f272:	4631      	mov	r1, r6
 800f274:	4622      	mov	r2, r4
 800f276:	f7ff fae3 	bl	800e840 <memcpy>
 800f27a:	4631      	mov	r1, r6
 800f27c:	4638      	mov	r0, r7
 800f27e:	f7ff faf5 	bl	800e86c <_free_r>
 800f282:	e7e9      	b.n	800f258 <_realloc_r+0x1c>
 800f284:	4635      	mov	r5, r6
 800f286:	e7e7      	b.n	800f258 <_realloc_r+0x1c>

0800f288 <_malloc_usable_size_r>:
 800f288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f28c:	1f18      	subs	r0, r3, #4
 800f28e:	2b00      	cmp	r3, #0
 800f290:	bfbc      	itt	lt
 800f292:	580b      	ldrlt	r3, [r1, r0]
 800f294:	18c0      	addlt	r0, r0, r3
 800f296:	4770      	bx	lr

0800f298 <round>:
 800f298:	ec51 0b10 	vmov	r0, r1, d0
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800f2a2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800f2a6:	2c13      	cmp	r4, #19
 800f2a8:	ee10 2a10 	vmov	r2, s0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	dc19      	bgt.n	800f2e4 <round+0x4c>
 800f2b0:	2c00      	cmp	r4, #0
 800f2b2:	da09      	bge.n	800f2c8 <round+0x30>
 800f2b4:	3401      	adds	r4, #1
 800f2b6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f2ba:	d103      	bne.n	800f2c4 <round+0x2c>
 800f2bc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f2c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	e028      	b.n	800f31a <round+0x82>
 800f2c8:	4d15      	ldr	r5, [pc, #84]	; (800f320 <round+0x88>)
 800f2ca:	4125      	asrs	r5, r4
 800f2cc:	ea01 0605 	and.w	r6, r1, r5
 800f2d0:	4332      	orrs	r2, r6
 800f2d2:	d00e      	beq.n	800f2f2 <round+0x5a>
 800f2d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f2d8:	fa42 f404 	asr.w	r4, r2, r4
 800f2dc:	4423      	add	r3, r4
 800f2de:	ea23 0305 	bic.w	r3, r3, r5
 800f2e2:	e7ef      	b.n	800f2c4 <round+0x2c>
 800f2e4:	2c33      	cmp	r4, #51	; 0x33
 800f2e6:	dd07      	ble.n	800f2f8 <round+0x60>
 800f2e8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800f2ec:	d101      	bne.n	800f2f2 <round+0x5a>
 800f2ee:	f7f0 ffc5 	bl	800027c <__adddf3>
 800f2f2:	ec41 0b10 	vmov	d0, r0, r1
 800f2f6:	bd70      	pop	{r4, r5, r6, pc}
 800f2f8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800f2fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f300:	40f5      	lsrs	r5, r6
 800f302:	4228      	tst	r0, r5
 800f304:	d0f5      	beq.n	800f2f2 <round+0x5a>
 800f306:	2101      	movs	r1, #1
 800f308:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800f30c:	fa01 f404 	lsl.w	r4, r1, r4
 800f310:	1912      	adds	r2, r2, r4
 800f312:	bf28      	it	cs
 800f314:	185b      	addcs	r3, r3, r1
 800f316:	ea22 0105 	bic.w	r1, r2, r5
 800f31a:	4608      	mov	r0, r1
 800f31c:	4619      	mov	r1, r3
 800f31e:	e7e8      	b.n	800f2f2 <round+0x5a>
 800f320:	000fffff 	.word	0x000fffff
 800f324:	00000000 	.word	0x00000000

0800f328 <sin>:
 800f328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f32a:	ec53 2b10 	vmov	r2, r3, d0
 800f32e:	4826      	ldr	r0, [pc, #152]	; (800f3c8 <sin+0xa0>)
 800f330:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f334:	4281      	cmp	r1, r0
 800f336:	dc07      	bgt.n	800f348 <sin+0x20>
 800f338:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f3c0 <sin+0x98>
 800f33c:	2000      	movs	r0, #0
 800f33e:	f001 fa0f 	bl	8010760 <__kernel_sin>
 800f342:	ec51 0b10 	vmov	r0, r1, d0
 800f346:	e007      	b.n	800f358 <sin+0x30>
 800f348:	4820      	ldr	r0, [pc, #128]	; (800f3cc <sin+0xa4>)
 800f34a:	4281      	cmp	r1, r0
 800f34c:	dd09      	ble.n	800f362 <sin+0x3a>
 800f34e:	ee10 0a10 	vmov	r0, s0
 800f352:	4619      	mov	r1, r3
 800f354:	f7f0 ff90 	bl	8000278 <__aeabi_dsub>
 800f358:	ec41 0b10 	vmov	d0, r0, r1
 800f35c:	b005      	add	sp, #20
 800f35e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f362:	4668      	mov	r0, sp
 800f364:	f000 fb34 	bl	800f9d0 <__ieee754_rem_pio2>
 800f368:	f000 0003 	and.w	r0, r0, #3
 800f36c:	2801      	cmp	r0, #1
 800f36e:	d008      	beq.n	800f382 <sin+0x5a>
 800f370:	2802      	cmp	r0, #2
 800f372:	d00d      	beq.n	800f390 <sin+0x68>
 800f374:	b9d0      	cbnz	r0, 800f3ac <sin+0x84>
 800f376:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f37a:	ed9d 0b00 	vldr	d0, [sp]
 800f37e:	2001      	movs	r0, #1
 800f380:	e7dd      	b.n	800f33e <sin+0x16>
 800f382:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f386:	ed9d 0b00 	vldr	d0, [sp]
 800f38a:	f000 fde1 	bl	800ff50 <__kernel_cos>
 800f38e:	e7d8      	b.n	800f342 <sin+0x1a>
 800f390:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f394:	ed9d 0b00 	vldr	d0, [sp]
 800f398:	2001      	movs	r0, #1
 800f39a:	f001 f9e1 	bl	8010760 <__kernel_sin>
 800f39e:	ec53 2b10 	vmov	r2, r3, d0
 800f3a2:	ee10 0a10 	vmov	r0, s0
 800f3a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f3aa:	e7d5      	b.n	800f358 <sin+0x30>
 800f3ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f3b0:	ed9d 0b00 	vldr	d0, [sp]
 800f3b4:	f000 fdcc 	bl	800ff50 <__kernel_cos>
 800f3b8:	e7f1      	b.n	800f39e <sin+0x76>
 800f3ba:	bf00      	nop
 800f3bc:	f3af 8000 	nop.w
	...
 800f3c8:	3fe921fb 	.word	0x3fe921fb
 800f3cc:	7fefffff 	.word	0x7fefffff

0800f3d0 <tan>:
 800f3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3d2:	ec53 2b10 	vmov	r2, r3, d0
 800f3d6:	4814      	ldr	r0, [pc, #80]	; (800f428 <tan+0x58>)
 800f3d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f3dc:	4281      	cmp	r1, r0
 800f3de:	dc05      	bgt.n	800f3ec <tan+0x1c>
 800f3e0:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800f420 <tan+0x50>
 800f3e4:	2001      	movs	r0, #1
 800f3e6:	f001 fa7b 	bl	80108e0 <__kernel_tan>
 800f3ea:	e009      	b.n	800f400 <tan+0x30>
 800f3ec:	480f      	ldr	r0, [pc, #60]	; (800f42c <tan+0x5c>)
 800f3ee:	4281      	cmp	r1, r0
 800f3f0:	dd09      	ble.n	800f406 <tan+0x36>
 800f3f2:	ee10 0a10 	vmov	r0, s0
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	f7f0 ff3e 	bl	8000278 <__aeabi_dsub>
 800f3fc:	ec41 0b10 	vmov	d0, r0, r1
 800f400:	b005      	add	sp, #20
 800f402:	f85d fb04 	ldr.w	pc, [sp], #4
 800f406:	4668      	mov	r0, sp
 800f408:	f000 fae2 	bl	800f9d0 <__ieee754_rem_pio2>
 800f40c:	0040      	lsls	r0, r0, #1
 800f40e:	f000 0002 	and.w	r0, r0, #2
 800f412:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f416:	ed9d 0b00 	vldr	d0, [sp]
 800f41a:	f1c0 0001 	rsb	r0, r0, #1
 800f41e:	e7e2      	b.n	800f3e6 <tan+0x16>
	...
 800f428:	3fe921fb 	.word	0x3fe921fb
 800f42c:	7fefffff 	.word	0x7fefffff

0800f430 <acos>:
 800f430:	b538      	push	{r3, r4, r5, lr}
 800f432:	ed2d 8b02 	vpush	{d8}
 800f436:	ec55 4b10 	vmov	r4, r5, d0
 800f43a:	f000 f869 	bl	800f510 <__ieee754_acos>
 800f43e:	4b16      	ldr	r3, [pc, #88]	; (800f498 <acos+0x68>)
 800f440:	eeb0 8a40 	vmov.f32	s16, s0
 800f444:	eef0 8a60 	vmov.f32	s17, s1
 800f448:	f993 3000 	ldrsb.w	r3, [r3]
 800f44c:	3301      	adds	r3, #1
 800f44e:	d01c      	beq.n	800f48a <acos+0x5a>
 800f450:	4622      	mov	r2, r4
 800f452:	462b      	mov	r3, r5
 800f454:	4620      	mov	r0, r4
 800f456:	4629      	mov	r1, r5
 800f458:	f7f1 fb60 	bl	8000b1c <__aeabi_dcmpun>
 800f45c:	b9a8      	cbnz	r0, 800f48a <acos+0x5a>
 800f45e:	ec45 4b10 	vmov	d0, r4, r5
 800f462:	f001 fc11 	bl	8010c88 <fabs>
 800f466:	4b0d      	ldr	r3, [pc, #52]	; (800f49c <acos+0x6c>)
 800f468:	ec51 0b10 	vmov	r0, r1, d0
 800f46c:	2200      	movs	r2, #0
 800f46e:	f7f1 fb4b 	bl	8000b08 <__aeabi_dcmpgt>
 800f472:	b150      	cbz	r0, 800f48a <acos+0x5a>
 800f474:	f7ff f9a8 	bl	800e7c8 <__errno>
 800f478:	ecbd 8b02 	vpop	{d8}
 800f47c:	2321      	movs	r3, #33	; 0x21
 800f47e:	6003      	str	r3, [r0, #0]
 800f480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f484:	4806      	ldr	r0, [pc, #24]	; (800f4a0 <acos+0x70>)
 800f486:	f001 bc8b 	b.w	8010da0 <nan>
 800f48a:	eeb0 0a48 	vmov.f32	s0, s16
 800f48e:	eef0 0a68 	vmov.f32	s1, s17
 800f492:	ecbd 8b02 	vpop	{d8}
 800f496:	bd38      	pop	{r3, r4, r5, pc}
 800f498:	20000074 	.word	0x20000074
 800f49c:	3ff00000 	.word	0x3ff00000
 800f4a0:	08011c8a 	.word	0x08011c8a

0800f4a4 <sqrt>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	ed2d 8b02 	vpush	{d8}
 800f4aa:	ec55 4b10 	vmov	r4, r5, d0
 800f4ae:	f000 fc99 	bl	800fde4 <__ieee754_sqrt>
 800f4b2:	4b15      	ldr	r3, [pc, #84]	; (800f508 <sqrt+0x64>)
 800f4b4:	eeb0 8a40 	vmov.f32	s16, s0
 800f4b8:	eef0 8a60 	vmov.f32	s17, s1
 800f4bc:	f993 3000 	ldrsb.w	r3, [r3]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	d019      	beq.n	800f4f8 <sqrt+0x54>
 800f4c4:	4622      	mov	r2, r4
 800f4c6:	462b      	mov	r3, r5
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	4629      	mov	r1, r5
 800f4cc:	f7f1 fb26 	bl	8000b1c <__aeabi_dcmpun>
 800f4d0:	b990      	cbnz	r0, 800f4f8 <sqrt+0x54>
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7f1 faf7 	bl	8000acc <__aeabi_dcmplt>
 800f4de:	b158      	cbz	r0, 800f4f8 <sqrt+0x54>
 800f4e0:	f7ff f972 	bl	800e7c8 <__errno>
 800f4e4:	2321      	movs	r3, #33	; 0x21
 800f4e6:	6003      	str	r3, [r0, #0]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	f7f1 f9a4 	bl	800083c <__aeabi_ddiv>
 800f4f4:	ec41 0b18 	vmov	d8, r0, r1
 800f4f8:	eeb0 0a48 	vmov.f32	s0, s16
 800f4fc:	eef0 0a68 	vmov.f32	s1, s17
 800f500:	ecbd 8b02 	vpop	{d8}
 800f504:	bd38      	pop	{r3, r4, r5, pc}
 800f506:	bf00      	nop
 800f508:	20000074 	.word	0x20000074
 800f50c:	00000000 	.word	0x00000000

0800f510 <__ieee754_acos>:
 800f510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	ec55 4b10 	vmov	r4, r5, d0
 800f518:	49b7      	ldr	r1, [pc, #732]	; (800f7f8 <__ieee754_acos+0x2e8>)
 800f51a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f51e:	428b      	cmp	r3, r1
 800f520:	dd1b      	ble.n	800f55a <__ieee754_acos+0x4a>
 800f522:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800f526:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f52a:	4323      	orrs	r3, r4
 800f52c:	d106      	bne.n	800f53c <__ieee754_acos+0x2c>
 800f52e:	2d00      	cmp	r5, #0
 800f530:	f300 8211 	bgt.w	800f956 <__ieee754_acos+0x446>
 800f534:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800f790 <__ieee754_acos+0x280>
 800f538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53c:	ee10 2a10 	vmov	r2, s0
 800f540:	462b      	mov	r3, r5
 800f542:	ee10 0a10 	vmov	r0, s0
 800f546:	4629      	mov	r1, r5
 800f548:	f7f0 fe96 	bl	8000278 <__aeabi_dsub>
 800f54c:	4602      	mov	r2, r0
 800f54e:	460b      	mov	r3, r1
 800f550:	f7f1 f974 	bl	800083c <__aeabi_ddiv>
 800f554:	ec41 0b10 	vmov	d0, r0, r1
 800f558:	e7ee      	b.n	800f538 <__ieee754_acos+0x28>
 800f55a:	49a8      	ldr	r1, [pc, #672]	; (800f7fc <__ieee754_acos+0x2ec>)
 800f55c:	428b      	cmp	r3, r1
 800f55e:	f300 8087 	bgt.w	800f670 <__ieee754_acos+0x160>
 800f562:	4aa7      	ldr	r2, [pc, #668]	; (800f800 <__ieee754_acos+0x2f0>)
 800f564:	4293      	cmp	r3, r2
 800f566:	f340 81f9 	ble.w	800f95c <__ieee754_acos+0x44c>
 800f56a:	ee10 2a10 	vmov	r2, s0
 800f56e:	ee10 0a10 	vmov	r0, s0
 800f572:	462b      	mov	r3, r5
 800f574:	4629      	mov	r1, r5
 800f576:	f7f1 f837 	bl	80005e8 <__aeabi_dmul>
 800f57a:	a387      	add	r3, pc, #540	; (adr r3, 800f798 <__ieee754_acos+0x288>)
 800f57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f580:	4606      	mov	r6, r0
 800f582:	460f      	mov	r7, r1
 800f584:	f7f1 f830 	bl	80005e8 <__aeabi_dmul>
 800f588:	a385      	add	r3, pc, #532	; (adr r3, 800f7a0 <__ieee754_acos+0x290>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fe75 	bl	800027c <__adddf3>
 800f592:	4632      	mov	r2, r6
 800f594:	463b      	mov	r3, r7
 800f596:	f7f1 f827 	bl	80005e8 <__aeabi_dmul>
 800f59a:	a383      	add	r3, pc, #524	; (adr r3, 800f7a8 <__ieee754_acos+0x298>)
 800f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a0:	f7f0 fe6a 	bl	8000278 <__aeabi_dsub>
 800f5a4:	4632      	mov	r2, r6
 800f5a6:	463b      	mov	r3, r7
 800f5a8:	f7f1 f81e 	bl	80005e8 <__aeabi_dmul>
 800f5ac:	a380      	add	r3, pc, #512	; (adr r3, 800f7b0 <__ieee754_acos+0x2a0>)
 800f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b2:	f7f0 fe63 	bl	800027c <__adddf3>
 800f5b6:	4632      	mov	r2, r6
 800f5b8:	463b      	mov	r3, r7
 800f5ba:	f7f1 f815 	bl	80005e8 <__aeabi_dmul>
 800f5be:	a37e      	add	r3, pc, #504	; (adr r3, 800f7b8 <__ieee754_acos+0x2a8>)
 800f5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c4:	f7f0 fe58 	bl	8000278 <__aeabi_dsub>
 800f5c8:	4632      	mov	r2, r6
 800f5ca:	463b      	mov	r3, r7
 800f5cc:	f7f1 f80c 	bl	80005e8 <__aeabi_dmul>
 800f5d0:	a37b      	add	r3, pc, #492	; (adr r3, 800f7c0 <__ieee754_acos+0x2b0>)
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	f7f0 fe51 	bl	800027c <__adddf3>
 800f5da:	4632      	mov	r2, r6
 800f5dc:	463b      	mov	r3, r7
 800f5de:	f7f1 f803 	bl	80005e8 <__aeabi_dmul>
 800f5e2:	a379      	add	r3, pc, #484	; (adr r3, 800f7c8 <__ieee754_acos+0x2b8>)
 800f5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e8:	4680      	mov	r8, r0
 800f5ea:	4689      	mov	r9, r1
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	4639      	mov	r1, r7
 800f5f0:	f7f0 fffa 	bl	80005e8 <__aeabi_dmul>
 800f5f4:	a376      	add	r3, pc, #472	; (adr r3, 800f7d0 <__ieee754_acos+0x2c0>)
 800f5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fa:	f7f0 fe3d 	bl	8000278 <__aeabi_dsub>
 800f5fe:	4632      	mov	r2, r6
 800f600:	463b      	mov	r3, r7
 800f602:	f7f0 fff1 	bl	80005e8 <__aeabi_dmul>
 800f606:	a374      	add	r3, pc, #464	; (adr r3, 800f7d8 <__ieee754_acos+0x2c8>)
 800f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60c:	f7f0 fe36 	bl	800027c <__adddf3>
 800f610:	4632      	mov	r2, r6
 800f612:	463b      	mov	r3, r7
 800f614:	f7f0 ffe8 	bl	80005e8 <__aeabi_dmul>
 800f618:	a371      	add	r3, pc, #452	; (adr r3, 800f7e0 <__ieee754_acos+0x2d0>)
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	f7f0 fe2b 	bl	8000278 <__aeabi_dsub>
 800f622:	4632      	mov	r2, r6
 800f624:	463b      	mov	r3, r7
 800f626:	f7f0 ffdf 	bl	80005e8 <__aeabi_dmul>
 800f62a:	4b76      	ldr	r3, [pc, #472]	; (800f804 <__ieee754_acos+0x2f4>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	f7f0 fe25 	bl	800027c <__adddf3>
 800f632:	4602      	mov	r2, r0
 800f634:	460b      	mov	r3, r1
 800f636:	4640      	mov	r0, r8
 800f638:	4649      	mov	r1, r9
 800f63a:	f7f1 f8ff 	bl	800083c <__aeabi_ddiv>
 800f63e:	4622      	mov	r2, r4
 800f640:	462b      	mov	r3, r5
 800f642:	f7f0 ffd1 	bl	80005e8 <__aeabi_dmul>
 800f646:	4602      	mov	r2, r0
 800f648:	460b      	mov	r3, r1
 800f64a:	a167      	add	r1, pc, #412	; (adr r1, 800f7e8 <__ieee754_acos+0x2d8>)
 800f64c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f650:	f7f0 fe12 	bl	8000278 <__aeabi_dsub>
 800f654:	4602      	mov	r2, r0
 800f656:	460b      	mov	r3, r1
 800f658:	4620      	mov	r0, r4
 800f65a:	4629      	mov	r1, r5
 800f65c:	f7f0 fe0c 	bl	8000278 <__aeabi_dsub>
 800f660:	4602      	mov	r2, r0
 800f662:	460b      	mov	r3, r1
 800f664:	a162      	add	r1, pc, #392	; (adr r1, 800f7f0 <__ieee754_acos+0x2e0>)
 800f666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f66a:	f7f0 fe05 	bl	8000278 <__aeabi_dsub>
 800f66e:	e771      	b.n	800f554 <__ieee754_acos+0x44>
 800f670:	2d00      	cmp	r5, #0
 800f672:	f280 80cb 	bge.w	800f80c <__ieee754_acos+0x2fc>
 800f676:	ee10 0a10 	vmov	r0, s0
 800f67a:	4b62      	ldr	r3, [pc, #392]	; (800f804 <__ieee754_acos+0x2f4>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	4629      	mov	r1, r5
 800f680:	f7f0 fdfc 	bl	800027c <__adddf3>
 800f684:	4b60      	ldr	r3, [pc, #384]	; (800f808 <__ieee754_acos+0x2f8>)
 800f686:	2200      	movs	r2, #0
 800f688:	f7f0 ffae 	bl	80005e8 <__aeabi_dmul>
 800f68c:	a342      	add	r3, pc, #264	; (adr r3, 800f798 <__ieee754_acos+0x288>)
 800f68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f692:	4604      	mov	r4, r0
 800f694:	460d      	mov	r5, r1
 800f696:	f7f0 ffa7 	bl	80005e8 <__aeabi_dmul>
 800f69a:	a341      	add	r3, pc, #260	; (adr r3, 800f7a0 <__ieee754_acos+0x290>)
 800f69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a0:	f7f0 fdec 	bl	800027c <__adddf3>
 800f6a4:	4622      	mov	r2, r4
 800f6a6:	462b      	mov	r3, r5
 800f6a8:	f7f0 ff9e 	bl	80005e8 <__aeabi_dmul>
 800f6ac:	a33e      	add	r3, pc, #248	; (adr r3, 800f7a8 <__ieee754_acos+0x298>)
 800f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b2:	f7f0 fde1 	bl	8000278 <__aeabi_dsub>
 800f6b6:	4622      	mov	r2, r4
 800f6b8:	462b      	mov	r3, r5
 800f6ba:	f7f0 ff95 	bl	80005e8 <__aeabi_dmul>
 800f6be:	a33c      	add	r3, pc, #240	; (adr r3, 800f7b0 <__ieee754_acos+0x2a0>)
 800f6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c4:	f7f0 fdda 	bl	800027c <__adddf3>
 800f6c8:	4622      	mov	r2, r4
 800f6ca:	462b      	mov	r3, r5
 800f6cc:	f7f0 ff8c 	bl	80005e8 <__aeabi_dmul>
 800f6d0:	a339      	add	r3, pc, #228	; (adr r3, 800f7b8 <__ieee754_acos+0x2a8>)
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	f7f0 fdcf 	bl	8000278 <__aeabi_dsub>
 800f6da:	4622      	mov	r2, r4
 800f6dc:	462b      	mov	r3, r5
 800f6de:	f7f0 ff83 	bl	80005e8 <__aeabi_dmul>
 800f6e2:	a337      	add	r3, pc, #220	; (adr r3, 800f7c0 <__ieee754_acos+0x2b0>)
 800f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e8:	f7f0 fdc8 	bl	800027c <__adddf3>
 800f6ec:	4622      	mov	r2, r4
 800f6ee:	462b      	mov	r3, r5
 800f6f0:	f7f0 ff7a 	bl	80005e8 <__aeabi_dmul>
 800f6f4:	ec45 4b10 	vmov	d0, r4, r5
 800f6f8:	4680      	mov	r8, r0
 800f6fa:	4689      	mov	r9, r1
 800f6fc:	f000 fb72 	bl	800fde4 <__ieee754_sqrt>
 800f700:	a331      	add	r3, pc, #196	; (adr r3, 800f7c8 <__ieee754_acos+0x2b8>)
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	4620      	mov	r0, r4
 800f708:	4629      	mov	r1, r5
 800f70a:	ec57 6b10 	vmov	r6, r7, d0
 800f70e:	f7f0 ff6b 	bl	80005e8 <__aeabi_dmul>
 800f712:	a32f      	add	r3, pc, #188	; (adr r3, 800f7d0 <__ieee754_acos+0x2c0>)
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	f7f0 fdae 	bl	8000278 <__aeabi_dsub>
 800f71c:	4622      	mov	r2, r4
 800f71e:	462b      	mov	r3, r5
 800f720:	f7f0 ff62 	bl	80005e8 <__aeabi_dmul>
 800f724:	a32c      	add	r3, pc, #176	; (adr r3, 800f7d8 <__ieee754_acos+0x2c8>)
 800f726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72a:	f7f0 fda7 	bl	800027c <__adddf3>
 800f72e:	4622      	mov	r2, r4
 800f730:	462b      	mov	r3, r5
 800f732:	f7f0 ff59 	bl	80005e8 <__aeabi_dmul>
 800f736:	a32a      	add	r3, pc, #168	; (adr r3, 800f7e0 <__ieee754_acos+0x2d0>)
 800f738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73c:	f7f0 fd9c 	bl	8000278 <__aeabi_dsub>
 800f740:	4622      	mov	r2, r4
 800f742:	462b      	mov	r3, r5
 800f744:	f7f0 ff50 	bl	80005e8 <__aeabi_dmul>
 800f748:	4b2e      	ldr	r3, [pc, #184]	; (800f804 <__ieee754_acos+0x2f4>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	f7f0 fd96 	bl	800027c <__adddf3>
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	4640      	mov	r0, r8
 800f756:	4649      	mov	r1, r9
 800f758:	f7f1 f870 	bl	800083c <__aeabi_ddiv>
 800f75c:	4632      	mov	r2, r6
 800f75e:	463b      	mov	r3, r7
 800f760:	f7f0 ff42 	bl	80005e8 <__aeabi_dmul>
 800f764:	a320      	add	r3, pc, #128	; (adr r3, 800f7e8 <__ieee754_acos+0x2d8>)
 800f766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76a:	f7f0 fd85 	bl	8000278 <__aeabi_dsub>
 800f76e:	4632      	mov	r2, r6
 800f770:	463b      	mov	r3, r7
 800f772:	f7f0 fd83 	bl	800027c <__adddf3>
 800f776:	4602      	mov	r2, r0
 800f778:	460b      	mov	r3, r1
 800f77a:	f7f0 fd7f 	bl	800027c <__adddf3>
 800f77e:	4602      	mov	r2, r0
 800f780:	460b      	mov	r3, r1
 800f782:	a103      	add	r1, pc, #12	; (adr r1, 800f790 <__ieee754_acos+0x280>)
 800f784:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f788:	e76f      	b.n	800f66a <__ieee754_acos+0x15a>
 800f78a:	bf00      	nop
 800f78c:	f3af 8000 	nop.w
 800f790:	54442d18 	.word	0x54442d18
 800f794:	400921fb 	.word	0x400921fb
 800f798:	0dfdf709 	.word	0x0dfdf709
 800f79c:	3f023de1 	.word	0x3f023de1
 800f7a0:	7501b288 	.word	0x7501b288
 800f7a4:	3f49efe0 	.word	0x3f49efe0
 800f7a8:	b5688f3b 	.word	0xb5688f3b
 800f7ac:	3fa48228 	.word	0x3fa48228
 800f7b0:	0e884455 	.word	0x0e884455
 800f7b4:	3fc9c155 	.word	0x3fc9c155
 800f7b8:	03eb6f7d 	.word	0x03eb6f7d
 800f7bc:	3fd4d612 	.word	0x3fd4d612
 800f7c0:	55555555 	.word	0x55555555
 800f7c4:	3fc55555 	.word	0x3fc55555
 800f7c8:	b12e9282 	.word	0xb12e9282
 800f7cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800f7d0:	1b8d0159 	.word	0x1b8d0159
 800f7d4:	3fe6066c 	.word	0x3fe6066c
 800f7d8:	9c598ac8 	.word	0x9c598ac8
 800f7dc:	40002ae5 	.word	0x40002ae5
 800f7e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800f7e4:	40033a27 	.word	0x40033a27
 800f7e8:	33145c07 	.word	0x33145c07
 800f7ec:	3c91a626 	.word	0x3c91a626
 800f7f0:	54442d18 	.word	0x54442d18
 800f7f4:	3ff921fb 	.word	0x3ff921fb
 800f7f8:	3fefffff 	.word	0x3fefffff
 800f7fc:	3fdfffff 	.word	0x3fdfffff
 800f800:	3c600000 	.word	0x3c600000
 800f804:	3ff00000 	.word	0x3ff00000
 800f808:	3fe00000 	.word	0x3fe00000
 800f80c:	ee10 2a10 	vmov	r2, s0
 800f810:	462b      	mov	r3, r5
 800f812:	496d      	ldr	r1, [pc, #436]	; (800f9c8 <__ieee754_acos+0x4b8>)
 800f814:	2000      	movs	r0, #0
 800f816:	f7f0 fd2f 	bl	8000278 <__aeabi_dsub>
 800f81a:	4b6c      	ldr	r3, [pc, #432]	; (800f9cc <__ieee754_acos+0x4bc>)
 800f81c:	2200      	movs	r2, #0
 800f81e:	f7f0 fee3 	bl	80005e8 <__aeabi_dmul>
 800f822:	4604      	mov	r4, r0
 800f824:	460d      	mov	r5, r1
 800f826:	ec45 4b10 	vmov	d0, r4, r5
 800f82a:	f000 fadb 	bl	800fde4 <__ieee754_sqrt>
 800f82e:	a34e      	add	r3, pc, #312	; (adr r3, 800f968 <__ieee754_acos+0x458>)
 800f830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f834:	4620      	mov	r0, r4
 800f836:	4629      	mov	r1, r5
 800f838:	ec59 8b10 	vmov	r8, r9, d0
 800f83c:	f7f0 fed4 	bl	80005e8 <__aeabi_dmul>
 800f840:	a34b      	add	r3, pc, #300	; (adr r3, 800f970 <__ieee754_acos+0x460>)
 800f842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f846:	f7f0 fd19 	bl	800027c <__adddf3>
 800f84a:	4622      	mov	r2, r4
 800f84c:	462b      	mov	r3, r5
 800f84e:	f7f0 fecb 	bl	80005e8 <__aeabi_dmul>
 800f852:	a349      	add	r3, pc, #292	; (adr r3, 800f978 <__ieee754_acos+0x468>)
 800f854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f858:	f7f0 fd0e 	bl	8000278 <__aeabi_dsub>
 800f85c:	4622      	mov	r2, r4
 800f85e:	462b      	mov	r3, r5
 800f860:	f7f0 fec2 	bl	80005e8 <__aeabi_dmul>
 800f864:	a346      	add	r3, pc, #280	; (adr r3, 800f980 <__ieee754_acos+0x470>)
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	f7f0 fd07 	bl	800027c <__adddf3>
 800f86e:	4622      	mov	r2, r4
 800f870:	462b      	mov	r3, r5
 800f872:	f7f0 feb9 	bl	80005e8 <__aeabi_dmul>
 800f876:	a344      	add	r3, pc, #272	; (adr r3, 800f988 <__ieee754_acos+0x478>)
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	f7f0 fcfc 	bl	8000278 <__aeabi_dsub>
 800f880:	4622      	mov	r2, r4
 800f882:	462b      	mov	r3, r5
 800f884:	f7f0 feb0 	bl	80005e8 <__aeabi_dmul>
 800f888:	a341      	add	r3, pc, #260	; (adr r3, 800f990 <__ieee754_acos+0x480>)
 800f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88e:	f7f0 fcf5 	bl	800027c <__adddf3>
 800f892:	4622      	mov	r2, r4
 800f894:	462b      	mov	r3, r5
 800f896:	f7f0 fea7 	bl	80005e8 <__aeabi_dmul>
 800f89a:	a33f      	add	r3, pc, #252	; (adr r3, 800f998 <__ieee754_acos+0x488>)
 800f89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a0:	4682      	mov	sl, r0
 800f8a2:	468b      	mov	fp, r1
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	4629      	mov	r1, r5
 800f8a8:	f7f0 fe9e 	bl	80005e8 <__aeabi_dmul>
 800f8ac:	a33c      	add	r3, pc, #240	; (adr r3, 800f9a0 <__ieee754_acos+0x490>)
 800f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b2:	f7f0 fce1 	bl	8000278 <__aeabi_dsub>
 800f8b6:	4622      	mov	r2, r4
 800f8b8:	462b      	mov	r3, r5
 800f8ba:	f7f0 fe95 	bl	80005e8 <__aeabi_dmul>
 800f8be:	a33a      	add	r3, pc, #232	; (adr r3, 800f9a8 <__ieee754_acos+0x498>)
 800f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c4:	f7f0 fcda 	bl	800027c <__adddf3>
 800f8c8:	4622      	mov	r2, r4
 800f8ca:	462b      	mov	r3, r5
 800f8cc:	f7f0 fe8c 	bl	80005e8 <__aeabi_dmul>
 800f8d0:	a337      	add	r3, pc, #220	; (adr r3, 800f9b0 <__ieee754_acos+0x4a0>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fccf 	bl	8000278 <__aeabi_dsub>
 800f8da:	4622      	mov	r2, r4
 800f8dc:	462b      	mov	r3, r5
 800f8de:	f7f0 fe83 	bl	80005e8 <__aeabi_dmul>
 800f8e2:	4b39      	ldr	r3, [pc, #228]	; (800f9c8 <__ieee754_acos+0x4b8>)
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f7f0 fcc9 	bl	800027c <__adddf3>
 800f8ea:	4602      	mov	r2, r0
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	4650      	mov	r0, sl
 800f8f0:	4659      	mov	r1, fp
 800f8f2:	f7f0 ffa3 	bl	800083c <__aeabi_ddiv>
 800f8f6:	4642      	mov	r2, r8
 800f8f8:	464b      	mov	r3, r9
 800f8fa:	f7f0 fe75 	bl	80005e8 <__aeabi_dmul>
 800f8fe:	2600      	movs	r6, #0
 800f900:	4682      	mov	sl, r0
 800f902:	468b      	mov	fp, r1
 800f904:	4632      	mov	r2, r6
 800f906:	464b      	mov	r3, r9
 800f908:	4630      	mov	r0, r6
 800f90a:	4649      	mov	r1, r9
 800f90c:	f7f0 fe6c 	bl	80005e8 <__aeabi_dmul>
 800f910:	4602      	mov	r2, r0
 800f912:	460b      	mov	r3, r1
 800f914:	4620      	mov	r0, r4
 800f916:	4629      	mov	r1, r5
 800f918:	f7f0 fcae 	bl	8000278 <__aeabi_dsub>
 800f91c:	4632      	mov	r2, r6
 800f91e:	4604      	mov	r4, r0
 800f920:	460d      	mov	r5, r1
 800f922:	464b      	mov	r3, r9
 800f924:	4640      	mov	r0, r8
 800f926:	4649      	mov	r1, r9
 800f928:	f7f0 fca8 	bl	800027c <__adddf3>
 800f92c:	4602      	mov	r2, r0
 800f92e:	460b      	mov	r3, r1
 800f930:	4620      	mov	r0, r4
 800f932:	4629      	mov	r1, r5
 800f934:	f7f0 ff82 	bl	800083c <__aeabi_ddiv>
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	4650      	mov	r0, sl
 800f93e:	4659      	mov	r1, fp
 800f940:	f7f0 fc9c 	bl	800027c <__adddf3>
 800f944:	4632      	mov	r2, r6
 800f946:	464b      	mov	r3, r9
 800f948:	f7f0 fc98 	bl	800027c <__adddf3>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	f7f0 fc94 	bl	800027c <__adddf3>
 800f954:	e5fe      	b.n	800f554 <__ieee754_acos+0x44>
 800f956:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800f9b8 <__ieee754_acos+0x4a8>
 800f95a:	e5ed      	b.n	800f538 <__ieee754_acos+0x28>
 800f95c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800f9c0 <__ieee754_acos+0x4b0>
 800f960:	e5ea      	b.n	800f538 <__ieee754_acos+0x28>
 800f962:	bf00      	nop
 800f964:	f3af 8000 	nop.w
 800f968:	0dfdf709 	.word	0x0dfdf709
 800f96c:	3f023de1 	.word	0x3f023de1
 800f970:	7501b288 	.word	0x7501b288
 800f974:	3f49efe0 	.word	0x3f49efe0
 800f978:	b5688f3b 	.word	0xb5688f3b
 800f97c:	3fa48228 	.word	0x3fa48228
 800f980:	0e884455 	.word	0x0e884455
 800f984:	3fc9c155 	.word	0x3fc9c155
 800f988:	03eb6f7d 	.word	0x03eb6f7d
 800f98c:	3fd4d612 	.word	0x3fd4d612
 800f990:	55555555 	.word	0x55555555
 800f994:	3fc55555 	.word	0x3fc55555
 800f998:	b12e9282 	.word	0xb12e9282
 800f99c:	3fb3b8c5 	.word	0x3fb3b8c5
 800f9a0:	1b8d0159 	.word	0x1b8d0159
 800f9a4:	3fe6066c 	.word	0x3fe6066c
 800f9a8:	9c598ac8 	.word	0x9c598ac8
 800f9ac:	40002ae5 	.word	0x40002ae5
 800f9b0:	1c8a2d4b 	.word	0x1c8a2d4b
 800f9b4:	40033a27 	.word	0x40033a27
	...
 800f9c0:	54442d18 	.word	0x54442d18
 800f9c4:	3ff921fb 	.word	0x3ff921fb
 800f9c8:	3ff00000 	.word	0x3ff00000
 800f9cc:	3fe00000 	.word	0x3fe00000

0800f9d0 <__ieee754_rem_pio2>:
 800f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	ed2d 8b02 	vpush	{d8}
 800f9d8:	ec55 4b10 	vmov	r4, r5, d0
 800f9dc:	4bca      	ldr	r3, [pc, #808]	; (800fd08 <__ieee754_rem_pio2+0x338>)
 800f9de:	b08b      	sub	sp, #44	; 0x2c
 800f9e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f9e4:	4598      	cmp	r8, r3
 800f9e6:	4682      	mov	sl, r0
 800f9e8:	9502      	str	r5, [sp, #8]
 800f9ea:	dc08      	bgt.n	800f9fe <__ieee754_rem_pio2+0x2e>
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	ed80 0b00 	vstr	d0, [r0]
 800f9f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f9f8:	f04f 0b00 	mov.w	fp, #0
 800f9fc:	e028      	b.n	800fa50 <__ieee754_rem_pio2+0x80>
 800f9fe:	4bc3      	ldr	r3, [pc, #780]	; (800fd0c <__ieee754_rem_pio2+0x33c>)
 800fa00:	4598      	cmp	r8, r3
 800fa02:	dc78      	bgt.n	800faf6 <__ieee754_rem_pio2+0x126>
 800fa04:	9b02      	ldr	r3, [sp, #8]
 800fa06:	4ec2      	ldr	r6, [pc, #776]	; (800fd10 <__ieee754_rem_pio2+0x340>)
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	ee10 0a10 	vmov	r0, s0
 800fa0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800fcd0 <__ieee754_rem_pio2+0x300>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	4629      	mov	r1, r5
 800fa16:	dd39      	ble.n	800fa8c <__ieee754_rem_pio2+0xbc>
 800fa18:	f7f0 fc2e 	bl	8000278 <__aeabi_dsub>
 800fa1c:	45b0      	cmp	r8, r6
 800fa1e:	4604      	mov	r4, r0
 800fa20:	460d      	mov	r5, r1
 800fa22:	d01b      	beq.n	800fa5c <__ieee754_rem_pio2+0x8c>
 800fa24:	a3ac      	add	r3, pc, #688	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x308>)
 800fa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2a:	f7f0 fc25 	bl	8000278 <__aeabi_dsub>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	e9ca 2300 	strd	r2, r3, [sl]
 800fa36:	4620      	mov	r0, r4
 800fa38:	4629      	mov	r1, r5
 800fa3a:	f7f0 fc1d 	bl	8000278 <__aeabi_dsub>
 800fa3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x308>)
 800fa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa44:	f7f0 fc18 	bl	8000278 <__aeabi_dsub>
 800fa48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fa4c:	f04f 0b01 	mov.w	fp, #1
 800fa50:	4658      	mov	r0, fp
 800fa52:	b00b      	add	sp, #44	; 0x2c
 800fa54:	ecbd 8b02 	vpop	{d8}
 800fa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x310>)
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	f7f0 fc09 	bl	8000278 <__aeabi_dsub>
 800fa66:	a3a0      	add	r3, pc, #640	; (adr r3, 800fce8 <__ieee754_rem_pio2+0x318>)
 800fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	460d      	mov	r5, r1
 800fa70:	f7f0 fc02 	bl	8000278 <__aeabi_dsub>
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	e9ca 2300 	strd	r2, r3, [sl]
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	4629      	mov	r1, r5
 800fa80:	f7f0 fbfa 	bl	8000278 <__aeabi_dsub>
 800fa84:	a398      	add	r3, pc, #608	; (adr r3, 800fce8 <__ieee754_rem_pio2+0x318>)
 800fa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8a:	e7db      	b.n	800fa44 <__ieee754_rem_pio2+0x74>
 800fa8c:	f7f0 fbf6 	bl	800027c <__adddf3>
 800fa90:	45b0      	cmp	r8, r6
 800fa92:	4604      	mov	r4, r0
 800fa94:	460d      	mov	r5, r1
 800fa96:	d016      	beq.n	800fac6 <__ieee754_rem_pio2+0xf6>
 800fa98:	a38f      	add	r3, pc, #572	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x308>)
 800fa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9e:	f7f0 fbed 	bl	800027c <__adddf3>
 800faa2:	4602      	mov	r2, r0
 800faa4:	460b      	mov	r3, r1
 800faa6:	e9ca 2300 	strd	r2, r3, [sl]
 800faaa:	4620      	mov	r0, r4
 800faac:	4629      	mov	r1, r5
 800faae:	f7f0 fbe3 	bl	8000278 <__aeabi_dsub>
 800fab2:	a389      	add	r3, pc, #548	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x308>)
 800fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab8:	f7f0 fbe0 	bl	800027c <__adddf3>
 800fabc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800fac0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fac4:	e7c4      	b.n	800fa50 <__ieee754_rem_pio2+0x80>
 800fac6:	a386      	add	r3, pc, #536	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x310>)
 800fac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800facc:	f7f0 fbd6 	bl	800027c <__adddf3>
 800fad0:	a385      	add	r3, pc, #532	; (adr r3, 800fce8 <__ieee754_rem_pio2+0x318>)
 800fad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad6:	4604      	mov	r4, r0
 800fad8:	460d      	mov	r5, r1
 800fada:	f7f0 fbcf 	bl	800027c <__adddf3>
 800fade:	4602      	mov	r2, r0
 800fae0:	460b      	mov	r3, r1
 800fae2:	e9ca 2300 	strd	r2, r3, [sl]
 800fae6:	4620      	mov	r0, r4
 800fae8:	4629      	mov	r1, r5
 800faea:	f7f0 fbc5 	bl	8000278 <__aeabi_dsub>
 800faee:	a37e      	add	r3, pc, #504	; (adr r3, 800fce8 <__ieee754_rem_pio2+0x318>)
 800faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf4:	e7e0      	b.n	800fab8 <__ieee754_rem_pio2+0xe8>
 800faf6:	4b87      	ldr	r3, [pc, #540]	; (800fd14 <__ieee754_rem_pio2+0x344>)
 800faf8:	4598      	cmp	r8, r3
 800fafa:	f300 80d9 	bgt.w	800fcb0 <__ieee754_rem_pio2+0x2e0>
 800fafe:	f001 f8c3 	bl	8010c88 <fabs>
 800fb02:	ec55 4b10 	vmov	r4, r5, d0
 800fb06:	ee10 0a10 	vmov	r0, s0
 800fb0a:	a379      	add	r3, pc, #484	; (adr r3, 800fcf0 <__ieee754_rem_pio2+0x320>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	4629      	mov	r1, r5
 800fb12:	f7f0 fd69 	bl	80005e8 <__aeabi_dmul>
 800fb16:	4b80      	ldr	r3, [pc, #512]	; (800fd18 <__ieee754_rem_pio2+0x348>)
 800fb18:	2200      	movs	r2, #0
 800fb1a:	f7f0 fbaf 	bl	800027c <__adddf3>
 800fb1e:	f7f1 f813 	bl	8000b48 <__aeabi_d2iz>
 800fb22:	4683      	mov	fp, r0
 800fb24:	f7f0 fcf6 	bl	8000514 <__aeabi_i2d>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	460b      	mov	r3, r1
 800fb2c:	ec43 2b18 	vmov	d8, r2, r3
 800fb30:	a367      	add	r3, pc, #412	; (adr r3, 800fcd0 <__ieee754_rem_pio2+0x300>)
 800fb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb36:	f7f0 fd57 	bl	80005e8 <__aeabi_dmul>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	460b      	mov	r3, r1
 800fb3e:	4620      	mov	r0, r4
 800fb40:	4629      	mov	r1, r5
 800fb42:	f7f0 fb99 	bl	8000278 <__aeabi_dsub>
 800fb46:	a364      	add	r3, pc, #400	; (adr r3, 800fcd8 <__ieee754_rem_pio2+0x308>)
 800fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4c:	4606      	mov	r6, r0
 800fb4e:	460f      	mov	r7, r1
 800fb50:	ec51 0b18 	vmov	r0, r1, d8
 800fb54:	f7f0 fd48 	bl	80005e8 <__aeabi_dmul>
 800fb58:	f1bb 0f1f 	cmp.w	fp, #31
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	460d      	mov	r5, r1
 800fb60:	dc0d      	bgt.n	800fb7e <__ieee754_rem_pio2+0x1ae>
 800fb62:	4b6e      	ldr	r3, [pc, #440]	; (800fd1c <__ieee754_rem_pio2+0x34c>)
 800fb64:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800fb68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb6c:	4543      	cmp	r3, r8
 800fb6e:	d006      	beq.n	800fb7e <__ieee754_rem_pio2+0x1ae>
 800fb70:	4622      	mov	r2, r4
 800fb72:	462b      	mov	r3, r5
 800fb74:	4630      	mov	r0, r6
 800fb76:	4639      	mov	r1, r7
 800fb78:	f7f0 fb7e 	bl	8000278 <__aeabi_dsub>
 800fb7c:	e00f      	b.n	800fb9e <__ieee754_rem_pio2+0x1ce>
 800fb7e:	462b      	mov	r3, r5
 800fb80:	4622      	mov	r2, r4
 800fb82:	4630      	mov	r0, r6
 800fb84:	4639      	mov	r1, r7
 800fb86:	f7f0 fb77 	bl	8000278 <__aeabi_dsub>
 800fb8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fb8e:	9303      	str	r3, [sp, #12]
 800fb90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fb94:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800fb98:	f1b8 0f10 	cmp.w	r8, #16
 800fb9c:	dc02      	bgt.n	800fba4 <__ieee754_rem_pio2+0x1d4>
 800fb9e:	e9ca 0100 	strd	r0, r1, [sl]
 800fba2:	e039      	b.n	800fc18 <__ieee754_rem_pio2+0x248>
 800fba4:	a34e      	add	r3, pc, #312	; (adr r3, 800fce0 <__ieee754_rem_pio2+0x310>)
 800fba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbaa:	ec51 0b18 	vmov	r0, r1, d8
 800fbae:	f7f0 fd1b 	bl	80005e8 <__aeabi_dmul>
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	460d      	mov	r5, r1
 800fbb6:	4602      	mov	r2, r0
 800fbb8:	460b      	mov	r3, r1
 800fbba:	4630      	mov	r0, r6
 800fbbc:	4639      	mov	r1, r7
 800fbbe:	f7f0 fb5b 	bl	8000278 <__aeabi_dsub>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	4680      	mov	r8, r0
 800fbc8:	4689      	mov	r9, r1
 800fbca:	4630      	mov	r0, r6
 800fbcc:	4639      	mov	r1, r7
 800fbce:	f7f0 fb53 	bl	8000278 <__aeabi_dsub>
 800fbd2:	4622      	mov	r2, r4
 800fbd4:	462b      	mov	r3, r5
 800fbd6:	f7f0 fb4f 	bl	8000278 <__aeabi_dsub>
 800fbda:	a343      	add	r3, pc, #268	; (adr r3, 800fce8 <__ieee754_rem_pio2+0x318>)
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	4604      	mov	r4, r0
 800fbe2:	460d      	mov	r5, r1
 800fbe4:	ec51 0b18 	vmov	r0, r1, d8
 800fbe8:	f7f0 fcfe 	bl	80005e8 <__aeabi_dmul>
 800fbec:	4622      	mov	r2, r4
 800fbee:	462b      	mov	r3, r5
 800fbf0:	f7f0 fb42 	bl	8000278 <__aeabi_dsub>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	460b      	mov	r3, r1
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	460d      	mov	r5, r1
 800fbfc:	4640      	mov	r0, r8
 800fbfe:	4649      	mov	r1, r9
 800fc00:	f7f0 fb3a 	bl	8000278 <__aeabi_dsub>
 800fc04:	9a03      	ldr	r2, [sp, #12]
 800fc06:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	2b31      	cmp	r3, #49	; 0x31
 800fc0e:	dc24      	bgt.n	800fc5a <__ieee754_rem_pio2+0x28a>
 800fc10:	e9ca 0100 	strd	r0, r1, [sl]
 800fc14:	4646      	mov	r6, r8
 800fc16:	464f      	mov	r7, r9
 800fc18:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc1c:	4630      	mov	r0, r6
 800fc1e:	4642      	mov	r2, r8
 800fc20:	464b      	mov	r3, r9
 800fc22:	4639      	mov	r1, r7
 800fc24:	f7f0 fb28 	bl	8000278 <__aeabi_dsub>
 800fc28:	462b      	mov	r3, r5
 800fc2a:	4622      	mov	r2, r4
 800fc2c:	f7f0 fb24 	bl	8000278 <__aeabi_dsub>
 800fc30:	9b02      	ldr	r3, [sp, #8]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fc38:	f6bf af0a 	bge.w	800fa50 <__ieee754_rem_pio2+0x80>
 800fc3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fc40:	f8ca 3004 	str.w	r3, [sl, #4]
 800fc44:	f8ca 8000 	str.w	r8, [sl]
 800fc48:	f8ca 0008 	str.w	r0, [sl, #8]
 800fc4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fc50:	f8ca 300c 	str.w	r3, [sl, #12]
 800fc54:	f1cb 0b00 	rsb	fp, fp, #0
 800fc58:	e6fa      	b.n	800fa50 <__ieee754_rem_pio2+0x80>
 800fc5a:	a327      	add	r3, pc, #156	; (adr r3, 800fcf8 <__ieee754_rem_pio2+0x328>)
 800fc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc60:	ec51 0b18 	vmov	r0, r1, d8
 800fc64:	f7f0 fcc0 	bl	80005e8 <__aeabi_dmul>
 800fc68:	4604      	mov	r4, r0
 800fc6a:	460d      	mov	r5, r1
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	460b      	mov	r3, r1
 800fc70:	4640      	mov	r0, r8
 800fc72:	4649      	mov	r1, r9
 800fc74:	f7f0 fb00 	bl	8000278 <__aeabi_dsub>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	460b      	mov	r3, r1
 800fc7c:	4606      	mov	r6, r0
 800fc7e:	460f      	mov	r7, r1
 800fc80:	4640      	mov	r0, r8
 800fc82:	4649      	mov	r1, r9
 800fc84:	f7f0 faf8 	bl	8000278 <__aeabi_dsub>
 800fc88:	4622      	mov	r2, r4
 800fc8a:	462b      	mov	r3, r5
 800fc8c:	f7f0 faf4 	bl	8000278 <__aeabi_dsub>
 800fc90:	a31b      	add	r3, pc, #108	; (adr r3, 800fd00 <__ieee754_rem_pio2+0x330>)
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	4604      	mov	r4, r0
 800fc98:	460d      	mov	r5, r1
 800fc9a:	ec51 0b18 	vmov	r0, r1, d8
 800fc9e:	f7f0 fca3 	bl	80005e8 <__aeabi_dmul>
 800fca2:	4622      	mov	r2, r4
 800fca4:	462b      	mov	r3, r5
 800fca6:	f7f0 fae7 	bl	8000278 <__aeabi_dsub>
 800fcaa:	4604      	mov	r4, r0
 800fcac:	460d      	mov	r5, r1
 800fcae:	e75f      	b.n	800fb70 <__ieee754_rem_pio2+0x1a0>
 800fcb0:	4b1b      	ldr	r3, [pc, #108]	; (800fd20 <__ieee754_rem_pio2+0x350>)
 800fcb2:	4598      	cmp	r8, r3
 800fcb4:	dd36      	ble.n	800fd24 <__ieee754_rem_pio2+0x354>
 800fcb6:	ee10 2a10 	vmov	r2, s0
 800fcba:	462b      	mov	r3, r5
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	f7f0 fada 	bl	8000278 <__aeabi_dsub>
 800fcc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fcc8:	e9ca 0100 	strd	r0, r1, [sl]
 800fccc:	e694      	b.n	800f9f8 <__ieee754_rem_pio2+0x28>
 800fcce:	bf00      	nop
 800fcd0:	54400000 	.word	0x54400000
 800fcd4:	3ff921fb 	.word	0x3ff921fb
 800fcd8:	1a626331 	.word	0x1a626331
 800fcdc:	3dd0b461 	.word	0x3dd0b461
 800fce0:	1a600000 	.word	0x1a600000
 800fce4:	3dd0b461 	.word	0x3dd0b461
 800fce8:	2e037073 	.word	0x2e037073
 800fcec:	3ba3198a 	.word	0x3ba3198a
 800fcf0:	6dc9c883 	.word	0x6dc9c883
 800fcf4:	3fe45f30 	.word	0x3fe45f30
 800fcf8:	2e000000 	.word	0x2e000000
 800fcfc:	3ba3198a 	.word	0x3ba3198a
 800fd00:	252049c1 	.word	0x252049c1
 800fd04:	397b839a 	.word	0x397b839a
 800fd08:	3fe921fb 	.word	0x3fe921fb
 800fd0c:	4002d97b 	.word	0x4002d97b
 800fd10:	3ff921fb 	.word	0x3ff921fb
 800fd14:	413921fb 	.word	0x413921fb
 800fd18:	3fe00000 	.word	0x3fe00000
 800fd1c:	08011cb8 	.word	0x08011cb8
 800fd20:	7fefffff 	.word	0x7fefffff
 800fd24:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fd28:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fd2c:	ee10 0a10 	vmov	r0, s0
 800fd30:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fd34:	ee10 6a10 	vmov	r6, s0
 800fd38:	460f      	mov	r7, r1
 800fd3a:	f7f0 ff05 	bl	8000b48 <__aeabi_d2iz>
 800fd3e:	f7f0 fbe9 	bl	8000514 <__aeabi_i2d>
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	4630      	mov	r0, r6
 800fd48:	4639      	mov	r1, r7
 800fd4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd4e:	f7f0 fa93 	bl	8000278 <__aeabi_dsub>
 800fd52:	4b22      	ldr	r3, [pc, #136]	; (800fddc <__ieee754_rem_pio2+0x40c>)
 800fd54:	2200      	movs	r2, #0
 800fd56:	f7f0 fc47 	bl	80005e8 <__aeabi_dmul>
 800fd5a:	460f      	mov	r7, r1
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	f7f0 fef3 	bl	8000b48 <__aeabi_d2iz>
 800fd62:	f7f0 fbd7 	bl	8000514 <__aeabi_i2d>
 800fd66:	4602      	mov	r2, r0
 800fd68:	460b      	mov	r3, r1
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	4639      	mov	r1, r7
 800fd6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fd72:	f7f0 fa81 	bl	8000278 <__aeabi_dsub>
 800fd76:	4b19      	ldr	r3, [pc, #100]	; (800fddc <__ieee754_rem_pio2+0x40c>)
 800fd78:	2200      	movs	r2, #0
 800fd7a:	f7f0 fc35 	bl	80005e8 <__aeabi_dmul>
 800fd7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fd82:	ad04      	add	r5, sp, #16
 800fd84:	f04f 0803 	mov.w	r8, #3
 800fd88:	46a9      	mov	r9, r5
 800fd8a:	2600      	movs	r6, #0
 800fd8c:	2700      	movs	r7, #0
 800fd8e:	4632      	mov	r2, r6
 800fd90:	463b      	mov	r3, r7
 800fd92:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fd96:	46c3      	mov	fp, r8
 800fd98:	3d08      	subs	r5, #8
 800fd9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800fd9e:	f7f0 fe8b 	bl	8000ab8 <__aeabi_dcmpeq>
 800fda2:	2800      	cmp	r0, #0
 800fda4:	d1f3      	bne.n	800fd8e <__ieee754_rem_pio2+0x3be>
 800fda6:	4b0e      	ldr	r3, [pc, #56]	; (800fde0 <__ieee754_rem_pio2+0x410>)
 800fda8:	9301      	str	r3, [sp, #4]
 800fdaa:	2302      	movs	r3, #2
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	4622      	mov	r2, r4
 800fdb0:	465b      	mov	r3, fp
 800fdb2:	4651      	mov	r1, sl
 800fdb4:	4648      	mov	r0, r9
 800fdb6:	f000 f993 	bl	80100e0 <__kernel_rem_pio2>
 800fdba:	9b02      	ldr	r3, [sp, #8]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	4683      	mov	fp, r0
 800fdc0:	f6bf ae46 	bge.w	800fa50 <__ieee754_rem_pio2+0x80>
 800fdc4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800fdc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fdcc:	f8ca 3004 	str.w	r3, [sl, #4]
 800fdd0:	f8da 300c 	ldr.w	r3, [sl, #12]
 800fdd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fdd8:	e73a      	b.n	800fc50 <__ieee754_rem_pio2+0x280>
 800fdda:	bf00      	nop
 800fddc:	41700000 	.word	0x41700000
 800fde0:	08011d38 	.word	0x08011d38

0800fde4 <__ieee754_sqrt>:
 800fde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde8:	ec55 4b10 	vmov	r4, r5, d0
 800fdec:	4e56      	ldr	r6, [pc, #344]	; (800ff48 <__ieee754_sqrt+0x164>)
 800fdee:	43ae      	bics	r6, r5
 800fdf0:	ee10 0a10 	vmov	r0, s0
 800fdf4:	ee10 3a10 	vmov	r3, s0
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	462a      	mov	r2, r5
 800fdfc:	d110      	bne.n	800fe20 <__ieee754_sqrt+0x3c>
 800fdfe:	ee10 2a10 	vmov	r2, s0
 800fe02:	462b      	mov	r3, r5
 800fe04:	f7f0 fbf0 	bl	80005e8 <__aeabi_dmul>
 800fe08:	4602      	mov	r2, r0
 800fe0a:	460b      	mov	r3, r1
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	4629      	mov	r1, r5
 800fe10:	f7f0 fa34 	bl	800027c <__adddf3>
 800fe14:	4604      	mov	r4, r0
 800fe16:	460d      	mov	r5, r1
 800fe18:	ec45 4b10 	vmov	d0, r4, r5
 800fe1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe20:	2d00      	cmp	r5, #0
 800fe22:	dc10      	bgt.n	800fe46 <__ieee754_sqrt+0x62>
 800fe24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe28:	4330      	orrs	r0, r6
 800fe2a:	d0f5      	beq.n	800fe18 <__ieee754_sqrt+0x34>
 800fe2c:	b15d      	cbz	r5, 800fe46 <__ieee754_sqrt+0x62>
 800fe2e:	ee10 2a10 	vmov	r2, s0
 800fe32:	462b      	mov	r3, r5
 800fe34:	ee10 0a10 	vmov	r0, s0
 800fe38:	f7f0 fa1e 	bl	8000278 <__aeabi_dsub>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	f7f0 fcfc 	bl	800083c <__aeabi_ddiv>
 800fe44:	e7e6      	b.n	800fe14 <__ieee754_sqrt+0x30>
 800fe46:	1509      	asrs	r1, r1, #20
 800fe48:	d076      	beq.n	800ff38 <__ieee754_sqrt+0x154>
 800fe4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fe4e:	07ce      	lsls	r6, r1, #31
 800fe50:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800fe54:	bf5e      	ittt	pl
 800fe56:	0fda      	lsrpl	r2, r3, #31
 800fe58:	005b      	lslpl	r3, r3, #1
 800fe5a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800fe5e:	0fda      	lsrs	r2, r3, #31
 800fe60:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800fe64:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800fe68:	2000      	movs	r0, #0
 800fe6a:	106d      	asrs	r5, r5, #1
 800fe6c:	005b      	lsls	r3, r3, #1
 800fe6e:	f04f 0e16 	mov.w	lr, #22
 800fe72:	4684      	mov	ip, r0
 800fe74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fe78:	eb0c 0401 	add.w	r4, ip, r1
 800fe7c:	4294      	cmp	r4, r2
 800fe7e:	bfde      	ittt	le
 800fe80:	1b12      	suble	r2, r2, r4
 800fe82:	eb04 0c01 	addle.w	ip, r4, r1
 800fe86:	1840      	addle	r0, r0, r1
 800fe88:	0052      	lsls	r2, r2, #1
 800fe8a:	f1be 0e01 	subs.w	lr, lr, #1
 800fe8e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fe92:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fe96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fe9a:	d1ed      	bne.n	800fe78 <__ieee754_sqrt+0x94>
 800fe9c:	4671      	mov	r1, lr
 800fe9e:	2720      	movs	r7, #32
 800fea0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fea4:	4562      	cmp	r2, ip
 800fea6:	eb04 060e 	add.w	r6, r4, lr
 800feaa:	dc02      	bgt.n	800feb2 <__ieee754_sqrt+0xce>
 800feac:	d113      	bne.n	800fed6 <__ieee754_sqrt+0xf2>
 800feae:	429e      	cmp	r6, r3
 800feb0:	d811      	bhi.n	800fed6 <__ieee754_sqrt+0xf2>
 800feb2:	2e00      	cmp	r6, #0
 800feb4:	eb06 0e04 	add.w	lr, r6, r4
 800feb8:	da43      	bge.n	800ff42 <__ieee754_sqrt+0x15e>
 800feba:	f1be 0f00 	cmp.w	lr, #0
 800febe:	db40      	blt.n	800ff42 <__ieee754_sqrt+0x15e>
 800fec0:	f10c 0801 	add.w	r8, ip, #1
 800fec4:	eba2 020c 	sub.w	r2, r2, ip
 800fec8:	429e      	cmp	r6, r3
 800feca:	bf88      	it	hi
 800fecc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800fed0:	1b9b      	subs	r3, r3, r6
 800fed2:	4421      	add	r1, r4
 800fed4:	46c4      	mov	ip, r8
 800fed6:	0052      	lsls	r2, r2, #1
 800fed8:	3f01      	subs	r7, #1
 800feda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800fede:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fee2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fee6:	d1dd      	bne.n	800fea4 <__ieee754_sqrt+0xc0>
 800fee8:	4313      	orrs	r3, r2
 800feea:	d006      	beq.n	800fefa <__ieee754_sqrt+0x116>
 800feec:	1c4c      	adds	r4, r1, #1
 800feee:	bf13      	iteet	ne
 800fef0:	3101      	addne	r1, #1
 800fef2:	3001      	addeq	r0, #1
 800fef4:	4639      	moveq	r1, r7
 800fef6:	f021 0101 	bicne.w	r1, r1, #1
 800fefa:	1043      	asrs	r3, r0, #1
 800fefc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ff00:	0849      	lsrs	r1, r1, #1
 800ff02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ff06:	07c2      	lsls	r2, r0, #31
 800ff08:	bf48      	it	mi
 800ff0a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ff0e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ff12:	460c      	mov	r4, r1
 800ff14:	463d      	mov	r5, r7
 800ff16:	e77f      	b.n	800fe18 <__ieee754_sqrt+0x34>
 800ff18:	0ada      	lsrs	r2, r3, #11
 800ff1a:	3815      	subs	r0, #21
 800ff1c:	055b      	lsls	r3, r3, #21
 800ff1e:	2a00      	cmp	r2, #0
 800ff20:	d0fa      	beq.n	800ff18 <__ieee754_sqrt+0x134>
 800ff22:	02d7      	lsls	r7, r2, #11
 800ff24:	d50a      	bpl.n	800ff3c <__ieee754_sqrt+0x158>
 800ff26:	f1c1 0420 	rsb	r4, r1, #32
 800ff2a:	fa23 f404 	lsr.w	r4, r3, r4
 800ff2e:	1e4d      	subs	r5, r1, #1
 800ff30:	408b      	lsls	r3, r1
 800ff32:	4322      	orrs	r2, r4
 800ff34:	1b41      	subs	r1, r0, r5
 800ff36:	e788      	b.n	800fe4a <__ieee754_sqrt+0x66>
 800ff38:	4608      	mov	r0, r1
 800ff3a:	e7f0      	b.n	800ff1e <__ieee754_sqrt+0x13a>
 800ff3c:	0052      	lsls	r2, r2, #1
 800ff3e:	3101      	adds	r1, #1
 800ff40:	e7ef      	b.n	800ff22 <__ieee754_sqrt+0x13e>
 800ff42:	46e0      	mov	r8, ip
 800ff44:	e7be      	b.n	800fec4 <__ieee754_sqrt+0xe0>
 800ff46:	bf00      	nop
 800ff48:	7ff00000 	.word	0x7ff00000
 800ff4c:	00000000 	.word	0x00000000

0800ff50 <__kernel_cos>:
 800ff50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff54:	ec57 6b10 	vmov	r6, r7, d0
 800ff58:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ff5c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ff60:	ed8d 1b00 	vstr	d1, [sp]
 800ff64:	da07      	bge.n	800ff76 <__kernel_cos+0x26>
 800ff66:	ee10 0a10 	vmov	r0, s0
 800ff6a:	4639      	mov	r1, r7
 800ff6c:	f7f0 fdec 	bl	8000b48 <__aeabi_d2iz>
 800ff70:	2800      	cmp	r0, #0
 800ff72:	f000 8088 	beq.w	8010086 <__kernel_cos+0x136>
 800ff76:	4632      	mov	r2, r6
 800ff78:	463b      	mov	r3, r7
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	f7f0 fb33 	bl	80005e8 <__aeabi_dmul>
 800ff82:	4b51      	ldr	r3, [pc, #324]	; (80100c8 <__kernel_cos+0x178>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	4604      	mov	r4, r0
 800ff88:	460d      	mov	r5, r1
 800ff8a:	f7f0 fb2d 	bl	80005e8 <__aeabi_dmul>
 800ff8e:	a340      	add	r3, pc, #256	; (adr r3, 8010090 <__kernel_cos+0x140>)
 800ff90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff94:	4682      	mov	sl, r0
 800ff96:	468b      	mov	fp, r1
 800ff98:	4620      	mov	r0, r4
 800ff9a:	4629      	mov	r1, r5
 800ff9c:	f7f0 fb24 	bl	80005e8 <__aeabi_dmul>
 800ffa0:	a33d      	add	r3, pc, #244	; (adr r3, 8010098 <__kernel_cos+0x148>)
 800ffa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa6:	f7f0 f969 	bl	800027c <__adddf3>
 800ffaa:	4622      	mov	r2, r4
 800ffac:	462b      	mov	r3, r5
 800ffae:	f7f0 fb1b 	bl	80005e8 <__aeabi_dmul>
 800ffb2:	a33b      	add	r3, pc, #236	; (adr r3, 80100a0 <__kernel_cos+0x150>)
 800ffb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb8:	f7f0 f95e 	bl	8000278 <__aeabi_dsub>
 800ffbc:	4622      	mov	r2, r4
 800ffbe:	462b      	mov	r3, r5
 800ffc0:	f7f0 fb12 	bl	80005e8 <__aeabi_dmul>
 800ffc4:	a338      	add	r3, pc, #224	; (adr r3, 80100a8 <__kernel_cos+0x158>)
 800ffc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffca:	f7f0 f957 	bl	800027c <__adddf3>
 800ffce:	4622      	mov	r2, r4
 800ffd0:	462b      	mov	r3, r5
 800ffd2:	f7f0 fb09 	bl	80005e8 <__aeabi_dmul>
 800ffd6:	a336      	add	r3, pc, #216	; (adr r3, 80100b0 <__kernel_cos+0x160>)
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	f7f0 f94c 	bl	8000278 <__aeabi_dsub>
 800ffe0:	4622      	mov	r2, r4
 800ffe2:	462b      	mov	r3, r5
 800ffe4:	f7f0 fb00 	bl	80005e8 <__aeabi_dmul>
 800ffe8:	a333      	add	r3, pc, #204	; (adr r3, 80100b8 <__kernel_cos+0x168>)
 800ffea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffee:	f7f0 f945 	bl	800027c <__adddf3>
 800fff2:	4622      	mov	r2, r4
 800fff4:	462b      	mov	r3, r5
 800fff6:	f7f0 faf7 	bl	80005e8 <__aeabi_dmul>
 800fffa:	4622      	mov	r2, r4
 800fffc:	462b      	mov	r3, r5
 800fffe:	f7f0 faf3 	bl	80005e8 <__aeabi_dmul>
 8010002:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010006:	4604      	mov	r4, r0
 8010008:	460d      	mov	r5, r1
 801000a:	4630      	mov	r0, r6
 801000c:	4639      	mov	r1, r7
 801000e:	f7f0 faeb 	bl	80005e8 <__aeabi_dmul>
 8010012:	460b      	mov	r3, r1
 8010014:	4602      	mov	r2, r0
 8010016:	4629      	mov	r1, r5
 8010018:	4620      	mov	r0, r4
 801001a:	f7f0 f92d 	bl	8000278 <__aeabi_dsub>
 801001e:	4b2b      	ldr	r3, [pc, #172]	; (80100cc <__kernel_cos+0x17c>)
 8010020:	4598      	cmp	r8, r3
 8010022:	4606      	mov	r6, r0
 8010024:	460f      	mov	r7, r1
 8010026:	dc10      	bgt.n	801004a <__kernel_cos+0xfa>
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	4650      	mov	r0, sl
 801002e:	4659      	mov	r1, fp
 8010030:	f7f0 f922 	bl	8000278 <__aeabi_dsub>
 8010034:	460b      	mov	r3, r1
 8010036:	4926      	ldr	r1, [pc, #152]	; (80100d0 <__kernel_cos+0x180>)
 8010038:	4602      	mov	r2, r0
 801003a:	2000      	movs	r0, #0
 801003c:	f7f0 f91c 	bl	8000278 <__aeabi_dsub>
 8010040:	ec41 0b10 	vmov	d0, r0, r1
 8010044:	b003      	add	sp, #12
 8010046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801004a:	4b22      	ldr	r3, [pc, #136]	; (80100d4 <__kernel_cos+0x184>)
 801004c:	4920      	ldr	r1, [pc, #128]	; (80100d0 <__kernel_cos+0x180>)
 801004e:	4598      	cmp	r8, r3
 8010050:	bfcc      	ite	gt
 8010052:	4d21      	ldrgt	r5, [pc, #132]	; (80100d8 <__kernel_cos+0x188>)
 8010054:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8010058:	2400      	movs	r4, #0
 801005a:	4622      	mov	r2, r4
 801005c:	462b      	mov	r3, r5
 801005e:	2000      	movs	r0, #0
 8010060:	f7f0 f90a 	bl	8000278 <__aeabi_dsub>
 8010064:	4622      	mov	r2, r4
 8010066:	4680      	mov	r8, r0
 8010068:	4689      	mov	r9, r1
 801006a:	462b      	mov	r3, r5
 801006c:	4650      	mov	r0, sl
 801006e:	4659      	mov	r1, fp
 8010070:	f7f0 f902 	bl	8000278 <__aeabi_dsub>
 8010074:	4632      	mov	r2, r6
 8010076:	463b      	mov	r3, r7
 8010078:	f7f0 f8fe 	bl	8000278 <__aeabi_dsub>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	4640      	mov	r0, r8
 8010082:	4649      	mov	r1, r9
 8010084:	e7da      	b.n	801003c <__kernel_cos+0xec>
 8010086:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80100c0 <__kernel_cos+0x170>
 801008a:	e7db      	b.n	8010044 <__kernel_cos+0xf4>
 801008c:	f3af 8000 	nop.w
 8010090:	be8838d4 	.word	0xbe8838d4
 8010094:	bda8fae9 	.word	0xbda8fae9
 8010098:	bdb4b1c4 	.word	0xbdb4b1c4
 801009c:	3e21ee9e 	.word	0x3e21ee9e
 80100a0:	809c52ad 	.word	0x809c52ad
 80100a4:	3e927e4f 	.word	0x3e927e4f
 80100a8:	19cb1590 	.word	0x19cb1590
 80100ac:	3efa01a0 	.word	0x3efa01a0
 80100b0:	16c15177 	.word	0x16c15177
 80100b4:	3f56c16c 	.word	0x3f56c16c
 80100b8:	5555554c 	.word	0x5555554c
 80100bc:	3fa55555 	.word	0x3fa55555
 80100c0:	00000000 	.word	0x00000000
 80100c4:	3ff00000 	.word	0x3ff00000
 80100c8:	3fe00000 	.word	0x3fe00000
 80100cc:	3fd33332 	.word	0x3fd33332
 80100d0:	3ff00000 	.word	0x3ff00000
 80100d4:	3fe90000 	.word	0x3fe90000
 80100d8:	3fd20000 	.word	0x3fd20000
 80100dc:	00000000 	.word	0x00000000

080100e0 <__kernel_rem_pio2>:
 80100e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e4:	ed2d 8b02 	vpush	{d8}
 80100e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80100ec:	f112 0f14 	cmn.w	r2, #20
 80100f0:	9308      	str	r3, [sp, #32]
 80100f2:	9101      	str	r1, [sp, #4]
 80100f4:	4bc6      	ldr	r3, [pc, #792]	; (8010410 <__kernel_rem_pio2+0x330>)
 80100f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80100f8:	9009      	str	r0, [sp, #36]	; 0x24
 80100fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100fe:	9304      	str	r3, [sp, #16]
 8010100:	9b08      	ldr	r3, [sp, #32]
 8010102:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010106:	bfa8      	it	ge
 8010108:	1ed4      	subge	r4, r2, #3
 801010a:	9306      	str	r3, [sp, #24]
 801010c:	bfb2      	itee	lt
 801010e:	2400      	movlt	r4, #0
 8010110:	2318      	movge	r3, #24
 8010112:	fb94 f4f3 	sdivge	r4, r4, r3
 8010116:	f06f 0317 	mvn.w	r3, #23
 801011a:	fb04 3303 	mla	r3, r4, r3, r3
 801011e:	eb03 0a02 	add.w	sl, r3, r2
 8010122:	9b04      	ldr	r3, [sp, #16]
 8010124:	9a06      	ldr	r2, [sp, #24]
 8010126:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010400 <__kernel_rem_pio2+0x320>
 801012a:	eb03 0802 	add.w	r8, r3, r2
 801012e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010130:	1aa7      	subs	r7, r4, r2
 8010132:	ae20      	add	r6, sp, #128	; 0x80
 8010134:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010138:	2500      	movs	r5, #0
 801013a:	4545      	cmp	r5, r8
 801013c:	dd18      	ble.n	8010170 <__kernel_rem_pio2+0x90>
 801013e:	9b08      	ldr	r3, [sp, #32]
 8010140:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010144:	aa20      	add	r2, sp, #128	; 0x80
 8010146:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8010400 <__kernel_rem_pio2+0x320>
 801014a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801014e:	f1c3 0301 	rsb	r3, r3, #1
 8010152:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010156:	9307      	str	r3, [sp, #28]
 8010158:	9b07      	ldr	r3, [sp, #28]
 801015a:	9a04      	ldr	r2, [sp, #16]
 801015c:	4443      	add	r3, r8
 801015e:	429a      	cmp	r2, r3
 8010160:	db2f      	blt.n	80101c2 <__kernel_rem_pio2+0xe2>
 8010162:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010166:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801016a:	462f      	mov	r7, r5
 801016c:	2600      	movs	r6, #0
 801016e:	e01b      	b.n	80101a8 <__kernel_rem_pio2+0xc8>
 8010170:	42ef      	cmn	r7, r5
 8010172:	d407      	bmi.n	8010184 <__kernel_rem_pio2+0xa4>
 8010174:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010178:	f7f0 f9cc 	bl	8000514 <__aeabi_i2d>
 801017c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010180:	3501      	adds	r5, #1
 8010182:	e7da      	b.n	801013a <__kernel_rem_pio2+0x5a>
 8010184:	ec51 0b18 	vmov	r0, r1, d8
 8010188:	e7f8      	b.n	801017c <__kernel_rem_pio2+0x9c>
 801018a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801018e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010192:	f7f0 fa29 	bl	80005e8 <__aeabi_dmul>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801019e:	f7f0 f86d 	bl	800027c <__adddf3>
 80101a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101a6:	3601      	adds	r6, #1
 80101a8:	9b06      	ldr	r3, [sp, #24]
 80101aa:	429e      	cmp	r6, r3
 80101ac:	f1a7 0708 	sub.w	r7, r7, #8
 80101b0:	ddeb      	ble.n	801018a <__kernel_rem_pio2+0xaa>
 80101b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101b6:	3508      	adds	r5, #8
 80101b8:	ecab 7b02 	vstmia	fp!, {d7}
 80101bc:	f108 0801 	add.w	r8, r8, #1
 80101c0:	e7ca      	b.n	8010158 <__kernel_rem_pio2+0x78>
 80101c2:	9b04      	ldr	r3, [sp, #16]
 80101c4:	aa0c      	add	r2, sp, #48	; 0x30
 80101c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80101cc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80101ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80101d2:	9c04      	ldr	r4, [sp, #16]
 80101d4:	930a      	str	r3, [sp, #40]	; 0x28
 80101d6:	ab98      	add	r3, sp, #608	; 0x260
 80101d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80101dc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80101e0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80101e4:	f8cd b008 	str.w	fp, [sp, #8]
 80101e8:	4625      	mov	r5, r4
 80101ea:	2d00      	cmp	r5, #0
 80101ec:	dc78      	bgt.n	80102e0 <__kernel_rem_pio2+0x200>
 80101ee:	ec47 6b10 	vmov	d0, r6, r7
 80101f2:	4650      	mov	r0, sl
 80101f4:	f000 fddc 	bl	8010db0 <scalbn>
 80101f8:	ec57 6b10 	vmov	r6, r7, d0
 80101fc:	2200      	movs	r2, #0
 80101fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010202:	ee10 0a10 	vmov	r0, s0
 8010206:	4639      	mov	r1, r7
 8010208:	f7f0 f9ee 	bl	80005e8 <__aeabi_dmul>
 801020c:	ec41 0b10 	vmov	d0, r0, r1
 8010210:	f000 fd46 	bl	8010ca0 <floor>
 8010214:	4b7f      	ldr	r3, [pc, #508]	; (8010414 <__kernel_rem_pio2+0x334>)
 8010216:	ec51 0b10 	vmov	r0, r1, d0
 801021a:	2200      	movs	r2, #0
 801021c:	f7f0 f9e4 	bl	80005e8 <__aeabi_dmul>
 8010220:	4602      	mov	r2, r0
 8010222:	460b      	mov	r3, r1
 8010224:	4630      	mov	r0, r6
 8010226:	4639      	mov	r1, r7
 8010228:	f7f0 f826 	bl	8000278 <__aeabi_dsub>
 801022c:	460f      	mov	r7, r1
 801022e:	4606      	mov	r6, r0
 8010230:	f7f0 fc8a 	bl	8000b48 <__aeabi_d2iz>
 8010234:	9007      	str	r0, [sp, #28]
 8010236:	f7f0 f96d 	bl	8000514 <__aeabi_i2d>
 801023a:	4602      	mov	r2, r0
 801023c:	460b      	mov	r3, r1
 801023e:	4630      	mov	r0, r6
 8010240:	4639      	mov	r1, r7
 8010242:	f7f0 f819 	bl	8000278 <__aeabi_dsub>
 8010246:	f1ba 0f00 	cmp.w	sl, #0
 801024a:	4606      	mov	r6, r0
 801024c:	460f      	mov	r7, r1
 801024e:	dd70      	ble.n	8010332 <__kernel_rem_pio2+0x252>
 8010250:	1e62      	subs	r2, r4, #1
 8010252:	ab0c      	add	r3, sp, #48	; 0x30
 8010254:	9d07      	ldr	r5, [sp, #28]
 8010256:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801025a:	f1ca 0118 	rsb	r1, sl, #24
 801025e:	fa40 f301 	asr.w	r3, r0, r1
 8010262:	441d      	add	r5, r3
 8010264:	408b      	lsls	r3, r1
 8010266:	1ac0      	subs	r0, r0, r3
 8010268:	ab0c      	add	r3, sp, #48	; 0x30
 801026a:	9507      	str	r5, [sp, #28]
 801026c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010270:	f1ca 0317 	rsb	r3, sl, #23
 8010274:	fa40 f303 	asr.w	r3, r0, r3
 8010278:	9302      	str	r3, [sp, #8]
 801027a:	9b02      	ldr	r3, [sp, #8]
 801027c:	2b00      	cmp	r3, #0
 801027e:	dd66      	ble.n	801034e <__kernel_rem_pio2+0x26e>
 8010280:	9b07      	ldr	r3, [sp, #28]
 8010282:	2200      	movs	r2, #0
 8010284:	3301      	adds	r3, #1
 8010286:	9307      	str	r3, [sp, #28]
 8010288:	4615      	mov	r5, r2
 801028a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801028e:	4294      	cmp	r4, r2
 8010290:	f300 8099 	bgt.w	80103c6 <__kernel_rem_pio2+0x2e6>
 8010294:	f1ba 0f00 	cmp.w	sl, #0
 8010298:	dd07      	ble.n	80102aa <__kernel_rem_pio2+0x1ca>
 801029a:	f1ba 0f01 	cmp.w	sl, #1
 801029e:	f000 80a5 	beq.w	80103ec <__kernel_rem_pio2+0x30c>
 80102a2:	f1ba 0f02 	cmp.w	sl, #2
 80102a6:	f000 80c1 	beq.w	801042c <__kernel_rem_pio2+0x34c>
 80102aa:	9b02      	ldr	r3, [sp, #8]
 80102ac:	2b02      	cmp	r3, #2
 80102ae:	d14e      	bne.n	801034e <__kernel_rem_pio2+0x26e>
 80102b0:	4632      	mov	r2, r6
 80102b2:	463b      	mov	r3, r7
 80102b4:	4958      	ldr	r1, [pc, #352]	; (8010418 <__kernel_rem_pio2+0x338>)
 80102b6:	2000      	movs	r0, #0
 80102b8:	f7ef ffde 	bl	8000278 <__aeabi_dsub>
 80102bc:	4606      	mov	r6, r0
 80102be:	460f      	mov	r7, r1
 80102c0:	2d00      	cmp	r5, #0
 80102c2:	d044      	beq.n	801034e <__kernel_rem_pio2+0x26e>
 80102c4:	4650      	mov	r0, sl
 80102c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010408 <__kernel_rem_pio2+0x328>
 80102ca:	f000 fd71 	bl	8010db0 <scalbn>
 80102ce:	4630      	mov	r0, r6
 80102d0:	4639      	mov	r1, r7
 80102d2:	ec53 2b10 	vmov	r2, r3, d0
 80102d6:	f7ef ffcf 	bl	8000278 <__aeabi_dsub>
 80102da:	4606      	mov	r6, r0
 80102dc:	460f      	mov	r7, r1
 80102de:	e036      	b.n	801034e <__kernel_rem_pio2+0x26e>
 80102e0:	4b4e      	ldr	r3, [pc, #312]	; (801041c <__kernel_rem_pio2+0x33c>)
 80102e2:	2200      	movs	r2, #0
 80102e4:	4630      	mov	r0, r6
 80102e6:	4639      	mov	r1, r7
 80102e8:	f7f0 f97e 	bl	80005e8 <__aeabi_dmul>
 80102ec:	f7f0 fc2c 	bl	8000b48 <__aeabi_d2iz>
 80102f0:	f7f0 f910 	bl	8000514 <__aeabi_i2d>
 80102f4:	4b4a      	ldr	r3, [pc, #296]	; (8010420 <__kernel_rem_pio2+0x340>)
 80102f6:	2200      	movs	r2, #0
 80102f8:	4680      	mov	r8, r0
 80102fa:	4689      	mov	r9, r1
 80102fc:	f7f0 f974 	bl	80005e8 <__aeabi_dmul>
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	4630      	mov	r0, r6
 8010306:	4639      	mov	r1, r7
 8010308:	f7ef ffb6 	bl	8000278 <__aeabi_dsub>
 801030c:	f7f0 fc1c 	bl	8000b48 <__aeabi_d2iz>
 8010310:	9b02      	ldr	r3, [sp, #8]
 8010312:	f843 0b04 	str.w	r0, [r3], #4
 8010316:	3d01      	subs	r5, #1
 8010318:	9302      	str	r3, [sp, #8]
 801031a:	ab70      	add	r3, sp, #448	; 0x1c0
 801031c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010324:	4640      	mov	r0, r8
 8010326:	4649      	mov	r1, r9
 8010328:	f7ef ffa8 	bl	800027c <__adddf3>
 801032c:	4606      	mov	r6, r0
 801032e:	460f      	mov	r7, r1
 8010330:	e75b      	b.n	80101ea <__kernel_rem_pio2+0x10a>
 8010332:	d105      	bne.n	8010340 <__kernel_rem_pio2+0x260>
 8010334:	1e63      	subs	r3, r4, #1
 8010336:	aa0c      	add	r2, sp, #48	; 0x30
 8010338:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801033c:	15c3      	asrs	r3, r0, #23
 801033e:	e79b      	b.n	8010278 <__kernel_rem_pio2+0x198>
 8010340:	4b38      	ldr	r3, [pc, #224]	; (8010424 <__kernel_rem_pio2+0x344>)
 8010342:	2200      	movs	r2, #0
 8010344:	f7f0 fbd6 	bl	8000af4 <__aeabi_dcmpge>
 8010348:	2800      	cmp	r0, #0
 801034a:	d139      	bne.n	80103c0 <__kernel_rem_pio2+0x2e0>
 801034c:	9002      	str	r0, [sp, #8]
 801034e:	2200      	movs	r2, #0
 8010350:	2300      	movs	r3, #0
 8010352:	4630      	mov	r0, r6
 8010354:	4639      	mov	r1, r7
 8010356:	f7f0 fbaf 	bl	8000ab8 <__aeabi_dcmpeq>
 801035a:	2800      	cmp	r0, #0
 801035c:	f000 80b4 	beq.w	80104c8 <__kernel_rem_pio2+0x3e8>
 8010360:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8010364:	465b      	mov	r3, fp
 8010366:	2200      	movs	r2, #0
 8010368:	9904      	ldr	r1, [sp, #16]
 801036a:	428b      	cmp	r3, r1
 801036c:	da65      	bge.n	801043a <__kernel_rem_pio2+0x35a>
 801036e:	2a00      	cmp	r2, #0
 8010370:	d07b      	beq.n	801046a <__kernel_rem_pio2+0x38a>
 8010372:	ab0c      	add	r3, sp, #48	; 0x30
 8010374:	f1aa 0a18 	sub.w	sl, sl, #24
 8010378:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801037c:	2b00      	cmp	r3, #0
 801037e:	f000 80a0 	beq.w	80104c2 <__kernel_rem_pio2+0x3e2>
 8010382:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010408 <__kernel_rem_pio2+0x328>
 8010386:	4650      	mov	r0, sl
 8010388:	f000 fd12 	bl	8010db0 <scalbn>
 801038c:	4f23      	ldr	r7, [pc, #140]	; (801041c <__kernel_rem_pio2+0x33c>)
 801038e:	ec55 4b10 	vmov	r4, r5, d0
 8010392:	46d8      	mov	r8, fp
 8010394:	2600      	movs	r6, #0
 8010396:	f1b8 0f00 	cmp.w	r8, #0
 801039a:	f280 80cf 	bge.w	801053c <__kernel_rem_pio2+0x45c>
 801039e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8010400 <__kernel_rem_pio2+0x320>
 80103a2:	465f      	mov	r7, fp
 80103a4:	f04f 0800 	mov.w	r8, #0
 80103a8:	2f00      	cmp	r7, #0
 80103aa:	f2c0 80fd 	blt.w	80105a8 <__kernel_rem_pio2+0x4c8>
 80103ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80103b0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8010428 <__kernel_rem_pio2+0x348>
 80103b4:	ec55 4b18 	vmov	r4, r5, d8
 80103b8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80103bc:	2600      	movs	r6, #0
 80103be:	e0e5      	b.n	801058c <__kernel_rem_pio2+0x4ac>
 80103c0:	2302      	movs	r3, #2
 80103c2:	9302      	str	r3, [sp, #8]
 80103c4:	e75c      	b.n	8010280 <__kernel_rem_pio2+0x1a0>
 80103c6:	f8db 3000 	ldr.w	r3, [fp]
 80103ca:	b955      	cbnz	r5, 80103e2 <__kernel_rem_pio2+0x302>
 80103cc:	b123      	cbz	r3, 80103d8 <__kernel_rem_pio2+0x2f8>
 80103ce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80103d2:	f8cb 3000 	str.w	r3, [fp]
 80103d6:	2301      	movs	r3, #1
 80103d8:	3201      	adds	r2, #1
 80103da:	f10b 0b04 	add.w	fp, fp, #4
 80103de:	461d      	mov	r5, r3
 80103e0:	e755      	b.n	801028e <__kernel_rem_pio2+0x1ae>
 80103e2:	1acb      	subs	r3, r1, r3
 80103e4:	f8cb 3000 	str.w	r3, [fp]
 80103e8:	462b      	mov	r3, r5
 80103ea:	e7f5      	b.n	80103d8 <__kernel_rem_pio2+0x2f8>
 80103ec:	1e62      	subs	r2, r4, #1
 80103ee:	ab0c      	add	r3, sp, #48	; 0x30
 80103f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80103f8:	a90c      	add	r1, sp, #48	; 0x30
 80103fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80103fe:	e754      	b.n	80102aa <__kernel_rem_pio2+0x1ca>
	...
 801040c:	3ff00000 	.word	0x3ff00000
 8010410:	08011e80 	.word	0x08011e80
 8010414:	40200000 	.word	0x40200000
 8010418:	3ff00000 	.word	0x3ff00000
 801041c:	3e700000 	.word	0x3e700000
 8010420:	41700000 	.word	0x41700000
 8010424:	3fe00000 	.word	0x3fe00000
 8010428:	08011e40 	.word	0x08011e40
 801042c:	1e62      	subs	r2, r4, #1
 801042e:	ab0c      	add	r3, sp, #48	; 0x30
 8010430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010434:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010438:	e7de      	b.n	80103f8 <__kernel_rem_pio2+0x318>
 801043a:	a90c      	add	r1, sp, #48	; 0x30
 801043c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010440:	3b01      	subs	r3, #1
 8010442:	430a      	orrs	r2, r1
 8010444:	e790      	b.n	8010368 <__kernel_rem_pio2+0x288>
 8010446:	3301      	adds	r3, #1
 8010448:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801044c:	2900      	cmp	r1, #0
 801044e:	d0fa      	beq.n	8010446 <__kernel_rem_pio2+0x366>
 8010450:	9a08      	ldr	r2, [sp, #32]
 8010452:	18e3      	adds	r3, r4, r3
 8010454:	18a6      	adds	r6, r4, r2
 8010456:	aa20      	add	r2, sp, #128	; 0x80
 8010458:	1c65      	adds	r5, r4, #1
 801045a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801045e:	9302      	str	r3, [sp, #8]
 8010460:	9b02      	ldr	r3, [sp, #8]
 8010462:	42ab      	cmp	r3, r5
 8010464:	da04      	bge.n	8010470 <__kernel_rem_pio2+0x390>
 8010466:	461c      	mov	r4, r3
 8010468:	e6b5      	b.n	80101d6 <__kernel_rem_pio2+0xf6>
 801046a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801046c:	2301      	movs	r3, #1
 801046e:	e7eb      	b.n	8010448 <__kernel_rem_pio2+0x368>
 8010470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010476:	f7f0 f84d 	bl	8000514 <__aeabi_i2d>
 801047a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801047e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010480:	46b3      	mov	fp, r6
 8010482:	461c      	mov	r4, r3
 8010484:	2700      	movs	r7, #0
 8010486:	f04f 0800 	mov.w	r8, #0
 801048a:	f04f 0900 	mov.w	r9, #0
 801048e:	9b06      	ldr	r3, [sp, #24]
 8010490:	429f      	cmp	r7, r3
 8010492:	dd06      	ble.n	80104a2 <__kernel_rem_pio2+0x3c2>
 8010494:	ab70      	add	r3, sp, #448	; 0x1c0
 8010496:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801049a:	e9c3 8900 	strd	r8, r9, [r3]
 801049e:	3501      	adds	r5, #1
 80104a0:	e7de      	b.n	8010460 <__kernel_rem_pio2+0x380>
 80104a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80104a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80104aa:	f7f0 f89d 	bl	80005e8 <__aeabi_dmul>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	4640      	mov	r0, r8
 80104b4:	4649      	mov	r1, r9
 80104b6:	f7ef fee1 	bl	800027c <__adddf3>
 80104ba:	3701      	adds	r7, #1
 80104bc:	4680      	mov	r8, r0
 80104be:	4689      	mov	r9, r1
 80104c0:	e7e5      	b.n	801048e <__kernel_rem_pio2+0x3ae>
 80104c2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80104c6:	e754      	b.n	8010372 <__kernel_rem_pio2+0x292>
 80104c8:	ec47 6b10 	vmov	d0, r6, r7
 80104cc:	f1ca 0000 	rsb	r0, sl, #0
 80104d0:	f000 fc6e 	bl	8010db0 <scalbn>
 80104d4:	ec57 6b10 	vmov	r6, r7, d0
 80104d8:	4b9f      	ldr	r3, [pc, #636]	; (8010758 <__kernel_rem_pio2+0x678>)
 80104da:	ee10 0a10 	vmov	r0, s0
 80104de:	2200      	movs	r2, #0
 80104e0:	4639      	mov	r1, r7
 80104e2:	f7f0 fb07 	bl	8000af4 <__aeabi_dcmpge>
 80104e6:	b300      	cbz	r0, 801052a <__kernel_rem_pio2+0x44a>
 80104e8:	4b9c      	ldr	r3, [pc, #624]	; (801075c <__kernel_rem_pio2+0x67c>)
 80104ea:	2200      	movs	r2, #0
 80104ec:	4630      	mov	r0, r6
 80104ee:	4639      	mov	r1, r7
 80104f0:	f7f0 f87a 	bl	80005e8 <__aeabi_dmul>
 80104f4:	f7f0 fb28 	bl	8000b48 <__aeabi_d2iz>
 80104f8:	4605      	mov	r5, r0
 80104fa:	f7f0 f80b 	bl	8000514 <__aeabi_i2d>
 80104fe:	4b96      	ldr	r3, [pc, #600]	; (8010758 <__kernel_rem_pio2+0x678>)
 8010500:	2200      	movs	r2, #0
 8010502:	f7f0 f871 	bl	80005e8 <__aeabi_dmul>
 8010506:	460b      	mov	r3, r1
 8010508:	4602      	mov	r2, r0
 801050a:	4639      	mov	r1, r7
 801050c:	4630      	mov	r0, r6
 801050e:	f7ef feb3 	bl	8000278 <__aeabi_dsub>
 8010512:	f7f0 fb19 	bl	8000b48 <__aeabi_d2iz>
 8010516:	f104 0b01 	add.w	fp, r4, #1
 801051a:	ab0c      	add	r3, sp, #48	; 0x30
 801051c:	f10a 0a18 	add.w	sl, sl, #24
 8010520:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010524:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8010528:	e72b      	b.n	8010382 <__kernel_rem_pio2+0x2a2>
 801052a:	4630      	mov	r0, r6
 801052c:	4639      	mov	r1, r7
 801052e:	f7f0 fb0b 	bl	8000b48 <__aeabi_d2iz>
 8010532:	ab0c      	add	r3, sp, #48	; 0x30
 8010534:	46a3      	mov	fp, r4
 8010536:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801053a:	e722      	b.n	8010382 <__kernel_rem_pio2+0x2a2>
 801053c:	ab70      	add	r3, sp, #448	; 0x1c0
 801053e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8010542:	ab0c      	add	r3, sp, #48	; 0x30
 8010544:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010548:	f7ef ffe4 	bl	8000514 <__aeabi_i2d>
 801054c:	4622      	mov	r2, r4
 801054e:	462b      	mov	r3, r5
 8010550:	f7f0 f84a 	bl	80005e8 <__aeabi_dmul>
 8010554:	4632      	mov	r2, r6
 8010556:	e9c9 0100 	strd	r0, r1, [r9]
 801055a:	463b      	mov	r3, r7
 801055c:	4620      	mov	r0, r4
 801055e:	4629      	mov	r1, r5
 8010560:	f7f0 f842 	bl	80005e8 <__aeabi_dmul>
 8010564:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010568:	4604      	mov	r4, r0
 801056a:	460d      	mov	r5, r1
 801056c:	e713      	b.n	8010396 <__kernel_rem_pio2+0x2b6>
 801056e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010572:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010576:	f7f0 f837 	bl	80005e8 <__aeabi_dmul>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	4620      	mov	r0, r4
 8010580:	4629      	mov	r1, r5
 8010582:	f7ef fe7b 	bl	800027c <__adddf3>
 8010586:	3601      	adds	r6, #1
 8010588:	4604      	mov	r4, r0
 801058a:	460d      	mov	r5, r1
 801058c:	9b04      	ldr	r3, [sp, #16]
 801058e:	429e      	cmp	r6, r3
 8010590:	dc01      	bgt.n	8010596 <__kernel_rem_pio2+0x4b6>
 8010592:	45b0      	cmp	r8, r6
 8010594:	daeb      	bge.n	801056e <__kernel_rem_pio2+0x48e>
 8010596:	ab48      	add	r3, sp, #288	; 0x120
 8010598:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801059c:	e9c3 4500 	strd	r4, r5, [r3]
 80105a0:	3f01      	subs	r7, #1
 80105a2:	f108 0801 	add.w	r8, r8, #1
 80105a6:	e6ff      	b.n	80103a8 <__kernel_rem_pio2+0x2c8>
 80105a8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	dc0b      	bgt.n	80105c6 <__kernel_rem_pio2+0x4e6>
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	dc6e      	bgt.n	8010690 <__kernel_rem_pio2+0x5b0>
 80105b2:	d045      	beq.n	8010640 <__kernel_rem_pio2+0x560>
 80105b4:	9b07      	ldr	r3, [sp, #28]
 80105b6:	f003 0007 	and.w	r0, r3, #7
 80105ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80105be:	ecbd 8b02 	vpop	{d8}
 80105c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105c6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80105c8:	2b03      	cmp	r3, #3
 80105ca:	d1f3      	bne.n	80105b4 <__kernel_rem_pio2+0x4d4>
 80105cc:	ab48      	add	r3, sp, #288	; 0x120
 80105ce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80105d2:	46d0      	mov	r8, sl
 80105d4:	46d9      	mov	r9, fp
 80105d6:	f1b9 0f00 	cmp.w	r9, #0
 80105da:	f1a8 0808 	sub.w	r8, r8, #8
 80105de:	dc64      	bgt.n	80106aa <__kernel_rem_pio2+0x5ca>
 80105e0:	465c      	mov	r4, fp
 80105e2:	2c01      	cmp	r4, #1
 80105e4:	f1aa 0a08 	sub.w	sl, sl, #8
 80105e8:	dc7e      	bgt.n	80106e8 <__kernel_rem_pio2+0x608>
 80105ea:	2000      	movs	r0, #0
 80105ec:	2100      	movs	r1, #0
 80105ee:	f1bb 0f01 	cmp.w	fp, #1
 80105f2:	f300 8097 	bgt.w	8010724 <__kernel_rem_pio2+0x644>
 80105f6:	9b02      	ldr	r3, [sp, #8]
 80105f8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 80105fc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010600:	2b00      	cmp	r3, #0
 8010602:	f040 8099 	bne.w	8010738 <__kernel_rem_pio2+0x658>
 8010606:	9b01      	ldr	r3, [sp, #4]
 8010608:	e9c3 5600 	strd	r5, r6, [r3]
 801060c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010610:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010614:	e7ce      	b.n	80105b4 <__kernel_rem_pio2+0x4d4>
 8010616:	ab48      	add	r3, sp, #288	; 0x120
 8010618:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801061c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010620:	f7ef fe2c 	bl	800027c <__adddf3>
 8010624:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010628:	f1bb 0f00 	cmp.w	fp, #0
 801062c:	daf3      	bge.n	8010616 <__kernel_rem_pio2+0x536>
 801062e:	9b02      	ldr	r3, [sp, #8]
 8010630:	b113      	cbz	r3, 8010638 <__kernel_rem_pio2+0x558>
 8010632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010636:	4619      	mov	r1, r3
 8010638:	9b01      	ldr	r3, [sp, #4]
 801063a:	e9c3 0100 	strd	r0, r1, [r3]
 801063e:	e7b9      	b.n	80105b4 <__kernel_rem_pio2+0x4d4>
 8010640:	2000      	movs	r0, #0
 8010642:	2100      	movs	r1, #0
 8010644:	e7f0      	b.n	8010628 <__kernel_rem_pio2+0x548>
 8010646:	ab48      	add	r3, sp, #288	; 0x120
 8010648:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010650:	f7ef fe14 	bl	800027c <__adddf3>
 8010654:	3c01      	subs	r4, #1
 8010656:	2c00      	cmp	r4, #0
 8010658:	daf5      	bge.n	8010646 <__kernel_rem_pio2+0x566>
 801065a:	9b02      	ldr	r3, [sp, #8]
 801065c:	b1e3      	cbz	r3, 8010698 <__kernel_rem_pio2+0x5b8>
 801065e:	4602      	mov	r2, r0
 8010660:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010664:	9c01      	ldr	r4, [sp, #4]
 8010666:	e9c4 2300 	strd	r2, r3, [r4]
 801066a:	4602      	mov	r2, r0
 801066c:	460b      	mov	r3, r1
 801066e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8010672:	f7ef fe01 	bl	8000278 <__aeabi_dsub>
 8010676:	ad4a      	add	r5, sp, #296	; 0x128
 8010678:	2401      	movs	r4, #1
 801067a:	45a3      	cmp	fp, r4
 801067c:	da0f      	bge.n	801069e <__kernel_rem_pio2+0x5be>
 801067e:	9b02      	ldr	r3, [sp, #8]
 8010680:	b113      	cbz	r3, 8010688 <__kernel_rem_pio2+0x5a8>
 8010682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010686:	4619      	mov	r1, r3
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801068e:	e791      	b.n	80105b4 <__kernel_rem_pio2+0x4d4>
 8010690:	465c      	mov	r4, fp
 8010692:	2000      	movs	r0, #0
 8010694:	2100      	movs	r1, #0
 8010696:	e7de      	b.n	8010656 <__kernel_rem_pio2+0x576>
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	e7e2      	b.n	8010664 <__kernel_rem_pio2+0x584>
 801069e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80106a2:	f7ef fdeb 	bl	800027c <__adddf3>
 80106a6:	3401      	adds	r4, #1
 80106a8:	e7e7      	b.n	801067a <__kernel_rem_pio2+0x59a>
 80106aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80106ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80106b2:	4620      	mov	r0, r4
 80106b4:	4632      	mov	r2, r6
 80106b6:	463b      	mov	r3, r7
 80106b8:	4629      	mov	r1, r5
 80106ba:	f7ef fddf 	bl	800027c <__adddf3>
 80106be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80106c2:	4602      	mov	r2, r0
 80106c4:	460b      	mov	r3, r1
 80106c6:	4620      	mov	r0, r4
 80106c8:	4629      	mov	r1, r5
 80106ca:	f7ef fdd5 	bl	8000278 <__aeabi_dsub>
 80106ce:	4632      	mov	r2, r6
 80106d0:	463b      	mov	r3, r7
 80106d2:	f7ef fdd3 	bl	800027c <__adddf3>
 80106d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80106da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80106de:	ed88 7b00 	vstr	d7, [r8]
 80106e2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80106e6:	e776      	b.n	80105d6 <__kernel_rem_pio2+0x4f6>
 80106e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80106ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80106f0:	4640      	mov	r0, r8
 80106f2:	4632      	mov	r2, r6
 80106f4:	463b      	mov	r3, r7
 80106f6:	4649      	mov	r1, r9
 80106f8:	f7ef fdc0 	bl	800027c <__adddf3>
 80106fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010700:	4602      	mov	r2, r0
 8010702:	460b      	mov	r3, r1
 8010704:	4640      	mov	r0, r8
 8010706:	4649      	mov	r1, r9
 8010708:	f7ef fdb6 	bl	8000278 <__aeabi_dsub>
 801070c:	4632      	mov	r2, r6
 801070e:	463b      	mov	r3, r7
 8010710:	f7ef fdb4 	bl	800027c <__adddf3>
 8010714:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801071c:	ed8a 7b00 	vstr	d7, [sl]
 8010720:	3c01      	subs	r4, #1
 8010722:	e75e      	b.n	80105e2 <__kernel_rem_pio2+0x502>
 8010724:	ab48      	add	r3, sp, #288	; 0x120
 8010726:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801072a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801072e:	f7ef fda5 	bl	800027c <__adddf3>
 8010732:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010736:	e75a      	b.n	80105ee <__kernel_rem_pio2+0x50e>
 8010738:	9b01      	ldr	r3, [sp, #4]
 801073a:	9a01      	ldr	r2, [sp, #4]
 801073c:	601d      	str	r5, [r3, #0]
 801073e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010742:	605c      	str	r4, [r3, #4]
 8010744:	609f      	str	r7, [r3, #8]
 8010746:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801074a:	60d3      	str	r3, [r2, #12]
 801074c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010750:	6110      	str	r0, [r2, #16]
 8010752:	6153      	str	r3, [r2, #20]
 8010754:	e72e      	b.n	80105b4 <__kernel_rem_pio2+0x4d4>
 8010756:	bf00      	nop
 8010758:	41700000 	.word	0x41700000
 801075c:	3e700000 	.word	0x3e700000

08010760 <__kernel_sin>:
 8010760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010764:	ed2d 8b04 	vpush	{d8-d9}
 8010768:	eeb0 8a41 	vmov.f32	s16, s2
 801076c:	eef0 8a61 	vmov.f32	s17, s3
 8010770:	ec55 4b10 	vmov	r4, r5, d0
 8010774:	b083      	sub	sp, #12
 8010776:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801077a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801077e:	9001      	str	r0, [sp, #4]
 8010780:	da06      	bge.n	8010790 <__kernel_sin+0x30>
 8010782:	ee10 0a10 	vmov	r0, s0
 8010786:	4629      	mov	r1, r5
 8010788:	f7f0 f9de 	bl	8000b48 <__aeabi_d2iz>
 801078c:	2800      	cmp	r0, #0
 801078e:	d051      	beq.n	8010834 <__kernel_sin+0xd4>
 8010790:	4622      	mov	r2, r4
 8010792:	462b      	mov	r3, r5
 8010794:	4620      	mov	r0, r4
 8010796:	4629      	mov	r1, r5
 8010798:	f7ef ff26 	bl	80005e8 <__aeabi_dmul>
 801079c:	4682      	mov	sl, r0
 801079e:	468b      	mov	fp, r1
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	4620      	mov	r0, r4
 80107a6:	4629      	mov	r1, r5
 80107a8:	f7ef ff1e 	bl	80005e8 <__aeabi_dmul>
 80107ac:	a341      	add	r3, pc, #260	; (adr r3, 80108b4 <__kernel_sin+0x154>)
 80107ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b2:	4680      	mov	r8, r0
 80107b4:	4689      	mov	r9, r1
 80107b6:	4650      	mov	r0, sl
 80107b8:	4659      	mov	r1, fp
 80107ba:	f7ef ff15 	bl	80005e8 <__aeabi_dmul>
 80107be:	a33f      	add	r3, pc, #252	; (adr r3, 80108bc <__kernel_sin+0x15c>)
 80107c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c4:	f7ef fd58 	bl	8000278 <__aeabi_dsub>
 80107c8:	4652      	mov	r2, sl
 80107ca:	465b      	mov	r3, fp
 80107cc:	f7ef ff0c 	bl	80005e8 <__aeabi_dmul>
 80107d0:	a33c      	add	r3, pc, #240	; (adr r3, 80108c4 <__kernel_sin+0x164>)
 80107d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d6:	f7ef fd51 	bl	800027c <__adddf3>
 80107da:	4652      	mov	r2, sl
 80107dc:	465b      	mov	r3, fp
 80107de:	f7ef ff03 	bl	80005e8 <__aeabi_dmul>
 80107e2:	a33a      	add	r3, pc, #232	; (adr r3, 80108cc <__kernel_sin+0x16c>)
 80107e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e8:	f7ef fd46 	bl	8000278 <__aeabi_dsub>
 80107ec:	4652      	mov	r2, sl
 80107ee:	465b      	mov	r3, fp
 80107f0:	f7ef fefa 	bl	80005e8 <__aeabi_dmul>
 80107f4:	a337      	add	r3, pc, #220	; (adr r3, 80108d4 <__kernel_sin+0x174>)
 80107f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fa:	f7ef fd3f 	bl	800027c <__adddf3>
 80107fe:	9b01      	ldr	r3, [sp, #4]
 8010800:	4606      	mov	r6, r0
 8010802:	460f      	mov	r7, r1
 8010804:	b9eb      	cbnz	r3, 8010842 <__kernel_sin+0xe2>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	4650      	mov	r0, sl
 801080c:	4659      	mov	r1, fp
 801080e:	f7ef feeb 	bl	80005e8 <__aeabi_dmul>
 8010812:	a325      	add	r3, pc, #148	; (adr r3, 80108a8 <__kernel_sin+0x148>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	f7ef fd2e 	bl	8000278 <__aeabi_dsub>
 801081c:	4642      	mov	r2, r8
 801081e:	464b      	mov	r3, r9
 8010820:	f7ef fee2 	bl	80005e8 <__aeabi_dmul>
 8010824:	4602      	mov	r2, r0
 8010826:	460b      	mov	r3, r1
 8010828:	4620      	mov	r0, r4
 801082a:	4629      	mov	r1, r5
 801082c:	f7ef fd26 	bl	800027c <__adddf3>
 8010830:	4604      	mov	r4, r0
 8010832:	460d      	mov	r5, r1
 8010834:	ec45 4b10 	vmov	d0, r4, r5
 8010838:	b003      	add	sp, #12
 801083a:	ecbd 8b04 	vpop	{d8-d9}
 801083e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010842:	4b1b      	ldr	r3, [pc, #108]	; (80108b0 <__kernel_sin+0x150>)
 8010844:	ec51 0b18 	vmov	r0, r1, d8
 8010848:	2200      	movs	r2, #0
 801084a:	f7ef fecd 	bl	80005e8 <__aeabi_dmul>
 801084e:	4632      	mov	r2, r6
 8010850:	ec41 0b19 	vmov	d9, r0, r1
 8010854:	463b      	mov	r3, r7
 8010856:	4640      	mov	r0, r8
 8010858:	4649      	mov	r1, r9
 801085a:	f7ef fec5 	bl	80005e8 <__aeabi_dmul>
 801085e:	4602      	mov	r2, r0
 8010860:	460b      	mov	r3, r1
 8010862:	ec51 0b19 	vmov	r0, r1, d9
 8010866:	f7ef fd07 	bl	8000278 <__aeabi_dsub>
 801086a:	4652      	mov	r2, sl
 801086c:	465b      	mov	r3, fp
 801086e:	f7ef febb 	bl	80005e8 <__aeabi_dmul>
 8010872:	ec53 2b18 	vmov	r2, r3, d8
 8010876:	f7ef fcff 	bl	8000278 <__aeabi_dsub>
 801087a:	a30b      	add	r3, pc, #44	; (adr r3, 80108a8 <__kernel_sin+0x148>)
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	4606      	mov	r6, r0
 8010882:	460f      	mov	r7, r1
 8010884:	4640      	mov	r0, r8
 8010886:	4649      	mov	r1, r9
 8010888:	f7ef feae 	bl	80005e8 <__aeabi_dmul>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4630      	mov	r0, r6
 8010892:	4639      	mov	r1, r7
 8010894:	f7ef fcf2 	bl	800027c <__adddf3>
 8010898:	4602      	mov	r2, r0
 801089a:	460b      	mov	r3, r1
 801089c:	4620      	mov	r0, r4
 801089e:	4629      	mov	r1, r5
 80108a0:	f7ef fcea 	bl	8000278 <__aeabi_dsub>
 80108a4:	e7c4      	b.n	8010830 <__kernel_sin+0xd0>
 80108a6:	bf00      	nop
 80108a8:	55555549 	.word	0x55555549
 80108ac:	3fc55555 	.word	0x3fc55555
 80108b0:	3fe00000 	.word	0x3fe00000
 80108b4:	5acfd57c 	.word	0x5acfd57c
 80108b8:	3de5d93a 	.word	0x3de5d93a
 80108bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80108c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80108c4:	57b1fe7d 	.word	0x57b1fe7d
 80108c8:	3ec71de3 	.word	0x3ec71de3
 80108cc:	19c161d5 	.word	0x19c161d5
 80108d0:	3f2a01a0 	.word	0x3f2a01a0
 80108d4:	1110f8a6 	.word	0x1110f8a6
 80108d8:	3f811111 	.word	0x3f811111
 80108dc:	00000000 	.word	0x00000000

080108e0 <__kernel_tan>:
 80108e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108e4:	ed2d 8b04 	vpush	{d8-d9}
 80108e8:	ec5b ab10 	vmov	sl, fp, d0
 80108ec:	4be2      	ldr	r3, [pc, #904]	; (8010c78 <__kernel_tan+0x398>)
 80108ee:	b085      	sub	sp, #20
 80108f0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80108f4:	429f      	cmp	r7, r3
 80108f6:	ed8d 1b00 	vstr	d1, [sp]
 80108fa:	4606      	mov	r6, r0
 80108fc:	f8cd b00c 	str.w	fp, [sp, #12]
 8010900:	dc24      	bgt.n	801094c <__kernel_tan+0x6c>
 8010902:	ee10 0a10 	vmov	r0, s0
 8010906:	4659      	mov	r1, fp
 8010908:	f7f0 f91e 	bl	8000b48 <__aeabi_d2iz>
 801090c:	2800      	cmp	r0, #0
 801090e:	d148      	bne.n	80109a2 <__kernel_tan+0xc2>
 8010910:	1c73      	adds	r3, r6, #1
 8010912:	4652      	mov	r2, sl
 8010914:	4313      	orrs	r3, r2
 8010916:	433b      	orrs	r3, r7
 8010918:	d112      	bne.n	8010940 <__kernel_tan+0x60>
 801091a:	ec4b ab10 	vmov	d0, sl, fp
 801091e:	f000 f9b3 	bl	8010c88 <fabs>
 8010922:	49d6      	ldr	r1, [pc, #856]	; (8010c7c <__kernel_tan+0x39c>)
 8010924:	ec53 2b10 	vmov	r2, r3, d0
 8010928:	2000      	movs	r0, #0
 801092a:	f7ef ff87 	bl	800083c <__aeabi_ddiv>
 801092e:	4682      	mov	sl, r0
 8010930:	468b      	mov	fp, r1
 8010932:	ec4b ab10 	vmov	d0, sl, fp
 8010936:	b005      	add	sp, #20
 8010938:	ecbd 8b04 	vpop	{d8-d9}
 801093c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010940:	2e01      	cmp	r6, #1
 8010942:	d0f6      	beq.n	8010932 <__kernel_tan+0x52>
 8010944:	49ce      	ldr	r1, [pc, #824]	; (8010c80 <__kernel_tan+0x3a0>)
 8010946:	465b      	mov	r3, fp
 8010948:	2000      	movs	r0, #0
 801094a:	e7ee      	b.n	801092a <__kernel_tan+0x4a>
 801094c:	4bcd      	ldr	r3, [pc, #820]	; (8010c84 <__kernel_tan+0x3a4>)
 801094e:	429f      	cmp	r7, r3
 8010950:	dd27      	ble.n	80109a2 <__kernel_tan+0xc2>
 8010952:	9b03      	ldr	r3, [sp, #12]
 8010954:	2b00      	cmp	r3, #0
 8010956:	da0a      	bge.n	801096e <__kernel_tan+0x8e>
 8010958:	e9dd 2100 	ldrd	r2, r1, [sp]
 801095c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010960:	469b      	mov	fp, r3
 8010962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010966:	e9cd 2300 	strd	r2, r3, [sp]
 801096a:	ee10 aa10 	vmov	sl, s0
 801096e:	4652      	mov	r2, sl
 8010970:	465b      	mov	r3, fp
 8010972:	a1a1      	add	r1, pc, #644	; (adr r1, 8010bf8 <__kernel_tan+0x318>)
 8010974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010978:	f7ef fc7e 	bl	8000278 <__aeabi_dsub>
 801097c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010980:	4604      	mov	r4, r0
 8010982:	460d      	mov	r5, r1
 8010984:	a19e      	add	r1, pc, #632	; (adr r1, 8010c00 <__kernel_tan+0x320>)
 8010986:	e9d1 0100 	ldrd	r0, r1, [r1]
 801098a:	f7ef fc75 	bl	8000278 <__aeabi_dsub>
 801098e:	4622      	mov	r2, r4
 8010990:	462b      	mov	r3, r5
 8010992:	f7ef fc73 	bl	800027c <__adddf3>
 8010996:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8010c08 <__kernel_tan+0x328>
 801099a:	ed8d 7b00 	vstr	d7, [sp]
 801099e:	4682      	mov	sl, r0
 80109a0:	468b      	mov	fp, r1
 80109a2:	4652      	mov	r2, sl
 80109a4:	465b      	mov	r3, fp
 80109a6:	4650      	mov	r0, sl
 80109a8:	4659      	mov	r1, fp
 80109aa:	f7ef fe1d 	bl	80005e8 <__aeabi_dmul>
 80109ae:	4602      	mov	r2, r0
 80109b0:	460b      	mov	r3, r1
 80109b2:	4680      	mov	r8, r0
 80109b4:	4689      	mov	r9, r1
 80109b6:	f7ef fe17 	bl	80005e8 <__aeabi_dmul>
 80109ba:	4642      	mov	r2, r8
 80109bc:	4604      	mov	r4, r0
 80109be:	460d      	mov	r5, r1
 80109c0:	464b      	mov	r3, r9
 80109c2:	4650      	mov	r0, sl
 80109c4:	4659      	mov	r1, fp
 80109c6:	f7ef fe0f 	bl	80005e8 <__aeabi_dmul>
 80109ca:	a391      	add	r3, pc, #580	; (adr r3, 8010c10 <__kernel_tan+0x330>)
 80109cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d0:	ec41 0b18 	vmov	d8, r0, r1
 80109d4:	4620      	mov	r0, r4
 80109d6:	4629      	mov	r1, r5
 80109d8:	f7ef fe06 	bl	80005e8 <__aeabi_dmul>
 80109dc:	a38e      	add	r3, pc, #568	; (adr r3, 8010c18 <__kernel_tan+0x338>)
 80109de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e2:	f7ef fc4b 	bl	800027c <__adddf3>
 80109e6:	4622      	mov	r2, r4
 80109e8:	462b      	mov	r3, r5
 80109ea:	f7ef fdfd 	bl	80005e8 <__aeabi_dmul>
 80109ee:	a38c      	add	r3, pc, #560	; (adr r3, 8010c20 <__kernel_tan+0x340>)
 80109f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f4:	f7ef fc42 	bl	800027c <__adddf3>
 80109f8:	4622      	mov	r2, r4
 80109fa:	462b      	mov	r3, r5
 80109fc:	f7ef fdf4 	bl	80005e8 <__aeabi_dmul>
 8010a00:	a389      	add	r3, pc, #548	; (adr r3, 8010c28 <__kernel_tan+0x348>)
 8010a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a06:	f7ef fc39 	bl	800027c <__adddf3>
 8010a0a:	4622      	mov	r2, r4
 8010a0c:	462b      	mov	r3, r5
 8010a0e:	f7ef fdeb 	bl	80005e8 <__aeabi_dmul>
 8010a12:	a387      	add	r3, pc, #540	; (adr r3, 8010c30 <__kernel_tan+0x350>)
 8010a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a18:	f7ef fc30 	bl	800027c <__adddf3>
 8010a1c:	4622      	mov	r2, r4
 8010a1e:	462b      	mov	r3, r5
 8010a20:	f7ef fde2 	bl	80005e8 <__aeabi_dmul>
 8010a24:	a384      	add	r3, pc, #528	; (adr r3, 8010c38 <__kernel_tan+0x358>)
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	f7ef fc27 	bl	800027c <__adddf3>
 8010a2e:	4642      	mov	r2, r8
 8010a30:	464b      	mov	r3, r9
 8010a32:	f7ef fdd9 	bl	80005e8 <__aeabi_dmul>
 8010a36:	a382      	add	r3, pc, #520	; (adr r3, 8010c40 <__kernel_tan+0x360>)
 8010a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3c:	ec41 0b19 	vmov	d9, r0, r1
 8010a40:	4620      	mov	r0, r4
 8010a42:	4629      	mov	r1, r5
 8010a44:	f7ef fdd0 	bl	80005e8 <__aeabi_dmul>
 8010a48:	a37f      	add	r3, pc, #508	; (adr r3, 8010c48 <__kernel_tan+0x368>)
 8010a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4e:	f7ef fc15 	bl	800027c <__adddf3>
 8010a52:	4622      	mov	r2, r4
 8010a54:	462b      	mov	r3, r5
 8010a56:	f7ef fdc7 	bl	80005e8 <__aeabi_dmul>
 8010a5a:	a37d      	add	r3, pc, #500	; (adr r3, 8010c50 <__kernel_tan+0x370>)
 8010a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a60:	f7ef fc0c 	bl	800027c <__adddf3>
 8010a64:	4622      	mov	r2, r4
 8010a66:	462b      	mov	r3, r5
 8010a68:	f7ef fdbe 	bl	80005e8 <__aeabi_dmul>
 8010a6c:	a37a      	add	r3, pc, #488	; (adr r3, 8010c58 <__kernel_tan+0x378>)
 8010a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a72:	f7ef fc03 	bl	800027c <__adddf3>
 8010a76:	4622      	mov	r2, r4
 8010a78:	462b      	mov	r3, r5
 8010a7a:	f7ef fdb5 	bl	80005e8 <__aeabi_dmul>
 8010a7e:	a378      	add	r3, pc, #480	; (adr r3, 8010c60 <__kernel_tan+0x380>)
 8010a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a84:	f7ef fbfa 	bl	800027c <__adddf3>
 8010a88:	4622      	mov	r2, r4
 8010a8a:	462b      	mov	r3, r5
 8010a8c:	f7ef fdac 	bl	80005e8 <__aeabi_dmul>
 8010a90:	a375      	add	r3, pc, #468	; (adr r3, 8010c68 <__kernel_tan+0x388>)
 8010a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a96:	f7ef fbf1 	bl	800027c <__adddf3>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	ec51 0b19 	vmov	r0, r1, d9
 8010aa2:	f7ef fbeb 	bl	800027c <__adddf3>
 8010aa6:	ec53 2b18 	vmov	r2, r3, d8
 8010aaa:	f7ef fd9d 	bl	80005e8 <__aeabi_dmul>
 8010aae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ab2:	f7ef fbe3 	bl	800027c <__adddf3>
 8010ab6:	4642      	mov	r2, r8
 8010ab8:	464b      	mov	r3, r9
 8010aba:	f7ef fd95 	bl	80005e8 <__aeabi_dmul>
 8010abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ac2:	f7ef fbdb 	bl	800027c <__adddf3>
 8010ac6:	a36a      	add	r3, pc, #424	; (adr r3, 8010c70 <__kernel_tan+0x390>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	4604      	mov	r4, r0
 8010ace:	460d      	mov	r5, r1
 8010ad0:	ec51 0b18 	vmov	r0, r1, d8
 8010ad4:	f7ef fd88 	bl	80005e8 <__aeabi_dmul>
 8010ad8:	4622      	mov	r2, r4
 8010ada:	462b      	mov	r3, r5
 8010adc:	f7ef fbce 	bl	800027c <__adddf3>
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	ec41 0b18 	vmov	d8, r0, r1
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	4659      	mov	r1, fp
 8010aea:	4650      	mov	r0, sl
 8010aec:	f7ef fbc6 	bl	800027c <__adddf3>
 8010af0:	4b64      	ldr	r3, [pc, #400]	; (8010c84 <__kernel_tan+0x3a4>)
 8010af2:	429f      	cmp	r7, r3
 8010af4:	4604      	mov	r4, r0
 8010af6:	460d      	mov	r5, r1
 8010af8:	dd3e      	ble.n	8010b78 <__kernel_tan+0x298>
 8010afa:	4630      	mov	r0, r6
 8010afc:	f7ef fd0a 	bl	8000514 <__aeabi_i2d>
 8010b00:	4622      	mov	r2, r4
 8010b02:	4680      	mov	r8, r0
 8010b04:	4689      	mov	r9, r1
 8010b06:	462b      	mov	r3, r5
 8010b08:	4620      	mov	r0, r4
 8010b0a:	4629      	mov	r1, r5
 8010b0c:	f7ef fd6c 	bl	80005e8 <__aeabi_dmul>
 8010b10:	4642      	mov	r2, r8
 8010b12:	4606      	mov	r6, r0
 8010b14:	460f      	mov	r7, r1
 8010b16:	464b      	mov	r3, r9
 8010b18:	4620      	mov	r0, r4
 8010b1a:	4629      	mov	r1, r5
 8010b1c:	f7ef fbae 	bl	800027c <__adddf3>
 8010b20:	4602      	mov	r2, r0
 8010b22:	460b      	mov	r3, r1
 8010b24:	4630      	mov	r0, r6
 8010b26:	4639      	mov	r1, r7
 8010b28:	f7ef fe88 	bl	800083c <__aeabi_ddiv>
 8010b2c:	ec53 2b18 	vmov	r2, r3, d8
 8010b30:	f7ef fba2 	bl	8000278 <__aeabi_dsub>
 8010b34:	4602      	mov	r2, r0
 8010b36:	460b      	mov	r3, r1
 8010b38:	4650      	mov	r0, sl
 8010b3a:	4659      	mov	r1, fp
 8010b3c:	f7ef fb9c 	bl	8000278 <__aeabi_dsub>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	f7ef fb9a 	bl	800027c <__adddf3>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	4640      	mov	r0, r8
 8010b4e:	4649      	mov	r1, r9
 8010b50:	f7ef fb92 	bl	8000278 <__aeabi_dsub>
 8010b54:	9b03      	ldr	r3, [sp, #12]
 8010b56:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8010b5a:	f00a 0a02 	and.w	sl, sl, #2
 8010b5e:	4604      	mov	r4, r0
 8010b60:	f1ca 0001 	rsb	r0, sl, #1
 8010b64:	460d      	mov	r5, r1
 8010b66:	f7ef fcd5 	bl	8000514 <__aeabi_i2d>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	4620      	mov	r0, r4
 8010b70:	4629      	mov	r1, r5
 8010b72:	f7ef fd39 	bl	80005e8 <__aeabi_dmul>
 8010b76:	e6da      	b.n	801092e <__kernel_tan+0x4e>
 8010b78:	2e01      	cmp	r6, #1
 8010b7a:	d038      	beq.n	8010bee <__kernel_tan+0x30e>
 8010b7c:	460f      	mov	r7, r1
 8010b7e:	4689      	mov	r9, r1
 8010b80:	4602      	mov	r2, r0
 8010b82:	460b      	mov	r3, r1
 8010b84:	2000      	movs	r0, #0
 8010b86:	493e      	ldr	r1, [pc, #248]	; (8010c80 <__kernel_tan+0x3a0>)
 8010b88:	f7ef fe58 	bl	800083c <__aeabi_ddiv>
 8010b8c:	2600      	movs	r6, #0
 8010b8e:	e9cd 0100 	strd	r0, r1, [sp]
 8010b92:	4652      	mov	r2, sl
 8010b94:	465b      	mov	r3, fp
 8010b96:	4630      	mov	r0, r6
 8010b98:	4639      	mov	r1, r7
 8010b9a:	f7ef fb6d 	bl	8000278 <__aeabi_dsub>
 8010b9e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	ec51 0b18 	vmov	r0, r1, d8
 8010baa:	f7ef fb65 	bl	8000278 <__aeabi_dsub>
 8010bae:	4632      	mov	r2, r6
 8010bb0:	462b      	mov	r3, r5
 8010bb2:	f7ef fd19 	bl	80005e8 <__aeabi_dmul>
 8010bb6:	46b0      	mov	r8, r6
 8010bb8:	460f      	mov	r7, r1
 8010bba:	4606      	mov	r6, r0
 8010bbc:	4642      	mov	r2, r8
 8010bbe:	462b      	mov	r3, r5
 8010bc0:	4640      	mov	r0, r8
 8010bc2:	4649      	mov	r1, r9
 8010bc4:	f7ef fd10 	bl	80005e8 <__aeabi_dmul>
 8010bc8:	4b2c      	ldr	r3, [pc, #176]	; (8010c7c <__kernel_tan+0x39c>)
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f7ef fb56 	bl	800027c <__adddf3>
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	f7ef fb50 	bl	800027c <__adddf3>
 8010bdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010be0:	f7ef fd02 	bl	80005e8 <__aeabi_dmul>
 8010be4:	4642      	mov	r2, r8
 8010be6:	462b      	mov	r3, r5
 8010be8:	f7ef fb48 	bl	800027c <__adddf3>
 8010bec:	e69f      	b.n	801092e <__kernel_tan+0x4e>
 8010bee:	4682      	mov	sl, r0
 8010bf0:	468b      	mov	fp, r1
 8010bf2:	e69e      	b.n	8010932 <__kernel_tan+0x52>
 8010bf4:	f3af 8000 	nop.w
 8010bf8:	54442d18 	.word	0x54442d18
 8010bfc:	3fe921fb 	.word	0x3fe921fb
 8010c00:	33145c07 	.word	0x33145c07
 8010c04:	3c81a626 	.word	0x3c81a626
	...
 8010c10:	74bf7ad4 	.word	0x74bf7ad4
 8010c14:	3efb2a70 	.word	0x3efb2a70
 8010c18:	32f0a7e9 	.word	0x32f0a7e9
 8010c1c:	3f12b80f 	.word	0x3f12b80f
 8010c20:	1a8d1068 	.word	0x1a8d1068
 8010c24:	3f3026f7 	.word	0x3f3026f7
 8010c28:	fee08315 	.word	0xfee08315
 8010c2c:	3f57dbc8 	.word	0x3f57dbc8
 8010c30:	e96e8493 	.word	0xe96e8493
 8010c34:	3f8226e3 	.word	0x3f8226e3
 8010c38:	1bb341fe 	.word	0x1bb341fe
 8010c3c:	3faba1ba 	.word	0x3faba1ba
 8010c40:	db605373 	.word	0xdb605373
 8010c44:	bef375cb 	.word	0xbef375cb
 8010c48:	a03792a6 	.word	0xa03792a6
 8010c4c:	3f147e88 	.word	0x3f147e88
 8010c50:	f2f26501 	.word	0xf2f26501
 8010c54:	3f4344d8 	.word	0x3f4344d8
 8010c58:	c9560328 	.word	0xc9560328
 8010c5c:	3f6d6d22 	.word	0x3f6d6d22
 8010c60:	8406d637 	.word	0x8406d637
 8010c64:	3f9664f4 	.word	0x3f9664f4
 8010c68:	1110fe7a 	.word	0x1110fe7a
 8010c6c:	3fc11111 	.word	0x3fc11111
 8010c70:	55555563 	.word	0x55555563
 8010c74:	3fd55555 	.word	0x3fd55555
 8010c78:	3e2fffff 	.word	0x3e2fffff
 8010c7c:	3ff00000 	.word	0x3ff00000
 8010c80:	bff00000 	.word	0xbff00000
 8010c84:	3fe59427 	.word	0x3fe59427

08010c88 <fabs>:
 8010c88:	ec51 0b10 	vmov	r0, r1, d0
 8010c8c:	ee10 2a10 	vmov	r2, s0
 8010c90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c94:	ec43 2b10 	vmov	d0, r2, r3
 8010c98:	4770      	bx	lr
 8010c9a:	0000      	movs	r0, r0
 8010c9c:	0000      	movs	r0, r0
	...

08010ca0 <floor>:
 8010ca0:	ec51 0b10 	vmov	r0, r1, d0
 8010ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ca8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010cac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010cb0:	2e13      	cmp	r6, #19
 8010cb2:	ee10 5a10 	vmov	r5, s0
 8010cb6:	ee10 8a10 	vmov	r8, s0
 8010cba:	460c      	mov	r4, r1
 8010cbc:	dc32      	bgt.n	8010d24 <floor+0x84>
 8010cbe:	2e00      	cmp	r6, #0
 8010cc0:	da14      	bge.n	8010cec <floor+0x4c>
 8010cc2:	a333      	add	r3, pc, #204	; (adr r3, 8010d90 <floor+0xf0>)
 8010cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc8:	f7ef fad8 	bl	800027c <__adddf3>
 8010ccc:	2200      	movs	r2, #0
 8010cce:	2300      	movs	r3, #0
 8010cd0:	f7ef ff1a 	bl	8000b08 <__aeabi_dcmpgt>
 8010cd4:	b138      	cbz	r0, 8010ce6 <floor+0x46>
 8010cd6:	2c00      	cmp	r4, #0
 8010cd8:	da57      	bge.n	8010d8a <floor+0xea>
 8010cda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010cde:	431d      	orrs	r5, r3
 8010ce0:	d001      	beq.n	8010ce6 <floor+0x46>
 8010ce2:	4c2d      	ldr	r4, [pc, #180]	; (8010d98 <floor+0xf8>)
 8010ce4:	2500      	movs	r5, #0
 8010ce6:	4621      	mov	r1, r4
 8010ce8:	4628      	mov	r0, r5
 8010cea:	e025      	b.n	8010d38 <floor+0x98>
 8010cec:	4f2b      	ldr	r7, [pc, #172]	; (8010d9c <floor+0xfc>)
 8010cee:	4137      	asrs	r7, r6
 8010cf0:	ea01 0307 	and.w	r3, r1, r7
 8010cf4:	4303      	orrs	r3, r0
 8010cf6:	d01f      	beq.n	8010d38 <floor+0x98>
 8010cf8:	a325      	add	r3, pc, #148	; (adr r3, 8010d90 <floor+0xf0>)
 8010cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfe:	f7ef fabd 	bl	800027c <__adddf3>
 8010d02:	2200      	movs	r2, #0
 8010d04:	2300      	movs	r3, #0
 8010d06:	f7ef feff 	bl	8000b08 <__aeabi_dcmpgt>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d0eb      	beq.n	8010ce6 <floor+0x46>
 8010d0e:	2c00      	cmp	r4, #0
 8010d10:	bfbe      	ittt	lt
 8010d12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010d16:	fa43 f606 	asrlt.w	r6, r3, r6
 8010d1a:	19a4      	addlt	r4, r4, r6
 8010d1c:	ea24 0407 	bic.w	r4, r4, r7
 8010d20:	2500      	movs	r5, #0
 8010d22:	e7e0      	b.n	8010ce6 <floor+0x46>
 8010d24:	2e33      	cmp	r6, #51	; 0x33
 8010d26:	dd0b      	ble.n	8010d40 <floor+0xa0>
 8010d28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010d2c:	d104      	bne.n	8010d38 <floor+0x98>
 8010d2e:	ee10 2a10 	vmov	r2, s0
 8010d32:	460b      	mov	r3, r1
 8010d34:	f7ef faa2 	bl	800027c <__adddf3>
 8010d38:	ec41 0b10 	vmov	d0, r0, r1
 8010d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d48:	fa23 f707 	lsr.w	r7, r3, r7
 8010d4c:	4207      	tst	r7, r0
 8010d4e:	d0f3      	beq.n	8010d38 <floor+0x98>
 8010d50:	a30f      	add	r3, pc, #60	; (adr r3, 8010d90 <floor+0xf0>)
 8010d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d56:	f7ef fa91 	bl	800027c <__adddf3>
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	f7ef fed3 	bl	8000b08 <__aeabi_dcmpgt>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	d0bf      	beq.n	8010ce6 <floor+0x46>
 8010d66:	2c00      	cmp	r4, #0
 8010d68:	da02      	bge.n	8010d70 <floor+0xd0>
 8010d6a:	2e14      	cmp	r6, #20
 8010d6c:	d103      	bne.n	8010d76 <floor+0xd6>
 8010d6e:	3401      	adds	r4, #1
 8010d70:	ea25 0507 	bic.w	r5, r5, r7
 8010d74:	e7b7      	b.n	8010ce6 <floor+0x46>
 8010d76:	2301      	movs	r3, #1
 8010d78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010d7c:	fa03 f606 	lsl.w	r6, r3, r6
 8010d80:	4435      	add	r5, r6
 8010d82:	4545      	cmp	r5, r8
 8010d84:	bf38      	it	cc
 8010d86:	18e4      	addcc	r4, r4, r3
 8010d88:	e7f2      	b.n	8010d70 <floor+0xd0>
 8010d8a:	2500      	movs	r5, #0
 8010d8c:	462c      	mov	r4, r5
 8010d8e:	e7aa      	b.n	8010ce6 <floor+0x46>
 8010d90:	8800759c 	.word	0x8800759c
 8010d94:	7e37e43c 	.word	0x7e37e43c
 8010d98:	bff00000 	.word	0xbff00000
 8010d9c:	000fffff 	.word	0x000fffff

08010da0 <nan>:
 8010da0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010da8 <nan+0x8>
 8010da4:	4770      	bx	lr
 8010da6:	bf00      	nop
 8010da8:	00000000 	.word	0x00000000
 8010dac:	7ff80000 	.word	0x7ff80000

08010db0 <scalbn>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	ec55 4b10 	vmov	r4, r5, d0
 8010db6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010dba:	4606      	mov	r6, r0
 8010dbc:	462b      	mov	r3, r5
 8010dbe:	b99a      	cbnz	r2, 8010de8 <scalbn+0x38>
 8010dc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010dc4:	4323      	orrs	r3, r4
 8010dc6:	d036      	beq.n	8010e36 <scalbn+0x86>
 8010dc8:	4b39      	ldr	r3, [pc, #228]	; (8010eb0 <scalbn+0x100>)
 8010dca:	4629      	mov	r1, r5
 8010dcc:	ee10 0a10 	vmov	r0, s0
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f7ef fc09 	bl	80005e8 <__aeabi_dmul>
 8010dd6:	4b37      	ldr	r3, [pc, #220]	; (8010eb4 <scalbn+0x104>)
 8010dd8:	429e      	cmp	r6, r3
 8010dda:	4604      	mov	r4, r0
 8010ddc:	460d      	mov	r5, r1
 8010dde:	da10      	bge.n	8010e02 <scalbn+0x52>
 8010de0:	a32b      	add	r3, pc, #172	; (adr r3, 8010e90 <scalbn+0xe0>)
 8010de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de6:	e03a      	b.n	8010e5e <scalbn+0xae>
 8010de8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010dec:	428a      	cmp	r2, r1
 8010dee:	d10c      	bne.n	8010e0a <scalbn+0x5a>
 8010df0:	ee10 2a10 	vmov	r2, s0
 8010df4:	4620      	mov	r0, r4
 8010df6:	4629      	mov	r1, r5
 8010df8:	f7ef fa40 	bl	800027c <__adddf3>
 8010dfc:	4604      	mov	r4, r0
 8010dfe:	460d      	mov	r5, r1
 8010e00:	e019      	b.n	8010e36 <scalbn+0x86>
 8010e02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010e06:	460b      	mov	r3, r1
 8010e08:	3a36      	subs	r2, #54	; 0x36
 8010e0a:	4432      	add	r2, r6
 8010e0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010e10:	428a      	cmp	r2, r1
 8010e12:	dd08      	ble.n	8010e26 <scalbn+0x76>
 8010e14:	2d00      	cmp	r5, #0
 8010e16:	a120      	add	r1, pc, #128	; (adr r1, 8010e98 <scalbn+0xe8>)
 8010e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e1c:	da1c      	bge.n	8010e58 <scalbn+0xa8>
 8010e1e:	a120      	add	r1, pc, #128	; (adr r1, 8010ea0 <scalbn+0xf0>)
 8010e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e24:	e018      	b.n	8010e58 <scalbn+0xa8>
 8010e26:	2a00      	cmp	r2, #0
 8010e28:	dd08      	ble.n	8010e3c <scalbn+0x8c>
 8010e2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010e32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010e36:	ec45 4b10 	vmov	d0, r4, r5
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}
 8010e3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010e40:	da19      	bge.n	8010e76 <scalbn+0xc6>
 8010e42:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010e46:	429e      	cmp	r6, r3
 8010e48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010e4c:	dd0a      	ble.n	8010e64 <scalbn+0xb4>
 8010e4e:	a112      	add	r1, pc, #72	; (adr r1, 8010e98 <scalbn+0xe8>)
 8010e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1e2      	bne.n	8010e1e <scalbn+0x6e>
 8010e58:	a30f      	add	r3, pc, #60	; (adr r3, 8010e98 <scalbn+0xe8>)
 8010e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5e:	f7ef fbc3 	bl	80005e8 <__aeabi_dmul>
 8010e62:	e7cb      	b.n	8010dfc <scalbn+0x4c>
 8010e64:	a10a      	add	r1, pc, #40	; (adr r1, 8010e90 <scalbn+0xe0>)
 8010e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d0b8      	beq.n	8010de0 <scalbn+0x30>
 8010e6e:	a10e      	add	r1, pc, #56	; (adr r1, 8010ea8 <scalbn+0xf8>)
 8010e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e74:	e7b4      	b.n	8010de0 <scalbn+0x30>
 8010e76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010e7a:	3236      	adds	r2, #54	; 0x36
 8010e7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010e80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010e84:	4620      	mov	r0, r4
 8010e86:	4b0c      	ldr	r3, [pc, #48]	; (8010eb8 <scalbn+0x108>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	e7e8      	b.n	8010e5e <scalbn+0xae>
 8010e8c:	f3af 8000 	nop.w
 8010e90:	c2f8f359 	.word	0xc2f8f359
 8010e94:	01a56e1f 	.word	0x01a56e1f
 8010e98:	8800759c 	.word	0x8800759c
 8010e9c:	7e37e43c 	.word	0x7e37e43c
 8010ea0:	8800759c 	.word	0x8800759c
 8010ea4:	fe37e43c 	.word	0xfe37e43c
 8010ea8:	c2f8f359 	.word	0xc2f8f359
 8010eac:	81a56e1f 	.word	0x81a56e1f
 8010eb0:	43500000 	.word	0x43500000
 8010eb4:	ffff3cb0 	.word	0xffff3cb0
 8010eb8:	3c900000 	.word	0x3c900000

08010ebc <_init>:
 8010ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ebe:	bf00      	nop
 8010ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ec2:	bc08      	pop	{r3}
 8010ec4:	469e      	mov	lr, r3
 8010ec6:	4770      	bx	lr

08010ec8 <_fini>:
 8010ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eca:	bf00      	nop
 8010ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ece:	bc08      	pop	{r3}
 8010ed0:	469e      	mov	lr, r3
 8010ed2:	4770      	bx	lr
